
Spotlight_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b30  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08016c70  08016c70  00026c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017268  08017268  00027268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801726c  0801726c  0002726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000248  20000004  08017270  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000024c  080174b8  0003024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200002e8  08017551  000302e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000065b0  20000300  08017562  00030300  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200068b0  08017562  000368b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000302f9  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000b8  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a77  200300e0  200300e0  00040000  2**2
                  ALLOC
 14 .debug_info   000642a0  00000000  00000000  00030329  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000b021  00000000  00000000  000945c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00003d40  00000000  00000000  0009f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003898  00000000  00000000  000a3330  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003ae7e  00000000  00000000  000a6bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0003fe22  00000000  00000000  000e1a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0011a219  00000000  00000000  00121868  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0023ba81  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000100b8  00000000  00000000  0023bafc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000300 	.word	0x20000300
 800015c:	00000000 	.word	0x00000000
 8000160:	08016c58 	.word	0x08016c58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000304 	.word	0x20000304
 800017c:	08016c58 	.word	0x08016c58

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <calipile_setup>:

uint8_t rawData[3] = {0, 0, 0};
uint8_t packet[3] = {0, 0, 0};


void calipile_setup(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort, I2C_HandleTypeDef* periph){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	73bb      	strb	r3, [r7, #14]
	_deviceAddress = deviceAddress << 1;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <calipile_setup+0x3c>)
 8000b26:	701a      	strb	r2, [r3, #0]
	_int = intPin;
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <calipile_setup+0x40>)
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <calipile_setup+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	6013      	str	r3, [r2, #0]
	i2c_periph = periph;
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <calipile_setup+0x48>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20004e9a 	.word	0x20004e9a
 8000b4c:	20004e9b 	.word	0x20004e9b
 8000b50:	20004eb0 	.word	0x20004eb0
 8000b54:	20004ea8 	.word	0x20004ea8

08000b58 <calipile_wake>:

void calipile_wake(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af04      	add	r7, sp, #16
	// issue general call and reload command
	packet[0] = 0x00;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <calipile_wake+0x34>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(i2c_periph, 0x00, 0x04, I2C_MEMADD_SIZE_8BIT, packet, 1, 1000);
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <calipile_wake+0x38>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <calipile_wake+0x34>)
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	2204      	movs	r2, #4
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f005 fdb8 	bl	80066f0 <HAL_I2C_Mem_Write>
//	calipile_writeByte(0x04, packet);
	HAL_Delay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f003 fcc9 	bl	8004518 <HAL_Delay>
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000320 	.word	0x20000320
 8000b90:	20004ea8 	.word	0x20004ea8

08000b94 <calipile_initMotion>:
//	uint32_t tempObj = calipile_getTPOBJ();
//
//	return (25+273.15) + (tempAmb - _PTAT25) * (1/_M);
//}

void calipile_initMotion(uint8_t tcLP1, uint8_t tcLP2, uint8_t TPsource, uint8_t cycTime){
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	460b      	mov	r3, r1
 8000bac:	717b      	strb	r3, [r7, #5]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	713b      	strb	r3, [r7, #4]
	// issue general call and reload command
	uint8_t packet = 0x00;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

	 // Initialize the sensor for motion and presence detection
	  // Tthr (bit 4), presence (bit(3), motion (bit 2), amb shock (bit 1), timer (bit 0) interrupts allowed
	calipile_writeByte(CALIPILE_INT_MASK, &packet);
 8000bb6:	f107 030f 	add.w	r3, r7, #15
 8000bba:	4619      	mov	r1, r3
 8000bbc:	2019      	movs	r0, #25
 8000bbe:	f000 fa1f 	bl	8001000 <calipile_writeByte>

	  // time constant for LP1 (bits 0 - 3) and LP2 (bits 4 - 7)
	  packet = tcLP2 << 4 | tcLP1;
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_SLP12, &packet);
 8000bd4:	f107 030f 	add.w	r3, r7, #15
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2014      	movs	r0, #20
 8000bdc:	f000 fa10 	bl	8001000 <calipile_writeByte>

	  // select cycle time (bits 0 - 1) for motion detection, source (bits) 2 - 3) for presence detection
      uint8_t temp;
	  calipile_readBytes(CALIPILE_SRC_SELECT, &temp, 1);
 8000be0:	f107 030e 	add.w	r3, r7, #14
 8000be4:	2201      	movs	r2, #1
 8000be6:	4619      	mov	r1, r3
 8000be8:	201a      	movs	r0, #26
 8000bea:	f000 fa49 	bl	8001080 <calipile_readBytes>
	  packet = temp | TPsource << 2 | cycTime;
 8000bee:	797b      	ldrb	r3, [r7, #5]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	b25a      	sxtb	r2, r3
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b25a      	sxtb	r2, r3
 8000bfc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_SRC_SELECT, &packet);
 8000c08:	f107 030f 	add.w	r3, r7, #15
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	201a      	movs	r0, #26
 8000c10:	f000 f9f6 	bl	8001000 <calipile_writeByte>

	  // select motion threshold
	  packet = 0x22;  // presence threshold, set at 50 counts
 8000c14:	2322      	movs	r3, #34	; 0x22
 8000c16:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_TP_PRES_THLD, &packet);
 8000c18:	f107 030f 	add.w	r3, r7, #15
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	2016      	movs	r0, #22
 8000c20:	f000 f9ee 	bl	8001000 <calipile_writeByte>

	  packet = 0x0A; // motion threshold, set at 10 counts
 8000c24:	230a      	movs	r3, #10
 8000c26:	73fb      	strb	r3, [r7, #15]
	  calipile_writeByte(CALIPILE_TP_MOT_THLD, &packet);
 8000c28:	f107 030f 	add.w	r3, r7, #15
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2017      	movs	r0, #23
 8000c30:	f000 f9e6 	bl	8001000 <calipile_writeByte>
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}

08000c3c <calipile_initTempThr>:



void calipile_initTempThr(uint16_t Tcounts){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
	// specify the over temperature interrupt threshold (2 bytes)
	calipile_writeByte(CALIPILE_TPOT_THR, &Tcounts); // 0x83 means 67,072 counts as threshold
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	4619      	mov	r1, r3
 8000c4a:	201c      	movs	r0, #28
 8000c4c:	f000 f9d8 	bl	8001000 <calipile_writeByte>
	calipile_writeByte((CALIPILE_TPOT_THR + 1), 0x00);
 8000c50:	2100      	movs	r1, #0
 8000c52:	201d      	movs	r0, #29
 8000c54:	f000 f9d4 	bl	8001000 <calipile_writeByte>
	uint8_t temp;
	calipile_readByte(CALIPILE_SRC_SELECT, &temp);
 8000c58:	f107 030d 	add.w	r3, r7, #13
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	201a      	movs	r0, #26
 8000c60:	f000 f9ee 	bl	8001040 <calipile_readByte>

	uint8_t packet = temp | 0x10;
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	733b      	strb	r3, [r7, #12]
	calipile_writeByte(CALIPILE_SRC_SELECT, &packet); // interrupt on exceeding threshold
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	201a      	movs	r0, #26
 8000c76:	f000 f9c3 	bl	8001000 <calipile_writeByte>

	// Verify threshold set
	calipile_readBytes(CALIPILE_TPOT_THR, rawData, 2);
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <calipile_initTempThr+0x64>)
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f000 f9fe 	bl	8001080 <calipile_readBytes>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <calipile_initTempThr+0x64>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <calipile_initTempThr+0x64>)
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	81fb      	strh	r3, [r7, #14]
//	Serial.print("Overtemp threshold = "); Serial.println(TPOTTHR * 2);
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000031c 	.word	0x2000031c

08000ca4 <calipile_getTPAMB>:

uint16_t calipile_getTPAMB(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	calipile_readBytes(CALIPILE_TPAMBIENT, rawData, 2);
 8000caa:	2202      	movs	r2, #2
 8000cac:	490a      	ldr	r1, [pc, #40]	; (8000cd8 <calipile_getTPAMB+0x34>)
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 f9e6 	bl	8001080 <calipile_readBytes>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1] ;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <calipile_getTPAMB+0x34>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <calipile_getTPAMB+0x34>)
 8000cc4:	785b      	ldrb	r3, [r3, #1]
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	80fb      	strh	r3, [r7, #6]
	return temp;
 8000cce:	88fb      	ldrh	r3, [r7, #6]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000031c 	.word	0x2000031c

08000cdc <calipile_getTPOBJ>:
uint16_t calipile_getTPOBJ(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	calipile_readBytes(CALIPILE_TPOBJECT, rawData, 3);
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 f9ca 	bl	8001080 <calipile_readBytes>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	061a      	lsls	r2, r3, #24
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	041b      	lsls	r3, r3, #16
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <calipile_getTPOBJ+0x3c>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d04:	4313      	orrs	r3, r2
 8000d06:	0bdb      	lsrs	r3, r3, #15
 8000d08:	607b      	str	r3, [r7, #4]
	return temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	b29b      	uxth	r3, r3
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000031c 	.word	0x2000031c

08000d1c <calipile_getTPPRESENCE>:
	   temp /= 128;
	   return temp;
}


uint8_t calipile_getTPPRESENCE(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
      uint8_t temp;
                  calipile_readByte(CALIPILE_TPPRESENCE, &temp);
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	4619      	mov	r1, r3
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f98a 	bl	8001040 <calipile_readByte>
      return temp;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
  }
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <calipile_getTPMOTION>:


  uint8_t calipile_getTPMOTION(){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
      uint8_t temp;
            calipile_readByte(CALIPILE_TPMOTION, &temp);
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2010      	movs	r0, #16
 8000d42:	f000 f97d 	bl	8001040 <calipile_readByte>
      return temp;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
  }
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <calipile_getTamb>:
      uint8_t temp;
      calipile_readByte(CALIPILE_TPAMB_SHOCK, &temp);
      return temp;
  }

    float calipile_getTamb(uint16_t TPAMB){
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
      float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <calipile_getTamb+0x5c>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <calipile_getTamb+0x60>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000d84:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d8c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000db4 <calipile_getTamb+0x64>
 8000d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d94:	edc7 7a03 	vstr	s15, [r7, #12]
      return temp;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	ee07 3a90 	vmov	s15, r3
  }
 8000d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20000396 	.word	0x20000396
 8000db0:	20004eb4 	.word	0x20004eb4
 8000db4:	43951333 	.word	0x43951333

08000db8 <calipile_getTobj>:

    float calipile_getTobj(uint32_t TPOBJ, float Tamb){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	ed87 0a00 	vstr	s0, [r7]
      float temp0 = powf(Tamb, 3.8f);
 8000dc4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000e28 <calipile_getTobj+0x70>
 8000dc8:	ed97 0a00 	vldr	s0, [r7]
 8000dcc:	f002 f9a0 	bl	8003110 <powf>
 8000dd0:	ed87 0a05 	vstr	s0, [r7, #20]
      float temp1 = ( ((float) TPOBJ) - ((float) _U0)  ) / _k ;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <calipile_getTobj+0x74>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dea:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <calipile_getTobj+0x78>)
 8000df0:	ed93 7a00 	vldr	s14, [r3]
 8000df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df8:	edc7 7a04 	vstr	s15, [r7, #16]
      float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 8000dfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e00:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e08:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8000e34 <calipile_getTobj+0x7c>
 8000e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e10:	f002 f97e 	bl	8003110 <powf>
 8000e14:	ed87 0a03 	vstr	s0, [r7, #12]
      return temp3;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	ee07 3a90 	vmov	s15, r3
  }
 8000e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40733333 	.word	0x40733333
 8000e2c:	20004eb6 	.word	0x20004eb6
 8000e30:	20004ea4 	.word	0x20004ea4
 8000e34:	3e86bca2 	.word	0x3e86bca2

08000e38 <calipile_readEEPROM>:
  }



  void calipile_readEEPROM()
  {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	ed2d 8b02 	vpush	{d8}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0

  uint8_t rawData[2] = {0, 0};
 8000e42:	2300      	movs	r3, #0
 8000e44:	713b      	strb	r3, [r7, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	717b      	strb	r3, [r7, #5]
  uint8_t packet;
  /* Start of EEPROM operations, just have to do once *************************************************** */
 // Check EEPROM protocol number as a test of I2C communication
  packet = 0x80;
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	70fb      	strb	r3, [r7, #3]
  calipile_writeByte(CALIPILE_EEPROM_CONTROL, &packet); // enable EEPROM read
 8000e4e:	1cfb      	adds	r3, r7, #3
 8000e50:	4619      	mov	r1, r3
 8000e52:	201f      	movs	r0, #31
 8000e54:	f000 f8d4 	bl	8001000 <calipile_writeByte>

  uint8_t c;
  calipile_readByte(CALIPILE_EEPROM_PROTOCOL, &c);
 8000e58:	1cbb      	adds	r3, r7, #2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2020      	movs	r0, #32
 8000e5e:	f000 f8ef 	bl	8001040 <calipile_readByte>
//  Serial.print("CaliPile EEPROM protocol number is "); Serial.println(c);
//  Serial.println("CaliPile EEPROM protocol number should be 3");

  uint8_t d;
  calipile_readByte(CALIPILE_SLAVE_ADDRESS, &d);
 8000e62:	1c7b      	adds	r3, r7, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	203f      	movs	r0, #63	; 0x3f
 8000e68:	f000 f8ea 	bl	8001040 <calipile_readByte>
//  Serial.println("CaliPile EEPROM slave address should be 140");
//  Serial.println(" ");

  // Read the EEPROM calibration constants

  calipile_readByte(CALIPILE_EEPROM_LOOKUPNUM, &_LOOKUP);
 8000e6c:	4958      	ldr	r1, [pc, #352]	; (8000fd0 <calipile_readEEPROM+0x198>)
 8000e6e:	2029      	movs	r0, #41	; 0x29
 8000e70:	f000 f8e6 	bl	8001040 <calipile_readByte>
//  Serial.print("CaliPile LookUpNumber is "); Serial.println(_LOOKUP);

  calipile_readBytes(CALIPILE_EEPROM_PTAT25, &rawData[0], 2);
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2202      	movs	r2, #2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	202a      	movs	r0, #42	; 0x2a
 8000e7c:	f000 f900 	bl	8001080 <calipile_readBytes>
  _PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000e80:	793b      	ldrb	r3, [r7, #4]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	797b      	ldrb	r3, [r7, #5]
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <calipile_readEEPROM+0x19c>)
 8000e92:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile PTAT25 is "); Serial.println(_PTAT25);

  calipile_readBytes(CALIPILE_EEPROM_M, &rawData[0], 2);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2202      	movs	r2, #2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	202c      	movs	r0, #44	; 0x2c
 8000e9c:	f000 f8f0 	bl	8001080 <calipile_readBytes>
  _M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000ea0:	793b      	ldrb	r3, [r7, #4]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	797b      	ldrb	r3, [r7, #5]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <calipile_readEEPROM+0x1a0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
  _M /= 100;
 8000eb4:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <calipile_readEEPROM+0x1a0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <calipile_readEEPROM+0x1a4>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <calipile_readEEPROM+0x1a0>)
 8000ec4:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile M is "); Serial.println(_M);

  calipile_readBytes(CALIPILE_EEPROM_U0, &rawData[0], 2);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2202      	movs	r2, #2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	202e      	movs	r0, #46	; 0x2e
 8000ece:	f000 f8d7 	bl	8001080 <calipile_readBytes>
  _U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000ed2:	793b      	ldrb	r3, [r7, #4]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	797b      	ldrb	r3, [r7, #5]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000ee4:	801a      	strh	r2, [r3, #0]
  _U0 += 32768;
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000ef2:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile U0 is "); Serial.println(_U0);

  calipile_readBytes(CALIPILE_EEPROM_UOUT1, &rawData[0], 2);
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2030      	movs	r0, #48	; 0x30
 8000efc:	f000 f8c0 	bl	8001080 <calipile_readBytes>
  _UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	797a      	ldrb	r2, [r7, #5]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f0c:	601a      	str	r2, [r3, #0]
  _UOUT1 *= 2;
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f16:	6013      	str	r3, [r2, #0]
//  Serial.print("CaliPile UOUT1 is "); Serial.println(_UOUT1);

  calipile_readByte(CALIPILE_EEPROM_TOBJ1, &_TOBJ1);
 8000f18:	4933      	ldr	r1, [pc, #204]	; (8000fe8 <calipile_readEEPROM+0x1b0>)
 8000f1a:	2032      	movs	r0, #50	; 0x32
 8000f1c:	f000 f890 	bl	8001040 <calipile_readByte>
//  Serial.print("CaliPile TOBJ1 is "); Serial.println(_TOBJ1);

  calipile_readBytes(CALIPILE_EEPROM_CHECKSUM, &rawData[0], 2);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2202      	movs	r2, #2
 8000f24:	4619      	mov	r1, r3
 8000f26:	2021      	movs	r0, #33	; 0x21
 8000f28:	f000 f8aa 	bl	8001080 <calipile_readBytes>
  _CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8000f2c:	793b      	ldrb	r3, [r7, #4]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <calipile_readEEPROM+0x1b4>)
 8000f3e:	801a      	strh	r2, [r3, #0]
//  Serial.print("CaliPile CHECKSUM is supposed to be "); Serial.println(_CHECKSUM);

  // Calculate the checksum
  uint16_t sum = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	81fb      	strh	r3, [r7, #14]
  uint8_t temp;
  for(int ii = 35; ii < 64; ii++)
 8000f44:	2323      	movs	r3, #35	; 0x23
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	e00e      	b.n	8000f68 <calipile_readEEPROM+0x130>
  {
   calipile_readByte(ii, &temp);
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	463a      	mov	r2, r7
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f874 	bl	8001040 <calipile_readByte>
   sum += temp;
 8000f58:	783b      	ldrb	r3, [r7, #0]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	4413      	add	r3, r2
 8000f60:	81fb      	strh	r3, [r7, #14]
  for(int ii = 35; ii < 64; ii++)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f6c:	dded      	ble.n	8000f4a <calipile_readEEPROM+0x112>
  }
//  Serial.print("CaliPile CHECKSUM is "); Serial.println(sum + c);

  packet = 0x00;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	70fb      	strb	r3, [r7, #3]
  calipile_writeByte(CALIPILE_EEPROM_CONTROL, &packet); // enable EEPROM read
 8000f72:	1cfb      	adds	r3, r7, #3
 8000f74:	4619      	mov	r1, r3
 8000f76:	201f      	movs	r0, #31
 8000f78:	f000 f842 	bl	8001000 <calipile_writeByte>

  /* End of EEPROM operations, just have to do once *************************************************** */

  // Construct needed calibration constants (just need to calculate once)
  _k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <calipile_readEEPROM+0x1ac>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <calipile_readEEPROM+0x1a8>)
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <calipile_readEEPROM+0x1b0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000ff0 <calipile_readEEPROM+0x1b8>
 8000f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fa2:	eddf 0a14 	vldr	s1, [pc, #80]	; 8000ff4 <calipile_readEEPROM+0x1bc>
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	f002 f8b1 	bl	8003110 <powf>
 8000fae:	eeb0 7a40 	vmov.f32	s14, s0
 8000fb2:	eddf 7a11 	vldr	s15, [pc, #68]	; 8000ff8 <calipile_readEEPROM+0x1c0>
 8000fb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fba:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <calipile_readEEPROM+0x1c4>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]

  }
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	ecbd 8b02 	vpop	{d8}
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20004eac 	.word	0x20004eac
 8000fd4:	20000396 	.word	0x20000396
 8000fd8:	20004eb4 	.word	0x20004eb4
 8000fdc:	51eb851f 	.word	0x51eb851f
 8000fe0:	20004eb6 	.word	0x20004eb6
 8000fe4:	20004ea0 	.word	0x20004ea0
 8000fe8:	20004e9c 	.word	0x20004e9c
 8000fec:	20004e98 	.word	0x20004e98
 8000ff0:	43889333 	.word	0x43889333
 8000ff4:	40733333 	.word	0x40733333
 8000ff8:	4f16b4e3 	.word	0x4f16b4e3
 8000ffc:	20004ea4 	.word	0x20004ea4

08001000 <calipile_writeByte>:

    void calipile_writeByte(uint8_t reg, uint8_t* packet){
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
      HAL_I2C_Mem_Write(i2c_periph, _deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, packet, 1, 1000);
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <calipile_writeByte+0x38>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <calipile_writeByte+0x3c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b299      	uxth	r1, r3
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	b29a      	uxth	r2, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	f005 fb61 	bl	80066f0 <HAL_I2C_Mem_Write>
//      write_byte[0] = reg;
//      write_byte[1] = *packet;

//  	HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress, write_byte, 2, 100);

    }
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20004ea8 	.word	0x20004ea8
 800103c:	20004e9a 	.word	0x20004e9a

08001040 <calipile_readByte>:

    void calipile_readByte(uint8_t reg, uint8_t* packet){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af04      	add	r7, sp, #16
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
    	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, packet, 1, 1000);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <calipile_readByte+0x38>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <calipile_readByte+0x3c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b299      	uxth	r1, r3
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	b29a      	uxth	r2, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	f005 fc55 	bl	8006918 <HAL_I2C_Mem_Read>
//    	HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress, &reg, 1, 100);
//    	HAL_I2C_Master_Receive(i2c_periph, _deviceAddress, packet, 1, 100);
    }
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20004ea8 	.word	0x20004ea8
 800107c:	20004e9a 	.word	0x20004e9a

08001080 <calipile_readBytes>:

    void calipile_readBytes(uint8_t reg, uint8_t* packet, uint8_t len){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b087      	sub	sp, #28
 8001084:	af04      	add	r7, sp, #16
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, packet, len, 1000);
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <calipile_readBytes+0x40>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <calipile_readBytes+0x44>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b299      	uxth	r1, r3
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	b29c      	uxth	r4, r3
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a6:	9202      	str	r2, [sp, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	4622      	mov	r2, r4
 80010b2:	f005 fc31 	bl	8006918 <HAL_I2C_Mem_Read>
//    	packet[0] = CALIPILE_TPOBJECT;
//    	uint8_t temp;
//    	HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress, &reg, 1, 100);
//    	HAL_I2C_Master_Receive(i2c_periph, _deviceAddress, packet, len, 100);

    }
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	20004ea8 	.word	0x20004ea8
 80010c4:	20004e9a 	.word	0x20004e9a

080010c8 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>:
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
//Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
//                                      int motor_pin_3, int motor_pin_4)
Stepper::Stepper(int32_t number_of_steps, 	GPIO_TypeDef* motor_pin_1_port, uint16_t motor_pin_1,
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
											GPIO_TypeDef* motor_pin_2_port, uint16_t motor_pin_2,
											GPIO_TypeDef* motor_pin_3_port, uint16_t motor_pin_3,
											GPIO_TypeDef* motor_pin_4_port, uint16_t motor_pin_4,
											volatile uint16_t* stop_sensor, uint8_t motor_direction)
{
  this->step_number = 0;    // which step the motor is on
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  this->direction = 0;      // motor direction
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	649a      	str	r2, [r3, #72]	; 0x48
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	609a      	str	r2, [r3, #8]

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	887a      	ldrh	r2, [r7, #2]
 80010f2:	841a      	strh	r2, [r3, #32]
  this->motor_pin_2 = motor_pin_2;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8bba      	ldrh	r2, [r7, #28]
 80010f8:	845a      	strh	r2, [r3, #34]	; 0x22
  this->motor_pin_3 = motor_pin_3;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010fe:	849a      	strh	r2, [r3, #36]	; 0x24
  this->motor_pin_4 = motor_pin_4;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001104:	84da      	strh	r2, [r3, #38]	; 0x26

  // Arduino ports for the motor control pin connection:
  this->motor_pin_1_port = motor_pin_1_port;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
  this->motor_pin_2_port = motor_pin_2_port;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
  this->motor_pin_3_port = motor_pin_3_port;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a3a      	ldr	r2, [r7, #32]
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
  this->motor_pin_4_port = motor_pin_4_port;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800111c:	639a      	str	r2, [r3, #56]	; 0x38

  this->motor_dir = motor_direction;
 800111e:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
//  pinMode(this->motor_pin_2, OUTPUT);
//  pinMode(this->motor_pin_3, OUTPUT);
//  pinMode(this->motor_pin_4, OUTPUT);

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	851a      	strh	r2, [r3, #40]	; 0x28

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2204      	movs	r2, #4
 8001132:	60da      	str	r2, [r3, #12]

  // pin that is continously updated via DMA on the magnetic end stop value (0 means the magnet is directly aligned with the sensor)
  this->end_stop = stop_sensor;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
}
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_ZN7Stepper8setSpeedEl>:

/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <_ZN7Stepper8setSpeedEl+0x2c>)
 8001158:	fb92 f2f3 	sdiv	r2, r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	03938700 	.word	0x03938700

08001178 <_ZN7Stepper12setStepBoundEl>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */

void Stepper::setStepBound(int32_t max_step){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	this->max_step = max_step;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	615a      	str	r2, [r3, #20]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZN7Stepper4stepEi>:

uint32_t Stepper::step(int steps_to_move)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	// break if requested steps exceed maximum range
	if( ((this->step_tracker + steps_to_move) > this->max_step) || (this->step_tracker - steps_to_move) < 0 ){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6952      	ldr	r2, [r2, #20]
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <_ZN7Stepper4stepEi+0x1e>
		return 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e07f      	b.n	80012b2 <_ZN7Stepper4stepEi+0x11e>
	}

	this->step_tracker += steps_to_move;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]

	// compensate in case motor direction is flipped
	steps_to_move = steps_to_move * this->motor_dir;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 80011c4:	461a      	mov	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	603b      	str	r3, [r7, #0]

	// if requesting to go to 0th position, hone axis to limit drift
	if(this->step_tracker == 0){
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <_ZN7Stepper4stepEi+0x4a>
		honeAxis();
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 fb26 	bl	8001828 <_ZN7Stepper8honeAxisEv>
 80011dc:	e068      	b.n	80012b0 <_ZN7Stepper4stepEi+0x11c>
	}
	else{
		uint32_t steps_left = abs(steps_to_move);  // how many steps to take
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bfb8      	it	lt
 80011e4:	425b      	neglt	r3, r3
 80011e6:	60fb      	str	r3, [r7, #12]
	//	uint32_t steps_left;
	  // determine direction based on whether steps_to_mode is + or -:
	  if (steps_to_move > 0) { this->direction = 1; }
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dd02      	ble.n	80011f4 <_ZN7Stepper4stepEi+0x60>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
	  if (steps_to_move < 0) { this->direction = 0; }
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da02      	bge.n	8001200 <_ZN7Stepper4stepEi+0x6c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]


	  // decrement the number of steps, moving one step each time:
	  while (steps_left > 0)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d054      	beq.n	80012b0 <_ZN7Stepper4stepEi+0x11c>
	  {
			  //    unsigned long now = micros();
		  uint32_t now = __HAL_TIM_GET_COUNTER(&htim2);
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <_ZN7Stepper4stepEi+0x128>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	60bb      	str	r3, [r7, #8]
		// move only if the appropriate delay has passed:
		 if (now - this->last_step_time >= this->step_delay)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3f0      	bcc.n	8001200 <_ZN7Stepper4stepEi+0x6c>
		{
		  // get the timeStamp of when you stepped:
		  this->last_step_time = now;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	649a      	str	r2, [r3, #72]	; 0x48
		  // increment or decrement the step number,
		  // depending on direction:
		  if (this->direction == 1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10e      	bne.n	800124a <_ZN7Stepper4stepEi+0xb6>
		  {
			this->step_number++;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	611a      	str	r2, [r3, #16]
			if (this->step_number == this->number_of_steps) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	429a      	cmp	r2, r3
 8001240:	d110      	bne.n	8001264 <_ZN7Stepper4stepEi+0xd0>
			  this->step_number = 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	e00c      	b.n	8001264 <_ZN7Stepper4stepEi+0xd0>
			}
		  }
		  else
		  {
			if (this->step_number == 0) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <_ZN7Stepper4stepEi+0xc6>
			  this->step_number = this->number_of_steps;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
			}
			this->step_number--;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	1e5a      	subs	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	611a      	str	r2, [r3, #16]
		  }
		  // decrement the steps left:
		  steps_left--;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3b01      	subs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
		  // step the motor to step number 0, 1, ..., {3 or 10}
		  if (this->pin_count == 5)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d110      	bne.n	8001294 <_ZN7Stepper4stepEi+0x100>
			stepMotor(this->step_number % 10);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <_ZN7Stepper4stepEi+0x12c>)
 8001278:	fb83 1302 	smull	r1, r3, r3, r2
 800127c:	1099      	asrs	r1, r3, #2
 800127e:	17d3      	asrs	r3, r2, #31
 8001280:	1ac9      	subs	r1, r1, r3
 8001282:	460b      	mov	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	1ad1      	subs	r1, r2, r3
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f819 	bl	80012c4 <_ZN7Stepper9stepMotorEi>
 8001292:	e7b5      	b.n	8001200 <_ZN7Stepper4stepEi+0x6c>
		  else
			stepMotor(this->step_number % 4);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	425a      	negs	r2, r3
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	bf58      	it	pl
 80012a4:	4253      	negpl	r3, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f80b 	bl	80012c4 <_ZN7Stepper9stepMotorEi>
	  while (steps_left > 0)
 80012ae:	e7a7      	b.n	8001200 <_ZN7Stepper4stepEi+0x6c>
		}
	  }
	}
  return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20005094 	.word	0x20005094
 80012c0:	66666667 	.word	0x66666667

080012c4 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  if (this->pin_count == 2) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d152      	bne.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
    switch (thisStep) {
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d84f      	bhi.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
 80012dc:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <_ZN7Stepper9stepMotorEi+0x20>)
 80012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e2:	bf00      	nop
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	08001317 	.word	0x08001317
 80012ec:	08001339 	.word	0x08001339
 80012f0:	0800135b 	.word	0x0800135b
      case 0:  // 01
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	8c1b      	ldrh	r3, [r3, #32]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	f005 f92a 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f005 f922 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 8001314:	e032      	b.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
      case 1:  // 11
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	8c1b      	ldrh	r3, [r3, #32]
 800131e:	2201      	movs	r2, #1
 8001320:	4619      	mov	r1, r3
 8001322:	f005 f919 	bl	8006558 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800132e:	2201      	movs	r2, #1
 8001330:	4619      	mov	r1, r3
 8001332:	f005 f911 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 8001336:	e021      	b.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
      case 2:  // 10
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	8c1b      	ldrh	r3, [r3, #32]
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	f005 f908 	bl	8006558 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	f005 f900 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 8001358:	e010      	b.n	800137c <_ZN7Stepper9stepMotorEi+0xb8>
      case 3:  // 00
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8c1b      	ldrh	r3, [r3, #32]
 8001362:	2200      	movs	r2, #0
 8001364:	4619      	mov	r1, r3
 8001366:	f005 f8f7 	bl	8006558 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	f005 f8ef 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 800137a:	bf00      	nop
    }
  }
  if (this->pin_count == 4) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b04      	cmp	r3, #4
 8001382:	f040 8093 	bne.w	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
    switch (thisStep) {
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b03      	cmp	r3, #3
 800138a:	f200 808f 	bhi.w	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <_ZN7Stepper9stepMotorEi+0xd0>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013e7 	.word	0x080013e7
 800139c:	08001429 	.word	0x08001429
 80013a0:	0800146b 	.word	0x0800146b
      case 0:  // 1010
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8c1b      	ldrh	r3, [r3, #32]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f005 f8d2 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	f005 f8ca 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	f005 f8c2 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	f005 f8ba 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 80013e4:	e062      	b.n	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
      case 1:  // 0110
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8c1b      	ldrh	r3, [r3, #32]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	f005 f8b1 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	f005 f8a9 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	f005 f8a1 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	f005 f899 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 8001426:	e041      	b.n	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
      case 2:  //0101
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8c1b      	ldrh	r3, [r3, #32]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f005 f890 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f005 f888 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	f005 f880 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001460:	2201      	movs	r2, #1
 8001462:	4619      	mov	r1, r3
 8001464:	f005 f878 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 8001468:	e020      	b.n	80014ac <_ZN7Stepper9stepMotorEi+0x1e8>
      case 3:  //1001
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	8c1b      	ldrh	r3, [r3, #32]
 8001472:	2201      	movs	r2, #1
 8001474:	4619      	mov	r1, r3
 8001476:	f005 f86f 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	f005 f867 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f005 f85f 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	f005 f857 	bl	8006558 <HAL_GPIO_WritePin>
      break;
 80014aa:	bf00      	nop
    }
  }

  if (this->pin_count == 5) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	f040 81b5 	bne.w	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
    switch (thisStep) {
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	f200 81b1 	bhi.w	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <_ZN7Stepper9stepMotorEi+0x200>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	0800153f 	.word	0x0800153f
 80014cc:	08001591 	.word	0x08001591
 80014d0:	080015e3 	.word	0x080015e3
 80014d4:	08001635 	.word	0x08001635
 80014d8:	08001687 	.word	0x08001687
 80014dc:	080016d9 	.word	0x080016d9
 80014e0:	0800172b 	.word	0x0800172b
 80014e4:	0800177d 	.word	0x0800177d
 80014e8:	080017cf 	.word	0x080017cf
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	8c1b      	ldrh	r3, [r3, #32]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f005 f82e 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001504:	2201      	movs	r2, #1
 8001506:	4619      	mov	r1, r3
 8001508:	f005 f826 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001514:	2201      	movs	r2, #1
 8001516:	4619      	mov	r1, r3
 8001518:	f005 f81e 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	f005 f816 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f005 f80e 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 800153c:	e170      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	8c1b      	ldrh	r3, [r3, #32]
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	f005 f805 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001556:	2201      	movs	r2, #1
 8001558:	4619      	mov	r1, r3
 800155a:	f004 fffd 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	f004 fff5 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	f004 ffed 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	f004 ffe5 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 800158e:	e147      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	8c1b      	ldrh	r3, [r3, #32]
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	f004 ffdc 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80015a8:	2201      	movs	r2, #1
 80015aa:	4619      	mov	r1, r3
 80015ac:	f004 ffd4 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	f004 ffcc 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015c8:	2201      	movs	r2, #1
 80015ca:	4619      	mov	r1, r3
 80015cc:	f004 ffc4 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	2201      	movs	r2, #1
 80015da:	4619      	mov	r1, r3
 80015dc:	f004 ffbc 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 80015e0:	e11e      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8c1b      	ldrh	r3, [r3, #32]
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	f004 ffb3 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80015fa:	2201      	movs	r2, #1
 80015fc:	4619      	mov	r1, r3
 80015fe:	f004 ffab 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f004 ffa3 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800161a:	2201      	movs	r2, #1
 800161c:	4619      	mov	r1, r3
 800161e:	f004 ff9b 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	f004 ff93 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 8001632:	e0f5      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, HIGH);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	8c1b      	ldrh	r3, [r3, #32]
 800163c:	2201      	movs	r2, #1
 800163e:	4619      	mov	r1, r3
 8001640:	f004 ff8a 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_SET);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800164c:	2201      	movs	r2, #1
 800164e:	4619      	mov	r1, r3
 8001650:	f004 ff82 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f004 ff7a 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	f004 ff72 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	2200      	movs	r2, #0
 800167e:	4619      	mov	r1, r3
 8001680:	f004 ff6a 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 8001684:	e0cc      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, LOW);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8c1b      	ldrh	r3, [r3, #32]
 800168e:	2201      	movs	r2, #1
 8001690:	4619      	mov	r1, r3
 8001692:	f004 ff61 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	f004 ff59 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_RESET);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	f004 ff51 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016be:	2201      	movs	r2, #1
 80016c0:	4619      	mov	r1, r3
 80016c2:	f004 ff49 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	f004 ff41 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 80016d6:	e0a3      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, HIGH);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8c1b      	ldrh	r3, [r3, #32]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	f004 ff38 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016f0:	2200      	movs	r2, #0
 80016f2:	4619      	mov	r1, r3
 80016f4:	f004 ff30 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001700:	2201      	movs	r2, #1
 8001702:	4619      	mov	r1, r3
 8001704:	f004 ff28 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_SET);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001710:	2201      	movs	r2, #1
 8001712:	4619      	mov	r1, r3
 8001714:	f004 ff20 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2200      	movs	r2, #0
 8001722:	4619      	mov	r1, r3
 8001724:	f004 ff18 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 8001728:	e07a      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, LOW);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	8c1b      	ldrh	r3, [r3, #32]
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	f004 ff0f 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	f004 ff07 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001752:	2201      	movs	r2, #1
 8001754:	4619      	mov	r1, r3
 8001756:	f004 feff 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	f004 fef7 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_RESET);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	f004 feef 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 800177a:	e051      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, HIGH);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_SET);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	8c1b      	ldrh	r3, [r3, #32]
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	f004 fee6 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001794:	2200      	movs	r2, #0
 8001796:	4619      	mov	r1, r3
 8001798:	f004 fede 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	f004 fed6 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	f004 fece 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	2201      	movs	r2, #1
 80017c6:	4619      	mov	r1, r3
 80017c8:	f004 fec6 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 80017cc:	e028      	b.n	8001820 <_ZN7Stepper9stepMotorEi+0x55c>
//        digitalWrite(motor_pin_1, LOW);
//        digitalWrite(motor_pin_2, LOW);
//        digitalWrite(motor_pin_3, HIGH);
//        digitalWrite(motor_pin_4, LOW);
//        digitalWrite(motor_pin_5, HIGH);
    	  HAL_GPIO_WritePin(motor_pin_1_port, motor_pin_1, GPIO_PIN_RESET);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	8c1b      	ldrh	r3, [r3, #32]
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	f004 febd 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_2_port, motor_pin_2, GPIO_PIN_RESET);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	f004 feb5 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_3_port, motor_pin_3, GPIO_PIN_SET);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017f6:	2201      	movs	r2, #1
 80017f8:	4619      	mov	r1, r3
 80017fa:	f004 fead 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_4_port, motor_pin_4, GPIO_PIN_RESET);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	f004 fea5 	bl	8006558 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(motor_pin_5_port, motor_pin_5, GPIO_PIN_SET);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	f004 fe9d 	bl	8006558 <HAL_GPIO_WritePin>
        break;
 800181e:	bf00      	nop
    }
  }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZN7Stepper8honeAxisEv>:

void Stepper::honeAxis(void){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

	// set step tracker to max step to bypass over step protection in step()
	this->step_tracker = this->max_step;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]

	while(*(this->end_stop) != 0){
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <_ZN7Stepper8honeAxisEv+0x3a>
		// give time for the end stop value to be updated by the ADC via DMA
		//todo: optimize this to make this quicker (i.e., increase ADC sample frequency)
		HAL_Delay(1);
 8001850:	2001      	movs	r0, #1
 8001852:	f002 fe61 	bl	8004518 <HAL_Delay>



		step(-1);
 8001856:	f04f 31ff 	mov.w	r1, #4294967295
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fc9a 	bl	8001194 <_ZN7Stepper4stepEi>
	while(*(this->end_stop) != 0){
 8001860:	e7eb      	b.n	800183a <_ZN7Stepper8honeAxisEv+0x12>
	}

	step_tracker = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN7Stepper9setAbsPosEl>:

void Stepper::setAbsPos(int32_t step_cnt){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	this->steps_to_move = step_cnt - this->step_tracker;
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	61da      	str	r2, [r3, #28]
	step(this->steps_to_move);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4619      	mov	r1, r3
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fc81 	bl	8001194 <_ZN7Stepper4stepEi>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4013      	ands	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80018d2:	463b      	mov	r3, r7
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018e4:	4a3f      	ldr	r2, [pc, #252]	; (80019e4 <MX_ADC1_Init+0x118>)
 80018e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80018e8:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018ea:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80018ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <MX_ADC1_Init+0x114>)
 80018fe:	2201      	movs	r2, #1
 8001900:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001904:	2208      	movs	r2, #8
 8001906:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001908:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <MX_ADC1_Init+0x114>)
 800190a:	2200      	movs	r2, #0
 800190c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001910:	2201      	movs	r2, #1
 8001912:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001916:	2204      	movs	r2, #4
 8001918:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <MX_ADC1_Init+0x114>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001922:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <MX_ADC1_Init+0x114>)
 800192a:	2200      	movs	r2, #0
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800192e:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001946:	4826      	ldr	r0, [pc, #152]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001948:	f002 fff0 	bl	800492c <HAL_ADC_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001952:	f001 ff7d 	bl	8003850 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <MX_ADC1_Init+0x11c>)
 8001958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800195a:	2306      	movs	r3, #6
 800195c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800195e:	2303      	movs	r3, #3
 8001960:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001962:	237f      	movs	r3, #127	; 0x7f
 8001964:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001966:	2304      	movs	r3, #4
 8001968:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196e:	463b      	mov	r3, r7
 8001970:	4619      	mov	r1, r3
 8001972:	481b      	ldr	r0, [pc, #108]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001974:	f003 fb86 	bl	8005084 <HAL_ADC_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800197e:	f001 ff67 	bl	8003850 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_ADC1_Init+0x120>)
 8001984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001986:	230c      	movs	r3, #12
 8001988:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <MX_ADC1_Init+0x114>)
 8001990:	f003 fb78 	bl	8005084 <HAL_ADC_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800199a:	f001 ff59 	bl	8003850 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_ADC1_Init+0x124>)
 80019a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019a2:	2312      	movs	r3, #18
 80019a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_ADC1_Init+0x114>)
 80019ac:	f003 fb6a 	bl	8005084 <HAL_ADC_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80019b6:	f001 ff4b 	bl	8003850 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_ADC1_Init+0x128>)
 80019bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80019be:	2318      	movs	r3, #24
 80019c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <MX_ADC1_Init+0x114>)
 80019c8:	f003 fb5c 	bl	8005084 <HAL_ADC_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80019d2:	f001 ff3d 	bl	8003850 <Error_Handler>
  }

}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20004eb8 	.word	0x20004eb8
 80019e4:	50040000 	.word	0x50040000
 80019e8:	04300002 	.word	0x04300002
 80019ec:	08600004 	.word	0x08600004
 80019f0:	0c900008 	.word	0x0c900008
 80019f4:	1d500080 	.word	0x1d500080

080019f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2e      	ldr	r2, [pc, #184]	; (8001ad0 <HAL_ADC_MspInit+0xd8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d155      	bne.n	8001ac6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a1e:	f7ff ff3c 	bl	800189a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2004      	movs	r0, #4
 8001a24:	f7ff ff39 	bl	800189a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff ff36 	bl	800189a <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = MAG_BASE_Pin|MAG_LIGHT_Pin|MAIN_BOARD_TEMP_Pin;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a32:	2303      	movs	r3, #3
 8001a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4824      	ldr	r0, [pc, #144]	; (8001ad4 <HAL_ADC_MspInit+0xdc>)
 8001a42:	f004 fc19 	bl	8006278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_TEMP_Pin;
 8001a46:	2304      	movs	r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5c:	f004 fc0c 	bl	8006278 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_ADC_MspInit+0xe4>)
 8001a64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a68:	2205      	movs	r2, #5
 8001a6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a9a:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001a9c:	f004 f978 	bl	8005d90 <HAL_DMA_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8001aa6:	f001 fed3 	bl	8003850 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001aae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ab0:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <HAL_ADC_MspInit+0xe0>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	2012      	movs	r0, #18
 8001abc:	f004 f911 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ac0:	2012      	movs	r0, #18
 8001ac2:	f004 f928 	bl	8005d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	50040000 	.word	0x50040000
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	20004f1c 	.word	0x20004f1c
 8001adc:	40020008 	.word	0x40020008

08001ae0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <LL_C2_PWR_SetPowerMode+0x28>)
 8001aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4905      	ldr	r1, [pc, #20]	; (8001b08 <LL_C2_PWR_SetPowerMode+0x28>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58000400 	.word	0x58000400

08001b0c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001b38:	f000 f80a 	bl	8001b50 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <APPE_Init+0x18>)
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f001 f804 	bl	8002b4c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001b44:	f000 f812 	bl	8001b6c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001b48:	bf00      	nop
}
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20004fd8 	.word	0x20004fd8

08001b50 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001b54:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b58:	f7ff ffd8 	bl	8001b0c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001b5c:	f013 ffa6 	bl	8015aac <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001b60:	2004      	movs	r0, #4
 8001b62:	f7ff ffbd 	bl	8001ae0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001b66:	bf00      	nop
}
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001b72:	f00c fc93 	bl	800e49c <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001b76:	2000      	movs	r0, #0
 8001b78:	f00e fb3c 	bl	80101f4 <osMutexNew>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <appe_Tl_Init+0x70>)
 8001b80:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2001      	movs	r0, #1
 8001b88:	f00e fc7c 	bl	8010484 <osSemaphoreNew>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <appe_Tl_Init+0x74>)
 8001b90:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <appe_Tl_Init+0x78>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	4814      	ldr	r0, [pc, #80]	; (8001be8 <appe_Tl_Init+0x7c>)
 8001b98:	f00e f962 	bl	800fe60 <osThreadNew>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <appe_Tl_Init+0x80>)
 8001ba0:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <appe_Tl_Init+0x84>)
 8001ba4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <appe_Tl_Init+0x88>)
 8001ba8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <appe_Tl_Init+0x8c>)
 8001bb0:	f00c fb3a 	bl	800e228 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <appe_Tl_Init+0x90>)
 8001bba:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <appe_Tl_Init+0x94>)
 8001bbe:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001bc0:	f240 533c 	movw	r3, #1340	; 0x53c
 8001bc4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00c fdd0 	bl	800e770 <TL_MM_Init>

  TL_Enable();
 8001bd0:	f00c fc5e 	bl	800e490 <TL_Enable>

  return;
 8001bd4:	bf00      	nop
}
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20004f7c 	.word	0x20004f7c
 8001be0:	20004f84 	.word	0x20004f84
 8001be4:	08017034 	.word	0x08017034
 8001be8:	08001ced 	.word	0x08001ced
 8001bec:	20004f80 	.word	0x20004f80
 8001bf0:	2003061c 	.word	0x2003061c
 8001bf4:	08001c05 	.word	0x08001c05
 8001bf8:	08001c45 	.word	0x08001c45
 8001bfc:	20030728 	.word	0x20030728
 8001c00:	200300e0 	.word	0x200300e0

08001c04 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <APPE_SysStatusNot+0x16>
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d008      	beq.n	8001c2a <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8001c18:	e00d      	b.n	8001c36 <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <APPE_SysStatusNot+0x3c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00e fb80 	bl	8010328 <osMutexAcquire>
      break;
 8001c28:	e005      	b.n	8001c36 <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <APPE_SysStatusNot+0x3c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00e fbd8 	bl	80103e4 <osMutexRelease>
      break;
 8001c34:	bf00      	nop
  }
  return;
 8001c36:	bf00      	nop
}
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20004f7c 	.word	0x20004f7c

08001c44 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	330b      	adds	r3, #11
 8001c52:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8001c5e:	d004      	beq.n	8001c6a <APPE_SysUserEvtRx+0x26>
 8001c60:	f249 2201 	movw	r2, #37377	; 0x9201
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8001c68:	e008      	b.n	8001c7c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8001c6a:	f000 f833 	bl	8001cd4 <APPE_SysEvtReadyProcessing>
         break;
 8001c6e:	e005      	b.n	8001c7c <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f805 	bl	8001c84 <APPE_SysEvtError>
         break;
 8001c7a:	bf00      	nop
  }
  return;
 8001c7c:	bf00      	nop
}
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b7d      	cmp	r3, #125	; 0x7d
 8001c92:	d002      	beq.n	8001c9a <APPE_SysEvtError+0x16>
 8001c94:	2b7e      	cmp	r3, #126	; 0x7e
 8001c96:	d006      	beq.n	8001ca6 <APPE_SysEvtError+0x22>
 8001c98:	e00b      	b.n	8001cb2 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_THREAD : LLD_FATAL_ERROR \n");
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <APPE_SysEvtError+0x44>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f002 f9f2 	bl	8004088 <logApplication>
       break;
 8001ca4:	e00c      	b.n	8001cc0 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_THREAD : UNKNOWN_CMD \n");
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <APPE_SysEvtError+0x48>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2000      	movs	r0, #0
 8001cac:	f002 f9ec 	bl	8004088 <logApplication>
       break;
 8001cb0:	e006      	b.n	8001cc0 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_THREAD : ErroCode=%d \n",ErrorCode);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <APPE_SysEvtError+0x4c>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f002 f9e5 	bl	8004088 <logApplication>
       break;
 8001cbe:	bf00      	nop
  }
  return;
 8001cc0:	bf00      	nop
}
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08016c88 	.word	0x08016c88
 8001ccc:	08016cac 	.word	0x08016cac
 8001cd0:	08016ccc 	.word	0x08016ccc

08001cd4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8001cd8:	f00c fdbe 	bl	800e858 <TL_TRACES_Init>

  APP_THREAD_Init();
 8001cdc:	f012 f9be 	bl	801405c <APP_THREAD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f013 fef4 	bl	8015ad0 <UTIL_LPM_SetOffMode>
  return;
 8001ce8:	bf00      	nop
}
 8001cea:	bd80      	pop	{r7, pc}

08001cec <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f00e f9b8 	bl	8010070 <osThreadFlagsWait>
     shci_user_evt_proc();
 8001d00:	f00c faae 	bl	800e260 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001d04:	e7f6      	b.n	8001cf4 <ShciUserEvtProcess+0x8>
	...

08001d08 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet(ShciUserEvtProcessId,1);
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <shci_notify_asynch_evt+0x1c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00e f948 	bl	800ffac <osThreadFlagsSet>
  return;
 8001d1c:	bf00      	nop
}
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20004f80 	.word	0x20004f80

08001d28 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <shci_cmd_resp_release+0x1c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00e fca9 	bl	801068c <osSemaphoreRelease>
  return;
 8001d3a:	bf00      	nop
}
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20004f84 	.word	0x20004f84

08001d48 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <shci_cmd_resp_wait+0x20>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f00e fc31 	bl	80105c0 <osSemaphoreAcquire>
  return;
 8001d5e:	bf00      	nop
}
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20004f84 	.word	0x20004f84

08001d6c <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f00c fd37 	bl	800e7e8 <TL_MM_EvtDone>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <_Z16MX_FREERTOS_Initv+0x3c>)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <_Z16MX_FREERTOS_Initv+0x40>)
 8001d8e:	f00e f867 	bl	800fe60 <osThreadNew>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <_Z16MX_FREERTOS_Initv+0x44>)
 8001d96:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
#ifndef SOLAR_SENSOR_NODE
  msgTaskHandle = osThreadNew(MsgTask, NULL, &msgTask_attributes);
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <_Z16MX_FREERTOS_Initv+0x48>)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <_Z16MX_FREERTOS_Initv+0x4c>)
 8001d9e:	f00e f85f 	bl	800fe60 <osThreadNew>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <_Z16MX_FREERTOS_Initv+0x50>)
 8001da6:	601a      	str	r2, [r3, #0]

  msgQueueHandle = osMessageQueueNew (10, sizeof(struct MeasMsg), &msgQueue_attributes);
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <_Z16MX_FREERTOS_Initv+0x54>)
 8001daa:	2114      	movs	r1, #20
 8001dac:	200a      	movs	r0, #10
 8001dae:	f00e fcc5 	bl	801073c <osMessageQueueNew>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <_Z16MX_FREERTOS_Initv+0x58>)
 8001db6:	601a      	str	r2, [r3, #0]
#endif

  APPE_Init();
 8001db8:	f7ff febc 	bl	8001b34 <APPE_Init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	08017058 	.word	0x08017058
 8001dc4:	08001de1 	.word	0x08001de1
 8001dc8:	20000324 	.word	0x20000324
 8001dcc:	0801707c 	.word	0x0801707c
 8001dd0:	08003dc5 	.word	0x08003dc5
 8001dd4:	20000328 	.word	0x20000328
 8001dd8:	080170a0 	.word	0x080170a0
 8001ddc:	2000032c 	.word	0x2000032c

08001de0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	osDelay(100);
 8001de8:	2064      	movs	r0, #100	; 0x64
 8001dea:	f00e f9d5 	bl	8010198 <osDelay>
	myMain();
 8001dee:	f001 fe3b 	bl	8003a68 <_Z6myMainv>
  for(;;)
  {
	  osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8001df2:	f04f 32ff 	mov.w	r2, #4294967295
 8001df6:	2101      	movs	r1, #1
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f00e f939 	bl	8010070 <osThreadFlagsWait>
 8001dfe:	e7f8      	b.n	8001df2 <_Z16StartDefaultTaskPv+0x12>

08001e00 <startCal>:

struct SensorSamples sensorPacket;

void startCal(float angle_base_min, float angle_base_max,
		float angle_led_min, float angle_led_max,
				Stepper& motor_base, Stepper& motor_led){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e0a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e0e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e12:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]

	// configure calMsg packet
	calMsg.UID = SPOTLIGHT_UID;
 8001e1a:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <startCal+0x1d8>)
 8001e1c:	2218      	movs	r2, #24
 8001e1e:	701a      	strb	r2, [r3, #0]
	calMsg.cal_code = CALIBRATION_START_COMMAND;
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <startCal+0x1d8>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	705a      	strb	r2, [r3, #1]

	/* (1) hone axis */
	motor_base.honeAxis();
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fcfe 	bl	8001828 <_ZN7Stepper8honeAxisEv>
	motor_led.honeAxis();
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7ff fcfb 	bl	8001828 <_ZN7Stepper8honeAxisEv>

	/* (2) multicast that calibration will begin */

	// clear current calibration table
	memset(calibration_table,0,sizeof(calibration_table));
 8001e32:	2250      	movs	r2, #80	; 0x50
 8001e34:	2100      	movs	r1, #0
 8001e36:	4869      	ldr	r0, [pc, #420]	; (8001fdc <startCal+0x1dc>)
 8001e38:	f014 ff05 	bl	8016c46 <memset>

	broadcastCalStart(&calMsg); //TODO: implement
 8001e3c:	4866      	ldr	r0, [pc, #408]	; (8001fd8 <startCal+0x1d8>)
 8001e3e:	f000 f93d 	bl	80020bc <broadcastCalStart>
	/* (3) wait for nodes to ACK and populate a table with the UIDs */

	// note: nodes will be replying to a Coap server (code exists in app_thread.c for populating of table)

	// wait for nodes to reply with their IDs
	osDelay(CAL_INIT_CAL_TIMEOUT);
 8001e42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e46:	f00e f9a7 	bl	8010198 <osDelay>
	/* (4) Run through each position, sending an msg to each node indicating the angle is set
	 * and waiting for said nodes to respond with their solar power measurements. If node does
	 * not reply within CAL_POS_TIMEOUT, re-send msg and wait one more cycle before continuing.
	 */
		// calculate step bounds for each axis
		int32_t min_led_axis_step = (((angle_led_min) * LED_STEP_RANGE));
 8001e4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001fe0 <startCal+0x1e0>
 8001e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5a:	ee17 3a90 	vmov	r3, s15
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
		int32_t max_led_axis_step = (((angle_led_max) * LED_STEP_RANGE));
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001fe0 <startCal+0x1e0>
 8001e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e70:	ee17 3a90 	vmov	r3, s15
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
		int32_t min_base_axis_step = (((angle_base_min) * BASE_STEP_RANGE));
 8001e76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001fe4 <startCal+0x1e4>
 8001e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e86:	ee17 3a90 	vmov	r3, s15
 8001e8a:	623b      	str	r3, [r7, #32]
		int32_t max_base_axis_step = (((angle_base_max) * BASE_STEP_RANGE));
 8001e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e90:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001fe4 <startCal+0x1e4>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9c:	ee17 3a90 	vmov	r3, s15
 8001ea0:	61fb      	str	r3, [r7, #28]

		if( (max_base_axis_step == 0) && (min_base_axis_step == 0)){
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <startCal+0xb4>
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <startCal+0xb4>
			perpetual_record = 1;
 8001eae:	4b4e      	ldr	r3, [pc, #312]	; (8001fe8 <startCal+0x1e8>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
		}

		if(perpetual_record == 1){
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <startCal+0x1e8>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10c      	bne.n	8001ed6 <startCal+0xd6>
			while(true){
				getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001ebc:	4b4b      	ldr	r3, [pc, #300]	; (8001fec <startCal+0x1ec>)
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <startCal+0x1f0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4844      	ldr	r0, [pc, #272]	; (8001fd8 <startCal+0x1d8>)
 8001ec8:	f000 f93c 	bl	8002144 <getMeasurementsFromNodes>
				osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ed0:	f00e f962 	bl	8010198 <osDelay>
				getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001ed4:	e7f2      	b.n	8001ebc <startCal+0xbc>
			}
		}
		else{
			// move to desired angle
			uint8_t flip_dir = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8001edc:	4a43      	ldr	r2, [pc, #268]	; (8001fec <startCal+0x1ec>)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b42      	ldr	r3, [pc, #264]	; (8001fec <startCal+0x1ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	db6e      	blt.n	8001fca <startCal+0x1ca>
				motor_base.setAbsPos(base_step);
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <startCal+0x1ec>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fcbc 	bl	8001870 <_ZN7Stepper9setAbsPosEl>

				if(flip_dir == 0){
 8001ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d12f      	bne.n	8001f60 <startCal+0x160>
					for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001f00:	4a3b      	ldr	r2, [pc, #236]	; (8001ff0 <startCal+0x1f0>)
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <startCal+0x1f0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	db23      	blt.n	8001f58 <startCal+0x158>
						motor_led.setAbsPos(led_step);
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <startCal+0x1f0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	f7ff fcaa 	bl	8001870 <_ZN7Stepper9setAbsPosEl>
						getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001f1c:	4b33      	ldr	r3, [pc, #204]	; (8001fec <startCal+0x1ec>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <startCal+0x1f0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	482c      	ldr	r0, [pc, #176]	; (8001fd8 <startCal+0x1d8>)
 8001f28:	f000 f90c 	bl	8002144 <getMeasurementsFromNodes>
						sampleSensors(&sensorPacket);
 8001f2c:	4831      	ldr	r0, [pc, #196]	; (8001ff4 <startCal+0x1f4>)
 8001f2e:	f000 f863 	bl	8001ff8 <sampleSensors>
						sendSensorMeas_USB(&sensorPacket);
 8001f32:	4830      	ldr	r0, [pc, #192]	; (8001ff4 <startCal+0x1f4>)
 8001f34:	f001 ff8c 	bl	8003e50 <sendSensorMeas_USB>
						// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
	#ifndef DEBUG_SERIAL
						osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8001f38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f00e f896 	bl	8010070 <osThreadFlagsWait>
	#else
						osDelay(100);
	#endif
						osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f48:	f00e f926 	bl	8010198 <osDelay>
					for(led_step = min_led_axis_step; led_step <= max_led_axis_step; led_step += (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <startCal+0x1f0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3324      	adds	r3, #36	; 0x24
 8001f52:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <startCal+0x1f0>)
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e7d6      	b.n	8001f06 <startCal+0x106>
					}
					flip_dir = 1;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f5e:	e02e      	b.n	8001fbe <startCal+0x1be>
				}
				else{
					for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <startCal+0x1f0>)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <startCal+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dc23      	bgt.n	8001fb8 <startCal+0x1b8>
						motor_led.setAbsPos(led_step);
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <startCal+0x1f0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	6838      	ldr	r0, [r7, #0]
 8001f78:	f7ff fc7a 	bl	8001870 <_ZN7Stepper9setAbsPosEl>
						getMeasurementsFromNodes(&calMsg, base_step, led_step);
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <startCal+0x1ec>)
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <startCal+0x1f0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4814      	ldr	r0, [pc, #80]	; (8001fd8 <startCal+0x1d8>)
 8001f88:	f000 f8dc 	bl	8002144 <getMeasurementsFromNodes>
						sampleSensors(&sensorPacket);
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <startCal+0x1f4>)
 8001f8e:	f000 f833 	bl	8001ff8 <sampleSensors>
						sendSensorMeas_USB(&sensorPacket);
 8001f92:	4818      	ldr	r0, [pc, #96]	; (8001ff4 <startCal+0x1f4>)
 8001f94:	f001 ff5c 	bl	8003e50 <sendSensorMeas_USB>
						// wait CAL_POS_TIMEOUT milliseconds for nodes to reply with power values
	#ifndef DEBUG_SERIAL
						osThreadFlagsWait (CAL_THREAD_FLAG, osFlagsWaitAny, CAL_POS_TIMEOUT);
 8001f98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	f00e f866 	bl	8010070 <osThreadFlagsWait>
	#else
						osDelay(100);
	#endif
						osDelay(SPOTLIGHT_INTERVAL_DELAY);
 8001fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa8:	f00e f8f6 	bl	8010198 <osDelay>
					for(led_step = max_led_axis_step; led_step >= min_led_axis_step; led_step -= (LED_CAL_STEP_MULTI * LED_MIN_ANGLE_STEP)){
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <startCal+0x1f0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3b24      	subs	r3, #36	; 0x24
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <startCal+0x1f0>)
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e7d6      	b.n	8001f66 <startCal+0x166>
					}
					flip_dir = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for(base_step = min_base_axis_step; base_step <= max_base_axis_step; base_step += (BASE_CAL_STEP_MULTI * BASE_MIN_ANGLE_STEP)){
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <startCal+0x1ec>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	331e      	adds	r3, #30
 8001fc4:	4a09      	ldr	r2, [pc, #36]	; (8001fec <startCal+0x1ec>)
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	e78b      	b.n	8001ee2 <startCal+0xe2>
			}

		}

//	/* (5) send calibration complete message to all nodes */
		broadcastCalComplete(&calMsg);
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <startCal+0x1d8>)
 8001fcc:	f000 f898 	bl	8002100 <broadcastCalComplete>

}
 8001fd0:	bf00      	nop
 8001fd2:	3730      	adds	r7, #48	; 0x30
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000380 	.word	0x20000380
 8001fdc:	20000330 	.word	0x20000330
 8001fe0:	46f24600 	.word	0x46f24600
 8001fe4:	45c06000 	.word	0x45c06000
 8001fe8:	20000394 	.word	0x20000394
 8001fec:	20000390 	.word	0x20000390
 8001ff0:	2000038c 	.word	0x2000038c
 8001ff4:	20000398 	.word	0x20000398

08001ff8 <sampleSensors>:
#endif


void sampleSensors(struct SensorSamples* packet){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	packet->temp = calipile_getTPOBJ();
 8002000:	f7fe fe6c 	bl	8000cdc <calipile_getTPOBJ>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	601a      	str	r2, [r3, #0]
	packet->temp_amb = calipile_getTPAMB();
 800200c:	f7fe fe4a 	bl	8000ca4 <calipile_getTPAMB>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	605a      	str	r2, [r3, #4]

	packet->conv_temp_amb = calipile_getTamb(packet->temp_amb);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe96 	bl	8000d50 <calipile_getTamb>
 8002024:	eef0 7a40 	vmov.f32	s15, s0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	edc3 7a03 	vstr	s15, [r3, #12]
	packet->conv_temp = calipile_getTobj(packet->temp, packet->conv_temp_amb );
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	edd3 7a03 	vldr	s15, [r3, #12]
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	4610      	mov	r0, r2
 800203e:	f7fe febb 	bl	8000db8 <calipile_getTobj>
 8002042:	eef0 7a40 	vmov.f32	s15, s0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	edc3 7a02 	vstr	s15, [r3, #8]
	packet->tp_presence = calipile_getTPPRESENCE();
 800204c:	f7fe fe66 	bl	8000d1c <calipile_getTPPRESENCE>
 8002050:	4603      	mov	r3, r0
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	821a      	strh	r2, [r3, #16]
	packet->tp_motion = calipile_getTPMOTION();
 8002058:	f7fe fe6d 	bl	8000d36 <calipile_getTPMOTION>
 800205c:	4603      	mov	r3, r0
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	825a      	strh	r2, [r3, #18]

	light_getRawData(&packet->r, &packet->g, &packet->b, &packet->c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 0014 	add.w	r0, r3, #20
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f103 0116 	add.w	r1, r3, #22
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0218 	add.w	r2, r3, #24
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	331a      	adds	r3, #26
 800207a:	f001 f995 	bl	80033a8 <light_getRawData>
	// colorTemp = tcs.calculateColorTemperature(r, g, b);
	packet->colorTemp = light_calculateColorTemperature_dn40(packet->r, packet->g, packet->b, packet->c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8a98      	ldrh	r0, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8ad9      	ldrh	r1, [r3, #22]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8b1a      	ldrh	r2, [r3, #24]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8b5b      	ldrh	r3, [r3, #26]
 800208e:	f001 f9df 	bl	8003450 <light_calculateColorTemperature_dn40>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	839a      	strh	r2, [r3, #28]
	packet->lux = light_calculateLux(packet->r, packet->g, packet->b);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8a98      	ldrh	r0, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8ad9      	ldrh	r1, [r3, #22]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8b1b      	ldrh	r3, [r3, #24]
 80020a6:	461a      	mov	r2, r3
 80020a8:	f001 fa40 	bl	800352c <light_calculateLux>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	83da      	strh	r2, [r3, #30]
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <broadcastCalStart>:

void broadcastCalStart(CalMsg* msg){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af04      	add	r7, sp, #16
 80020c2:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 80020d6:	2301      	movs	r3, #1
 80020d8:	9302      	str	r3, [sp, #8]
 80020da:	2303      	movs	r3, #3
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2301      	movs	r3, #1
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <broadcastCalStart+0x3c>)
 80020e4:	4a05      	ldr	r2, [pc, #20]	; (80020fc <broadcastCalStart+0x40>)
 80020e6:	210c      	movs	r1, #12
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f012 fa8f 	bl	801460c <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 80020ee:	bf00      	nop
}
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	080171b4 	.word	0x080171b4
 80020fc:	20005138 	.word	0x20005138

08002100 <broadcastCalComplete>:

void broadcastCalComplete(CalMsg* msg){
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af04      	add	r7, sp, #16
 8002106:	6078      	str	r0, [r7, #4]

	msg->cal_fcn = CALIBRATION_START_COMMAND;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = 0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
	msg->angle_2 = 0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]

	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 800211a:	2301      	movs	r3, #1
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	2303      	movs	r3, #3
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	2301      	movs	r3, #1
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <broadcastCalComplete+0x3c>)
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <broadcastCalComplete+0x40>)
 800212a:	210c      	movs	r1, #12
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f012 fa6d 	bl	801460c <APP_THREAD_SendCoapMsg>
			&multicastAddr, nodeCalResource,
			REQUEST_ACK, OT_COAP_CODE_PUT, 1U);

	return;
 8002132:	bf00      	nop
}
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	080171b4 	.word	0x080171b4
 8002140:	20005138 	.word	0x20005138

08002144 <getMeasurementsFromNodes>:

void getMeasurementsFromNodes(CalMsg* msg, int32_t angle_1, int32_t angle_2){
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af04      	add	r7, sp, #16
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]

	msg->cal_fcn = CALIBRATION_GET_MEAS;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2202      	movs	r2, #2
 8002154:	709a      	strb	r2, [r3, #2]
	msg->angle_1 = angle_1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	605a      	str	r2, [r3, #4]
	msg->angle_2 = angle_2;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]

#ifndef DEBUG_SERIAL
	APP_THREAD_SendCoapMsg(msg, sizeof(CalMsg),
 8002162:	2301      	movs	r3, #1
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	2301      	movs	r3, #1
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	2301      	movs	r3, #1
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <getMeasurementsFromNodes+0x40>)
 8002170:	4a05      	ldr	r2, [pc, #20]	; (8002188 <getMeasurementsFromNodes+0x44>)
 8002172:	210c      	movs	r1, #12
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f012 fa49 	bl	801460c <APP_THREAD_SendCoapMsg>
#else
	// TODO REMOVE!!!
	measMsgReceivedFromNode(&measMsg);
#endif

	return;
 800217a:	bf00      	nop
}
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	080171b4 	.word	0x080171b4
 8002188:	20005138 	.word	0x20005138

0800218c <LL_AHB1_GRP1_EnableClock>:
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800219a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b0:	68fb      	ldr	r3, [r7, #12]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021c2:	2004      	movs	r0, #4
 80021c4:	f7ff ffe2 	bl	800218c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7ff ffdf 	bl	800218c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2105      	movs	r1, #5
 80021d2:	200b      	movs	r0, #11
 80021d4:	f003 fd85 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021d8:	200b      	movs	r0, #11
 80021da:	f003 fd9c 	bl	8005d16 <HAL_NVIC_EnableIRQ>

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_AHB2_GRP1_EnableClock>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4313      	orrs	r3, r2
 800220c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223c:	2004      	movs	r0, #4
 800223e:	f7ff ffda 	bl	80021f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	2002      	movs	r0, #2
 8002244:	f7ff ffd7 	bl	80021f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff ffd4 	bl	80021f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800224e:	2010      	movs	r0, #16
 8002250:	f7ff ffd1 	bl	80021f6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8002254:	2200      	movs	r2, #0
 8002256:	f240 3193 	movw	r1, #915	; 0x393
 800225a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225e:	f004 f97b 	bl	8006558 <HAL_GPIO_WritePin>
                          |AIN1_1_Pin|BIN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN1_2_Pin|BIN2_2_Pin|BIN2_1_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 8002268:	4823      	ldr	r0, [pc, #140]	; (80022f8 <MX_GPIO_Init+0xd0>)
 800226a:	f004 f975 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	2103      	movs	r1, #3
 8002272:	4821      	ldr	r0, [pc, #132]	; (80022f8 <MX_GPIO_Init+0xd0>)
 8002274:	f004 f970 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8002278:	2201      	movs	r2, #1
 800227a:	2110      	movs	r1, #16
 800227c:	481f      	ldr	r0, [pc, #124]	; (80022fc <MX_GPIO_Init+0xd4>)
 800227e:	f004 f96b 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = AIN2_2_Pin|AIN1_2_Pin|LED_EN_Pin|AIN2_1_Pin
 8002282:	f240 3393 	movw	r3, #915	; 0x393
 8002286:	607b      	str	r3, [r7, #4]
                          |AIN1_1_Pin|BIN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229c:	f003 ffec 	bl	8006278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_LED_DISC_Pin;
 80022a0:	2308      	movs	r3, #8
 80022a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT_LED_DISC_GPIO_Port, &GPIO_InitStruct);
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b4:	f003 ffe0 	bl	8006278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BIN1_2_Pin|BIN2_2_Pin|BLUE_LED_Pin|GREEN_LED_Pin
 80022b8:	f644 4303 	movw	r3, #19459	; 0x4c03
 80022bc:	607b      	str	r3, [r7, #4]
                          |BIN2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	480a      	ldr	r0, [pc, #40]	; (80022f8 <MX_GPIO_Init+0xd0>)
 80022d0:	f003 ffd2 	bl	8006278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80022d4:	2310      	movs	r3, #16
 80022d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_GPIO_Init+0xd4>)
 80022ea:	f003 ffc5 	bl	8006278 <HAL_GPIO_Init>

}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	48000400 	.word	0x48000400
 80022fc:	48001000 	.word	0x48001000

08002300 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <LL_EXTI_EnableIT_0_31+0x24>)
 800230a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800230e:	4905      	ldr	r1, [pc, #20]	; (8002324 <LL_EXTI_EnableIT_0_31+0x24>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	58000800 	.word	0x58000800

08002328 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]

}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	58000800 	.word	0x58000800

0800234c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <ReadRtcSsrValue+0x3c>)
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	b29b      	uxth	r3, r3
 8002358:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <ReadRtcSsrValue+0x3c>)
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	b29b      	uxth	r3, r3
 8002360:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002362:	e005      	b.n	8002370 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <ReadRtcSsrValue+0x3c>)
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	b29b      	uxth	r3, r3
 800236e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d1f5      	bne.n	8002364 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002378:	683b      	ldr	r3, [r7, #0]
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40002800 	.word	0x40002800

0800238c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	460a      	mov	r2, r1
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	4613      	mov	r3, r2
 800239a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800239c:	79ba      	ldrb	r2, [r7, #6]
 800239e:	491d      	ldr	r1, [pc, #116]	; (8002414 <LinkTimerAfter+0x88>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3315      	adds	r3, #21
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d009      	beq.n	80023ca <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <LinkTimerAfter+0x88>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	3314      	adds	r3, #20
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80023ca:	79fa      	ldrb	r2, [r7, #7]
 80023cc:	4911      	ldr	r1, [pc, #68]	; (8002414 <LinkTimerAfter+0x88>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	3315      	adds	r3, #21
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80023de:	79fa      	ldrb	r2, [r7, #7]
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <LinkTimerAfter+0x88>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3314      	adds	r3, #20
 80023ee:	79ba      	ldrb	r2, [r7, #6]
 80023f0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80023f2:	79ba      	ldrb	r2, [r7, #6]
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <LinkTimerAfter+0x88>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3315      	adds	r3, #21
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	701a      	strb	r2, [r3, #0]

  return;
 8002406:	bf00      	nop
}
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	2000024c 	.word	0x2000024c

08002418 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	460a      	mov	r2, r1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	4613      	mov	r3, r2
 8002426:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <LinkTimerBefore+0xb8>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	79ba      	ldrb	r2, [r7, #6]
 8002430:	429a      	cmp	r2, r3
 8002432:	d032      	beq.n	800249a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002434:	79ba      	ldrb	r2, [r7, #6]
 8002436:	4927      	ldr	r1, [pc, #156]	; (80024d4 <LinkTimerBefore+0xbc>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3314      	adds	r3, #20
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <LinkTimerBefore+0xbc>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3315      	adds	r3, #21
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	491d      	ldr	r1, [pc, #116]	; (80024d4 <LinkTimerBefore+0xbc>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3315      	adds	r3, #21
 800246c:	79ba      	ldrb	r2, [r7, #6]
 800246e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002470:	79fa      	ldrb	r2, [r7, #7]
 8002472:	4918      	ldr	r1, [pc, #96]	; (80024d4 <LinkTimerBefore+0xbc>)
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	3314      	adds	r3, #20
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002484:	79ba      	ldrb	r2, [r7, #6]
 8002486:	4913      	ldr	r1, [pc, #76]	; (80024d4 <LinkTimerBefore+0xbc>)
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	3314      	adds	r3, #20
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002498:	e014      	b.n	80024c4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800249a:	79fa      	ldrb	r2, [r7, #7]
 800249c:	490d      	ldr	r1, [pc, #52]	; (80024d4 <LinkTimerBefore+0xbc>)
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	3315      	adds	r3, #21
 80024aa:	79ba      	ldrb	r2, [r7, #6]
 80024ac:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80024ae:	79ba      	ldrb	r2, [r7, #6]
 80024b0:	4908      	ldr	r1, [pc, #32]	; (80024d4 <LinkTimerBefore+0xbc>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	3314      	adds	r3, #20
 80024be:	79fa      	ldrb	r2, [r7, #7]
 80024c0:	701a      	strb	r2, [r3, #0]
  return;
 80024c2:	bf00      	nop
}
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	200002dc 	.word	0x200002dc
 80024d4:	2000024c 	.word	0x2000024c

080024d8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80024e2:	4b4e      	ldr	r3, [pc, #312]	; (800261c <linkTimer+0x144>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b06      	cmp	r3, #6
 80024ea:	d118      	bne.n	800251e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <linkTimer+0x144>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <linkTimer+0x148>)
 80024f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80024f6:	4a49      	ldr	r2, [pc, #292]	; (800261c <linkTimer+0x144>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80024fc:	79fa      	ldrb	r2, [r7, #7]
 80024fe:	4949      	ldr	r1, [pc, #292]	; (8002624 <linkTimer+0x14c>)
 8002500:	4613      	mov	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	3315      	adds	r3, #21
 800250c:	2206      	movs	r2, #6
 800250e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002510:	4b45      	ldr	r3, [pc, #276]	; (8002628 <linkTimer+0x150>)
 8002512:	f04f 32ff 	mov.w	r2, #4294967295
 8002516:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	81fb      	strh	r3, [r7, #14]
 800251c:	e078      	b.n	8002610 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800251e:	f000 f909 	bl	8002734 <ReturnTimeElapsed>
 8002522:	4603      	mov	r3, r0
 8002524:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	493e      	ldr	r1, [pc, #248]	; (8002624 <linkTimer+0x14c>)
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3308      	adds	r3, #8
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	4419      	add	r1, r3
 800253e:	4839      	ldr	r0, [pc, #228]	; (8002624 <linkTimer+0x14c>)
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4403      	add	r3, r0
 800254a:	3308      	adds	r3, #8
 800254c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800254e:	79fa      	ldrb	r2, [r7, #7]
 8002550:	4934      	ldr	r1, [pc, #208]	; (8002624 <linkTimer+0x14c>)
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	3308      	adds	r3, #8
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <linkTimer+0x144>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <linkTimer+0x14c>)
 800256c:	460b      	mov	r3, r1
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	440b      	add	r3, r1
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	3308      	adds	r3, #8
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	d337      	bcc.n	80025f0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <linkTimer+0x144>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002586:	7b7a      	ldrb	r2, [r7, #13]
 8002588:	4926      	ldr	r1, [pc, #152]	; (8002624 <linkTimer+0x14c>)
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	3315      	adds	r3, #21
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800259a:	e013      	b.n	80025c4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800259c:	7b7a      	ldrb	r2, [r7, #13]
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <linkTimer+0x14c>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	3315      	adds	r3, #21
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80025b0:	7b7a      	ldrb	r2, [r7, #13]
 80025b2:	491c      	ldr	r1, [pc, #112]	; (8002624 <linkTimer+0x14c>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	3315      	adds	r3, #21
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80025c4:	7b3b      	ldrb	r3, [r7, #12]
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d00b      	beq.n	80025e2 <linkTimer+0x10a>
 80025ca:	7b3a      	ldrb	r2, [r7, #12]
 80025cc:	4915      	ldr	r1, [pc, #84]	; (8002624 <linkTimer+0x14c>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3308      	adds	r3, #8
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d2dc      	bcs.n	800259c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80025e2:	7b7a      	ldrb	r2, [r7, #13]
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fecf 	bl	800238c <LinkTimerAfter>
 80025ee:	e00f      	b.n	8002610 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <linkTimer+0x144>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff0c 	bl	8002418 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <linkTimer+0x144>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <linkTimer+0x148>)
 8002608:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <linkTimer+0x144>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002610:	89fb      	ldrh	r3, [r7, #14]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200002dc 	.word	0x200002dc
 8002620:	200002dd 	.word	0x200002dd
 8002624:	2000024c 	.word	0x2000024c
 8002628:	200002e0 	.word	0x200002e0

0800262c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	460a      	mov	r2, r1
 8002636:	71fb      	strb	r3, [r7, #7]
 8002638:	4613      	mov	r3, r2
 800263a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <UnlinkTimer+0xf8>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	79fa      	ldrb	r2, [r7, #7]
 8002644:	429a      	cmp	r2, r3
 8002646:	d111      	bne.n	800266c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <UnlinkTimer+0xf8>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <UnlinkTimer+0xfc>)
 8002650:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002652:	79fa      	ldrb	r2, [r7, #7]
 8002654:	4935      	ldr	r1, [pc, #212]	; (800272c <UnlinkTimer+0x100>)
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	3315      	adds	r3, #21
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <UnlinkTimer+0xf8>)
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e03e      	b.n	80026ea <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800266c:	79fa      	ldrb	r2, [r7, #7]
 800266e:	492f      	ldr	r1, [pc, #188]	; (800272c <UnlinkTimer+0x100>)
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	3314      	adds	r3, #20
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	492a      	ldr	r1, [pc, #168]	; (800272c <UnlinkTimer+0x100>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	3315      	adds	r3, #21
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002694:	79f9      	ldrb	r1, [r7, #7]
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	4824      	ldr	r0, [pc, #144]	; (800272c <UnlinkTimer+0x100>)
 800269a:	460b      	mov	r3, r1
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	440b      	add	r3, r1
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4403      	add	r3, r0
 80026a4:	3315      	adds	r3, #21
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2d8      	uxtb	r0, r3
 80026aa:	4920      	ldr	r1, [pc, #128]	; (800272c <UnlinkTimer+0x100>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3315      	adds	r3, #21
 80026b8:	4602      	mov	r2, r0
 80026ba:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d013      	beq.n	80026ea <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80026c2:	79f9      	ldrb	r1, [r7, #7]
 80026c4:	7bba      	ldrb	r2, [r7, #14]
 80026c6:	4819      	ldr	r0, [pc, #100]	; (800272c <UnlinkTimer+0x100>)
 80026c8:	460b      	mov	r3, r1
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	440b      	add	r3, r1
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4403      	add	r3, r0
 80026d2:	3314      	adds	r3, #20
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	4914      	ldr	r1, [pc, #80]	; (800272c <UnlinkTimer+0x100>)
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	3314      	adds	r3, #20
 80026e6:	4602      	mov	r2, r0
 80026e8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80026ea:	79fa      	ldrb	r2, [r7, #7]
 80026ec:	490f      	ldr	r1, [pc, #60]	; (800272c <UnlinkTimer+0x100>)
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	330c      	adds	r3, #12
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <UnlinkTimer+0xf8>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b06      	cmp	r3, #6
 8002706:	d107      	bne.n	8002718 <UnlinkTimer+0xec>
 8002708:	79bb      	ldrb	r3, [r7, #6]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <UnlinkTimer+0x104>)
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	601a      	str	r2, [r3, #0]
  }

  return;
 8002716:	bf00      	nop
 8002718:	bf00      	nop
}
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	200002dc 	.word	0x200002dc
 8002728:	200002dd 	.word	0x200002dd
 800272c:	2000024c 	.word	0x2000024c
 8002730:	200002e0 	.word	0x200002e0

08002734 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <ReturnTimeElapsed+0x70>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d026      	beq.n	8002792 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002744:	f7ff fe02 	bl	800234c <ReadRtcSsrValue>
 8002748:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <ReturnTimeElapsed+0x70>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d805      	bhi.n	8002760 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <ReturnTimeElapsed+0x70>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	e00a      	b.n	8002776 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <ReturnTimeElapsed+0x74>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <ReturnTimeElapsed+0x70>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <ReturnTimeElapsed+0x78>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <ReturnTimeElapsed+0x7c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	40d3      	lsrs	r3, r2
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	e001      	b.n	8002796 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	b29b      	uxth	r3, r3
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200002e0 	.word	0x200002e0
 80027a8:	200003be 	.word	0x200003be
 80027ac:	200003bd 	.word	0x200003bd
 80027b0:	200003bc 	.word	0x200003bc

080027b4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d108      	bne.n	80027d6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80027c4:	f7ff fdc2 	bl	800234c <ReadRtcSsrValue>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <RestartWakeupCounter+0xa8>)
 80027cc:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80027ce:	2003      	movs	r0, #3
 80027d0:	f003 fac1 	bl	8005d56 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80027d4:	e03e      	b.n	8002854 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d803      	bhi.n	80027e4 <RestartWakeupCounter+0x30>
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <RestartWakeupCounter+0xac>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d002      	beq.n	80027ea <RestartWakeupCounter+0x36>
      Value -= 1;
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80027ea:	bf00      	nop
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <RestartWakeupCounter+0xb0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f7      	beq.n	80027ec <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <RestartWakeupCounter+0xb0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <RestartWakeupCounter+0xb0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002810:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <RestartWakeupCounter+0xb4>)
 8002814:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002818:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800281a:	2003      	movs	r0, #3
 800281c:	f003 faa9 	bl	8005d72 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <RestartWakeupCounter+0xb8>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	4910      	ldr	r1, [pc, #64]	; (800286c <RestartWakeupCounter+0xb8>)
 800282c:	4313      	orrs	r3, r2
 800282e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002830:	f7ff fd8c 	bl	800234c <ReadRtcSsrValue>
 8002834:	4602      	mov	r2, r0
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <RestartWakeupCounter+0xa8>)
 8002838:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <RestartWakeupCounter+0xb0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <RestartWakeupCounter+0xb0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800284c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800284e:	f3af 8000 	nop.w
  return ;
 8002852:	bf00      	nop
}
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200002e0 	.word	0x200002e0
 8002860:	200003bc 	.word	0x200003bc
 8002864:	200003b8 	.word	0x200003b8
 8002868:	58000800 	.word	0x58000800
 800286c:	40002800 	.word	0x40002800

08002870 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <RescheduleTimerList+0x124>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d108      	bne.n	8002896 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002884:	bf00      	nop
 8002886:	4b44      	ldr	r3, [pc, #272]	; (8002998 <RescheduleTimerList+0x128>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f7      	bne.n	8002886 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <RescheduleTimerList+0x128>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <RescheduleTimerList+0x128>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a8:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80028aa:	4b3c      	ldr	r3, [pc, #240]	; (800299c <RescheduleTimerList+0x12c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80028b0:	7bfa      	ldrb	r2, [r7, #15]
 80028b2:	493b      	ldr	r1, [pc, #236]	; (80029a0 <RescheduleTimerList+0x130>)
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	440b      	add	r3, r1
 80028be:	3308      	adds	r3, #8
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80028c4:	f7ff ff36 	bl	8002734 <ReturnTimeElapsed>
 80028c8:	4603      	mov	r3, r0
 80028ca:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d205      	bcs.n	80028e0 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <RescheduleTimerList+0x134>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e04d      	b.n	800297c <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <RescheduleTimerList+0x138>)
 80028e4:	8812      	ldrh	r2, [r2, #0]
 80028e6:	b292      	uxth	r2, r2
 80028e8:	4413      	add	r3, r2
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d906      	bls.n	8002900 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <RescheduleTimerList+0x138>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <RescheduleTimerList+0x134>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e03d      	b.n	800297c <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	b29a      	uxth	r2, r3
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <RescheduleTimerList+0x134>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002910:	e034      	b.n	800297c <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	4922      	ldr	r1, [pc, #136]	; (80029a0 <RescheduleTimerList+0x130>)
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3308      	adds	r3, #8
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	429a      	cmp	r2, r3
 8002928:	d20a      	bcs.n	8002940 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	491c      	ldr	r1, [pc, #112]	; (80029a0 <RescheduleTimerList+0x130>)
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	3308      	adds	r3, #8
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e013      	b.n	8002968 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	4917      	ldr	r1, [pc, #92]	; (80029a0 <RescheduleTimerList+0x130>)
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3308      	adds	r3, #8
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	1ac9      	subs	r1, r1, r3
 8002958:	4811      	ldr	r0, [pc, #68]	; (80029a0 <RescheduleTimerList+0x130>)
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4403      	add	r3, r0
 8002964:	3308      	adds	r3, #8
 8002966:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	490d      	ldr	r1, [pc, #52]	; (80029a0 <RescheduleTimerList+0x130>)
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3315      	adds	r3, #21
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b06      	cmp	r3, #6
 8002980:	d1c7      	bne.n	8002912 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002982:	89bb      	ldrh	r3, [r7, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff15 	bl	80027b4 <RestartWakeupCounter>

  return ;
 800298a:	bf00      	nop
}
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40002800 	.word	0x40002800
 8002998:	200003b8 	.word	0x200003b8
 800299c:	200002dc 	.word	0x200002dc
 80029a0:	2000024c 	.word	0x2000024c
 80029a4:	200002e4 	.word	0x200002e4
 80029a8:	200003c0 	.word	0x200003c0

080029ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b2:	f3ef 8310 	mrs	r3, PRIMASK
 80029b6:	617b      	str	r3, [r7, #20]
  return(result);
 80029b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	22ca      	movs	r2, #202	; 0xca
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
 80029c8:	4b5b      	ldr	r3, [pc, #364]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2253      	movs	r2, #83	; 0x53
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80029d2:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	4b57      	ldr	r3, [pc, #348]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e4:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80029e6:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <HW_TS_RTC_Wakeup_Handler+0x190>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80029ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029f2:	4953      	ldr	r1, [pc, #332]	; (8002b40 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	330c      	adds	r3, #12
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d170      	bne.n	8002aea <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002a08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a0c:	494c      	ldr	r1, [pc, #304]	; (8002b40 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002a1c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a20:	4947      	ldr	r1, [pc, #284]	; (8002b40 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3310      	adds	r3, #16
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002a32:	4b44      	ldr	r3, [pc, #272]	; (8002b44 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d04e      	beq.n	8002ada <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002a3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a40:	493f      	ldr	r1, [pc, #252]	; (8002b40 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	330d      	adds	r3, #13
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d125      	bne.n	8002aa2 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fde5 	bl	800262c <UnlinkTimer>
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002a6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a70:	4933      	ldr	r1, [pc, #204]	; (8002b40 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f9d0 	bl	8002e2c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	22ca      	movs	r2, #202	; 0xca
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2253      	movs	r2, #83	; 0x53
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa0:	e013      	b.n	8002aca <HW_TS_RTC_Wakeup_Handler+0x11e>
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f931 	bl	8002d18 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	22ca      	movs	r2, #202	; 0xca
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2253      	movs	r2, #83	; 0x53
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	69b8      	ldr	r0, [r7, #24]
 8002ad4:	f000 fa30 	bl	8002f38 <HW_TS_RTC_Int_AppNot>
 8002ad8:	e024      	b.n	8002b24 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8002ada:	f7ff fec9 	bl	8002870 <RescheduleTimerList>
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f383 8810 	msr	PRIMASK, r3
 8002ae8:	e01c      	b.n	8002b24 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002aea:	bf00      	nop
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f7      	beq.n	8002aec <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b10:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8002b14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	22ff      	movs	r2, #255	; 0xff
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002b2e:	bf00      	nop
}
 8002b30:	3728      	adds	r7, #40	; 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200003b8 	.word	0x200003b8
 8002b3c:	200002dc 	.word	0x200002dc
 8002b40:	2000024c 	.word	0x2000024c
 8002b44:	200002e4 	.word	0x200002e4
 8002b48:	58000800 	.word	0x58000800

08002b4c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8002b58:	4a64      	ldr	r2, [pc, #400]	; (8002cec <HW_TS_Init+0x1a0>)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HW_TS_Init+0x1a0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	22ca      	movs	r2, #202	; 0xca
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
 8002b68:	4b60      	ldr	r3, [pc, #384]	; (8002cec <HW_TS_Init+0x1a0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2253      	movs	r2, #83	; 0x53
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002b72:	4b5f      	ldr	r3, [pc, #380]	; (8002cf0 <HW_TS_Init+0x1a4>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	4a5e      	ldr	r2, [pc, #376]	; (8002cf0 <HW_TS_Init+0x1a4>)
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <HW_TS_Init+0x1a4>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f1c3 0304 	rsb	r3, r3, #4
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <HW_TS_Init+0x1a8>)
 8002b92:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002b94:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HW_TS_Init+0x1a4>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b9c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002ba0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	fa92 f2a2 	rbit	r2, r2
 8002ba8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d101      	bne.n	8002bb8 <HW_TS_Init+0x6c>
  {
    return 32U;
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	e003      	b.n	8002bc0 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	40d3      	lsrs	r3, r2
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HW_TS_Init+0x1ac>)
 8002bca:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002bcc:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <HW_TS_Init+0x1a4>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HW_TS_Init+0x1b0>)
 8002bde:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002be0:	4b46      	ldr	r3, [pc, #280]	; (8002cfc <HW_TS_Init+0x1b0>)
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	4a44      	ldr	r2, [pc, #272]	; (8002cf8 <HW_TS_Init+0x1ac>)
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <HW_TS_Init+0x1a8>)
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	40d3      	lsrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d904      	bls.n	8002c0e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HW_TS_Init+0x1b4>)
 8002c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0a:	801a      	strh	r2, [r3, #0]
 8002c0c:	e003      	b.n	8002c16 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HW_TS_Init+0x1b4>)
 8002c14:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002c16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c1a:	f7ff fb85 	bl	8002328 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002c1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c22:	f7ff fb6d 	bl	8002300 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d143      	bne.n	8002cb4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HW_TS_Init+0x1b8>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002c32:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <HW_TS_Init+0x1bc>)
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	77fb      	strb	r3, [r7, #31]
 8002c3e:	e00c      	b.n	8002c5a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002c40:	7ffa      	ldrb	r2, [r7, #31]
 8002c42:	4932      	ldr	r1, [pc, #200]	; (8002d0c <HW_TS_Init+0x1c0>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	330c      	adds	r3, #12
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002c54:	7ffb      	ldrb	r3, [r7, #31]
 8002c56:	3301      	adds	r3, #1
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	7ffb      	ldrb	r3, [r7, #31]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d9ef      	bls.n	8002c40 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HW_TS_Init+0x1c4>)
 8002c62:	2206      	movs	r2, #6
 8002c64:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8002c66:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HW_TS_Init+0x1a0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HW_TS_Init+0x1a0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c78:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HW_TS_Init+0x1a0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HW_TS_Init+0x1a0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c8e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <HW_TS_Init+0x1c8>)
 8002c92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c96:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f003 f86a 	bl	8005d72 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HW_TS_Init+0x1a0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HW_TS_Init+0x1a0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	e00a      	b.n	8002cca <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HW_TS_Init+0x1a0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f003 f846 	bl	8005d56 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HW_TS_Init+0x1a0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	22ff      	movs	r2, #255	; 0xff
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2106      	movs	r1, #6
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f003 f802 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002cde:	2003      	movs	r0, #3
 8002ce0:	f003 f819 	bl	8005d16 <HAL_NVIC_EnableIRQ>

  return;
 8002ce4:	bf00      	nop
}
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	200003b8 	.word	0x200003b8
 8002cf0:	40002800 	.word	0x40002800
 8002cf4:	200003bc 	.word	0x200003bc
 8002cf8:	200003bd 	.word	0x200003bd
 8002cfc:	200003be 	.word	0x200003be
 8002d00:	200003c0 	.word	0x200003c0
 8002d04:	200002e4 	.word	0x200002e4
 8002d08:	200002e0 	.word	0x200002e0
 8002d0c:	2000024c 	.word	0x2000024c
 8002d10:	200002dc 	.word	0x200002dc
 8002d14:	58000800 	.word	0x58000800

08002d18 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d22:	f3ef 8310 	mrs	r3, PRIMASK
 8002d26:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d28:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002d2e:	2003      	movs	r0, #3
 8002d30:	f002 ffff 	bl	8005d32 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002d34:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	22ca      	movs	r2, #202	; 0xca
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d3e:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2253      	movs	r2, #83	; 0x53
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	4933      	ldr	r1, [pc, #204]	; (8002e18 <HW_TS_Stop+0x100>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	330c      	adds	r3, #12
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d148      	bne.n	8002df2 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fc61 	bl	800262c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <HW_TS_Stop+0x104>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d135      	bne.n	8002de2 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HW_TS_Stop+0x108>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d108      	bne.n	8002d96 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002d84:	bf00      	nop
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f7      	bne.n	8002d86 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002daa:	bf00      	nop
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f7      	beq.n	8002dac <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002dd0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HW_TS_Stop+0x10c>)
 8002dd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002dd8:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002dda:	2003      	movs	r0, #3
 8002ddc:	f002 ffc9 	bl	8005d72 <HAL_NVIC_ClearPendingIRQ>
 8002de0:	e007      	b.n	8002df2 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HW_TS_Stop+0x110>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	7cfa      	ldrb	r2, [r7, #19]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8002dee:	f7ff fd3f 	bl	8002870 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HW_TS_Stop+0xfc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f002 ff8a 	bl	8005d16 <HAL_NVIC_EnableIRQ>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002e0c:	bf00      	nop
}
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200003b8 	.word	0x200003b8
 8002e18:	2000024c 	.word	0x2000024c
 8002e1c:	200002dc 	.word	0x200002dc
 8002e20:	40002800 	.word	0x40002800
 8002e24:	58000800 	.word	0x58000800
 8002e28:	200002dd 	.word	0x200002dd

08002e2c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	493b      	ldr	r1, [pc, #236]	; (8002f28 <HW_TS_Start+0xfc>)
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	440b      	add	r3, r1
 8002e46:	330c      	adds	r3, #12
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d103      	bne.n	8002e58 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff60 	bl	8002d18 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e58:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002e60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e62:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002e64:	2003      	movs	r0, #3
 8002e66:	f002 ff64 	bl	8005d32 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002e6a:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HW_TS_Start+0x100>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	22ca      	movs	r2, #202	; 0xca
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
 8002e74:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HW_TS_Start+0x100>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2253      	movs	r2, #83	; 0x53
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002e7e:	79fa      	ldrb	r2, [r7, #7]
 8002e80:	4929      	ldr	r1, [pc, #164]	; (8002f28 <HW_TS_Start+0xfc>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	330c      	adds	r3, #12
 8002e8e:	2202      	movs	r2, #2
 8002e90:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002e92:	79fa      	ldrb	r2, [r7, #7]
 8002e94:	4924      	ldr	r1, [pc, #144]	; (8002f28 <HW_TS_Start+0xfc>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002ea6:	79fa      	ldrb	r2, [r7, #7]
 8002ea8:	491f      	ldr	r1, [pc, #124]	; (8002f28 <HW_TS_Start+0xfc>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fb0b 	bl	80024d8 <linkTimer>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HW_TS_Start+0x104>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HW_TS_Start+0x108>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	7c7a      	ldrb	r2, [r7, #17]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d002      	beq.n	8002ede <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8002ed8:	f7ff fcca 	bl	8002870 <RescheduleTimerList>
 8002edc:	e013      	b.n	8002f06 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4911      	ldr	r1, [pc, #68]	; (8002f28 <HW_TS_Start+0xfc>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	79fa      	ldrb	r2, [r7, #7]
 8002ef4:	1ac9      	subs	r1, r1, r3
 8002ef6:	480c      	ldr	r0, [pc, #48]	; (8002f28 <HW_TS_Start+0xfc>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4403      	add	r3, r0
 8002f02:	3308      	adds	r3, #8
 8002f04:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HW_TS_Start+0x100>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002f10:	2003      	movs	r0, #3
 8002f12:	f002 ff00 	bl	8005d16 <HAL_NVIC_EnableIRQ>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002f20:	bf00      	nop
}
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	2000024c 	.word	0x2000024c
 8002f2c:	200003b8 	.word	0x200003b8
 8002f30:	200002dc 	.word	0x200002dc
 8002f34:	200002dd 	.word	0x200002dd

08002f38 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	460b      	mov	r3, r1
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4798      	blx	r3

  return;
 8002f4a:	bf00      	nop
}
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <LL_AHB2_GRP1_EnableClock>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <MX_I2C1_Init+0x74>)
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <MX_I2C1_Init+0x78>)
 8002fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <MX_I2C1_Init+0x74>)
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <MX_I2C1_Init+0x7c>)
 8002fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <MX_I2C1_Init+0x74>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <MX_I2C1_Init+0x74>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <MX_I2C1_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <MX_I2C1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_I2C1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_I2C1_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_I2C1_Init+0x74>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ff2:	480e      	ldr	r0, [pc, #56]	; (800302c <MX_I2C1_Init+0x74>)
 8002ff4:	f003 faec 	bl	80065d0 <HAL_I2C_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ffe:	f000 fc27 	bl	8003850 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003002:	2100      	movs	r1, #0
 8003004:	4809      	ldr	r0, [pc, #36]	; (800302c <MX_I2C1_Init+0x74>)
 8003006:	f003 ffbd 	bl	8006f84 <HAL_I2CEx_ConfigAnalogFilter>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003010:	f000 fc1e 	bl	8003850 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003014:	2100      	movs	r1, #0
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_I2C1_Init+0x74>)
 8003018:	f003 ffff 	bl	800701a <HAL_I2CEx_ConfigDigitalFilter>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003022:	f000 fc15 	bl	8003850 <Error_Handler>
  }

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20004f88 	.word	0x20004f88
 8003030:	40005400 	.word	0x40005400
 8003034:	00707cbb 	.word	0x00707cbb

08003038 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <HAL_I2C_MspInit+0x58>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d116      	bne.n	8003088 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	2002      	movs	r0, #2
 800305c:	f7ff ff79 	bl	8002f52 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003060:	23c0      	movs	r3, #192	; 0xc0
 8003062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003064:	2312      	movs	r3, #18
 8003066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003068:	2301      	movs	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003070:	2304      	movs	r3, #4
 8003072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	4619      	mov	r1, r3
 800307a:	4806      	ldr	r0, [pc, #24]	; (8003094 <HAL_I2C_MspInit+0x5c>)
 800307c:	f003 f8fc 	bl	8006278 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003080:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003084:	f7ff ff7e 	bl	8002f84 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003088:	bf00      	nop
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40005400 	.word	0x40005400
 8003094:	48000400 	.word	0x48000400

08003098 <toggleLed>:
 *      Author: patrick
 */

#include "led.h"

void toggleLed(uint8_t red, uint8_t green, uint8_t blue){
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
 80030a2:	460b      	mov	r3, r1
 80030a4:	71bb      	strb	r3, [r7, #6]
 80030a6:	4613      	mov	r3, r2
 80030a8:	717b      	strb	r3, [r7, #5]
	if(red){
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <toggleLed+0x24>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2110      	movs	r1, #16
 80030b4:	4814      	ldr	r0, [pc, #80]	; (8003108 <toggleLed+0x70>)
 80030b6:	f003 fa4f 	bl	8006558 <HAL_GPIO_WritePin>
 80030ba:	e004      	b.n	80030c6 <toggleLed+0x2e>
	}
	else{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80030bc:	2201      	movs	r2, #1
 80030be:	2110      	movs	r1, #16
 80030c0:	4811      	ldr	r0, [pc, #68]	; (8003108 <toggleLed+0x70>)
 80030c2:	f003 fa49 	bl	8006558 <HAL_GPIO_WritePin>
	}

	if(blue){
 80030c6:	797b      	ldrb	r3, [r7, #5]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <toggleLed+0x40>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2101      	movs	r1, #1
 80030d0:	480e      	ldr	r0, [pc, #56]	; (800310c <toggleLed+0x74>)
 80030d2:	f003 fa41 	bl	8006558 <HAL_GPIO_WritePin>
 80030d6:	e004      	b.n	80030e2 <toggleLed+0x4a>
		}
		else{
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80030d8:	2201      	movs	r2, #1
 80030da:	2101      	movs	r1, #1
 80030dc:	480b      	ldr	r0, [pc, #44]	; (800310c <toggleLed+0x74>)
 80030de:	f003 fa3b 	bl	8006558 <HAL_GPIO_WritePin>
		}

	if(green){
 80030e2:	79bb      	ldrb	r3, [r7, #6]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <toggleLed+0x5c>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2102      	movs	r1, #2
 80030ec:	4807      	ldr	r0, [pc, #28]	; (800310c <toggleLed+0x74>)
 80030ee:	f003 fa33 	bl	8006558 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
		}
}
 80030f2:	e004      	b.n	80030fe <toggleLed+0x66>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80030f4:	2201      	movs	r2, #1
 80030f6:	2102      	movs	r1, #2
 80030f8:	4804      	ldr	r0, [pc, #16]	; (800310c <toggleLed+0x74>)
 80030fa:	f003 fa2d 	bl	8006558 <HAL_GPIO_WritePin>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	48001000 	.word	0x48001000
 800310c:	48000400 	.word	0x48000400

08003110 <powf>:
 *          Base number
 *  @param  y
 *          Exponent
 *  @return x raised to the power of y
 */
float powf(const float x, const float y) {
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	ed87 0a01 	vstr	s0, [r7, #4]
 800311a:	edc7 0a00 	vstr	s1, [r7]
  return (float)(pow((double)x, (double)y));
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd f99c 	bl	800045c <__aeabi_f2d>
 8003124:	4604      	mov	r4, r0
 8003126:	460d      	mov	r5, r1
 8003128:	6838      	ldr	r0, [r7, #0]
 800312a:	f7fd f997 	bl	800045c <__aeabi_f2d>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	ec43 2b11 	vmov	d1, r2, r3
 8003136:	ec45 4b10 	vmov	d0, r4, r5
 800313a:	f012 fcf7 	bl	8015b2c <pow>
 800313e:	ec54 3b10 	vmov	r3, r4, d0
 8003142:	4618      	mov	r0, r3
 8003144:	4621      	mov	r1, r4
 8003146:	f7fd fc91 	bl	8000a6c <__aeabi_d2f>
 800314a:	4603      	mov	r3, r0
 800314c:	ee07 3a90 	vmov	s15, r3
}
 8003150:	eeb0 0a67 	vmov.f32	s0, s15
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800315c <light_write8>:
/*!
 *  @brief  Writes a register and an 8 bit value over I2C
 *  @param  reg
 *  @param  value
 */
void light_write8(uint8_t reg, uint32_t value) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af04      	add	r7, sp, #16
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]

	uint8_t packet = value;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Write(i2c_periph, _deviceAddress_light, TCS34725_COMMAND_BIT | reg,
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <light_write8+0x44>)
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <light_write8+0x48>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b299      	uxth	r1, r3
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800317e:	b2db      	uxtb	r3, r3
 8003180:	b29a      	uxth	r2, r3
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	9302      	str	r3, [sp, #8]
 8003188:	2301      	movs	r3, #1
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	f107 030f 	add.w	r3, r7, #15
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2301      	movs	r3, #1
 8003194:	f003 faac 	bl	80066f0 <HAL_I2C_Mem_Write>
//
//    packet = value;
//    HAL_I2C_Master_Transmit(i2c_periph, _deviceAddress_light, &packet, 1, 1000);


}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20004ea8 	.word	0x20004ea8
 80031a4:	20004fd4 	.word	0x20004fd4

080031a8 <light_read8>:
/*!
 *  @brief  Reads an 8 bit value over I2C
 *  @param  reg
 *  @return value
 */
uint8_t light_read8(uint8_t reg) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af04      	add	r7, sp, #16
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]

	uint8_t read_reg;

	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress_light, TCS34725_COMMAND_BIT | reg,
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <light_read8+0x40>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <light_read8+0x44>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b299      	uxth	r1, r3
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ca:	9302      	str	r3, [sp, #8]
 80031cc:	2301      	movs	r3, #1
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f107 030f 	add.w	r3, r7, #15
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2301      	movs	r3, #1
 80031d8:	f003 fb9e 	bl	8006918 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, &read_reg, 1, 1000);

	return read_reg;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]

}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20004ea8 	.word	0x20004ea8
 80031ec:	20004fd4 	.word	0x20004fd4

080031f0 <light_read16>:
/*!
 *  @brief  Reads a 16 bit values over I2C
 *  @param  reg
 *  @return value
 */
uint16_t light_read16(uint8_t reg) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
//
//
//  HAL_I2C_Master_Receive(i2c_periph, _deviceAddress_light, &read_reg[0], 2, 1000);


	HAL_I2C_Mem_Read(i2c_periph, _deviceAddress_light, TCS34725_COMMAND_BIT | reg,
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <light_read16+0x50>)
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <light_read16+0x54>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b299      	uxth	r1, r3
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800320a:	b2db      	uxtb	r3, r3
 800320c:	b29a      	uxth	r2, r3
 800320e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	2302      	movs	r3, #2
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2301      	movs	r3, #1
 8003220:	f003 fb7a 	bl	8006918 <HAL_I2C_Mem_Read>
		I2C_MEMADD_SIZE_8BIT, &read_reg[0], 2, 1000);


	read_reg_concat = ( ((uint16_t) read_reg[1] ) << 8) | read_reg[0];
 8003224:	7b7b      	ldrb	r3, [r7, #13]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	b21a      	sxth	r2, r3
 800322a:	7b3b      	ldrb	r3, [r7, #12]
 800322c:	b21b      	sxth	r3, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	b21b      	sxth	r3, r3
 8003232:	81fb      	strh	r3, [r7, #14]

  return read_reg_concat;
 8003234:	89fb      	ldrh	r3, [r7, #14]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20004ea8 	.word	0x20004ea8
 8003244:	20004fd4 	.word	0x20004fd4

08003248 <light_enable>:

/*!
 *  @brief  Enables the device
 */
void light_enable() {
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	light_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 800324c:	2101      	movs	r1, #1
 800324e:	2000      	movs	r0, #0
 8003250:	f7ff ff84 	bl	800315c <light_write8>
	HAL_Delay(4);
 8003254:	2004      	movs	r0, #4
 8003256:	f001 f95f 	bl	8004518 <HAL_Delay>
    light_write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 800325a:	2103      	movs	r1, #3
 800325c:	2000      	movs	r0, #0
 800325e:	f7ff ff7d 	bl	800315c <light_write8>
    This is only necessary in the case where enabling and then
    immediately trying to read values back. This is because setting
    AEN triggers an automatic integration, so if a read RGBC is
    performed too quickly, the data is not yet valid and all 0's are
    returned */
  switch (_tcs34725IntegrationTime) {
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <light_enable+0x74>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2bd5      	cmp	r3, #213	; 0xd5
 8003268:	d019      	beq.n	800329e <light_enable+0x56>
 800326a:	2bd5      	cmp	r3, #213	; 0xd5
 800326c:	dc04      	bgt.n	8003278 <light_enable+0x30>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01d      	beq.n	80032ae <light_enable+0x66>
 8003272:	2bc0      	cmp	r3, #192	; 0xc0
 8003274:	d017      	beq.n	80032a6 <light_enable+0x5e>
    break;
  case TCS34725_INTEGRATIONTIME_700MS:
	  HAL_Delay(700);
    break;
  }
}
 8003276:	e01f      	b.n	80032b8 <light_enable+0x70>
  switch (_tcs34725IntegrationTime) {
 8003278:	2bf6      	cmp	r3, #246	; 0xf6
 800327a:	d008      	beq.n	800328e <light_enable+0x46>
 800327c:	2bff      	cmp	r3, #255	; 0xff
 800327e:	d002      	beq.n	8003286 <light_enable+0x3e>
 8003280:	2beb      	cmp	r3, #235	; 0xeb
 8003282:	d008      	beq.n	8003296 <light_enable+0x4e>
}
 8003284:	e018      	b.n	80032b8 <light_enable+0x70>
	  HAL_Delay(3);
 8003286:	2003      	movs	r0, #3
 8003288:	f001 f946 	bl	8004518 <HAL_Delay>
    break;
 800328c:	e014      	b.n	80032b8 <light_enable+0x70>
	  HAL_Delay(24);
 800328e:	2018      	movs	r0, #24
 8003290:	f001 f942 	bl	8004518 <HAL_Delay>
    break;
 8003294:	e010      	b.n	80032b8 <light_enable+0x70>
	  HAL_Delay(50);
 8003296:	2032      	movs	r0, #50	; 0x32
 8003298:	f001 f93e 	bl	8004518 <HAL_Delay>
    break;
 800329c:	e00c      	b.n	80032b8 <light_enable+0x70>
	  HAL_Delay(101);
 800329e:	2065      	movs	r0, #101	; 0x65
 80032a0:	f001 f93a 	bl	8004518 <HAL_Delay>
    break;
 80032a4:	e008      	b.n	80032b8 <light_enable+0x70>
	  HAL_Delay(154);
 80032a6:	209a      	movs	r0, #154	; 0x9a
 80032a8:	f001 f936 	bl	8004518 <HAL_Delay>
    break;
 80032ac:	e004      	b.n	80032b8 <light_enable+0x70>
	  HAL_Delay(700);
 80032ae:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80032b2:	f001 f931 	bl	8004518 <HAL_Delay>
    break;
 80032b6:	bf00      	nop
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20004fd5 	.word	0x20004fd5

080032c0 <light_begin>:
 *  @param  *theWire
 *          The Wire object
 *  @return True if initialization was successful, otherwise false.
 */
void light_begin(uint8_t deviceAddress, uint8_t intPin, GPIO_TypeDef* intPort, I2C_HandleTypeDef* periph,
		tcs34725IntegrationTime_t it, tcs34725Gain_t gain) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60ba      	str	r2, [r7, #8]
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	460b      	mov	r3, r1
 80032d0:	73bb      	strb	r3, [r7, #14]
	_deviceAddress_light = deviceAddress << 1;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <light_begin+0x48>)
 80032da:	701a      	strb	r2, [r3, #0]
	_int = intPin;
 80032dc:	4a0b      	ldr	r2, [pc, #44]	; (800330c <light_begin+0x4c>)
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	7013      	strb	r3, [r2, #0]
	_intPort = intPort;
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <light_begin+0x50>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6013      	str	r3, [r2, #0]
	i2c_periph = periph;
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <light_begin+0x54>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6013      	str	r3, [r2, #0]
//	_tcs34725Initialised = true;
	_tcs34725IntegrationTime = it;
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <light_begin+0x58>)
 80032f0:	7e3b      	ldrb	r3, [r7, #24]
 80032f2:	7013      	strb	r3, [r2, #0]
	 _tcs34725Gain = gain;
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <light_begin+0x5c>)
 80032f6:	7f3b      	ldrb	r3, [r7, #28]
 80032f8:	7013      	strb	r3, [r2, #0]

	 light_init();
 80032fa:	f000 f811 	bl	8003320 <light_init>

}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20004fd4 	.word	0x20004fd4
 800330c:	20004e9b 	.word	0x20004e9b
 8003310:	20004eb0 	.word	0x20004eb0
 8003314:	20004ea8 	.word	0x20004ea8
 8003318:	20004fd5 	.word	0x20004fd5
 800331c:	20004fd7 	.word	0x20004fd7

08003320 <light_init>:

/*!
 *  @brief  Part of begin
 *  @return True if initialization was successful, otherwise false.
 */
void light_init() {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0

//	  light_disable();

  /* Make sure we're actually connected */
  uint8_t x = light_read8(TCS34725_ID);
 8003326:	2012      	movs	r0, #18
 8003328:	f7ff ff3e 	bl	80031a8 <light_read8>
 800332c:	4603      	mov	r3, r0
 800332e:	71fb      	strb	r3, [r7, #7]
//    return 	false;
//  }
//  _tcs34725Initialised = true;

  /* Set default integration time and gain */
  light_setIntegrationTime(_tcs34725IntegrationTime);
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <light_init+0x30>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f80f 	bl	8003358 <light_setIntegrationTime>
  light_setGain(_tcs34725Gain);
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <light_init+0x34>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f81e 	bl	8003380 <light_setGain>
//  light_setWait(0xFF);

  //light_clearInterrupt();

  /* Note: by default, the device is in power down mode on bootup */
  light_enable();
 8003344:	f7ff ff80 	bl	8003248 <light_enable>

//  return true;
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20004fd5 	.word	0x20004fd5
 8003354:	20004fd7 	.word	0x20004fd7

08003358 <light_setIntegrationTime>:
/*!
 *  @brief  Sets the integration time for the TC34725
 *  @param  it
 *          Integration Time
 */
void light_setIntegrationTime(tcs34725IntegrationTime_t it) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
//  if (!_tcs34725Initialised)
//	  light_begin();

  /* Update the timing register */
  light_write8(TCS34725_ATIME, it);
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4619      	mov	r1, r3
 8003366:	2001      	movs	r0, #1
 8003368:	f7ff fef8 	bl	800315c <light_write8>

  /* Update value placeholders */
  _tcs34725IntegrationTime = it;
 800336c:	4a03      	ldr	r2, [pc, #12]	; (800337c <light_setIntegrationTime+0x24>)
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	7013      	strb	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20004fd5 	.word	0x20004fd5

08003380 <light_setGain>:
/*!
 *  @brief  Adjusts the gain on the TCS34725
 *  @param  gain
 *          Gain (sensitivity to light)
 */
void light_setGain(tcs34725Gain_t gain) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
//  if (!_tcs34725Initialised)
//	  light_begin();

  /* Update the timing register */
  light_write8(TCS34725_CONTROL, gain);
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	4619      	mov	r1, r3
 800338e:	200f      	movs	r0, #15
 8003390:	f7ff fee4 	bl	800315c <light_write8>

  /* Update value placeholders */
  _tcs34725Gain = gain;
 8003394:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <light_setGain+0x24>)
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	7013      	strb	r3, [r2, #0]
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20004fd7 	.word	0x20004fd7

080033a8 <light_getRawData>:
 *          Blue value
 *  @param  *c
 *          Clear channel value
 */
void light_getRawData(uint16_t *r, uint16_t *g, uint16_t *b,
                                   uint16_t *c) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
//  if (!_tcs34725Initialised)
//	  light_begin();

  *c = light_read16(TCS34725_CDATAL);
 80033b6:	2014      	movs	r0, #20
 80033b8:	f7ff ff1a 	bl	80031f0 <light_read16>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	801a      	strh	r2, [r3, #0]
  *r = light_read16(TCS34725_RDATAL);
 80033c4:	2016      	movs	r0, #22
 80033c6:	f7ff ff13 	bl	80031f0 <light_read16>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	801a      	strh	r2, [r3, #0]
  *g = light_read16(TCS34725_GDATAL);
 80033d2:	2018      	movs	r0, #24
 80033d4:	f7ff ff0c 	bl	80031f0 <light_read16>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	801a      	strh	r2, [r3, #0]
  *b = light_read16(TCS34725_BDATAL);
 80033e0:	201a      	movs	r0, #26
 80033e2:	f7ff ff05 	bl	80031f0 <light_read16>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	801a      	strh	r2, [r3, #0]

  /* Set a delay for the integration time */
  switch (_tcs34725IntegrationTime) {
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <light_getRawData+0xa4>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2bd5      	cmp	r3, #213	; 0xd5
 80033f4:	d019      	beq.n	800342a <light_getRawData+0x82>
 80033f6:	2bd5      	cmp	r3, #213	; 0xd5
 80033f8:	dc04      	bgt.n	8003404 <light_getRawData+0x5c>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01d      	beq.n	800343a <light_getRawData+0x92>
 80033fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003400:	d017      	beq.n	8003432 <light_getRawData+0x8a>
    break;
  case TCS34725_INTEGRATIONTIME_700MS:
	  HAL_Delay(700);
    break;
  }
}
 8003402:	e01f      	b.n	8003444 <light_getRawData+0x9c>
  switch (_tcs34725IntegrationTime) {
 8003404:	2bf6      	cmp	r3, #246	; 0xf6
 8003406:	d008      	beq.n	800341a <light_getRawData+0x72>
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d002      	beq.n	8003412 <light_getRawData+0x6a>
 800340c:	2beb      	cmp	r3, #235	; 0xeb
 800340e:	d008      	beq.n	8003422 <light_getRawData+0x7a>
}
 8003410:	e018      	b.n	8003444 <light_getRawData+0x9c>
	  HAL_Delay(3);
 8003412:	2003      	movs	r0, #3
 8003414:	f001 f880 	bl	8004518 <HAL_Delay>
    break;
 8003418:	e014      	b.n	8003444 <light_getRawData+0x9c>
	  HAL_Delay(24);
 800341a:	2018      	movs	r0, #24
 800341c:	f001 f87c 	bl	8004518 <HAL_Delay>
    break;
 8003420:	e010      	b.n	8003444 <light_getRawData+0x9c>
	  HAL_Delay(50);
 8003422:	2032      	movs	r0, #50	; 0x32
 8003424:	f001 f878 	bl	8004518 <HAL_Delay>
    break;
 8003428:	e00c      	b.n	8003444 <light_getRawData+0x9c>
	  HAL_Delay(101);
 800342a:	2065      	movs	r0, #101	; 0x65
 800342c:	f001 f874 	bl	8004518 <HAL_Delay>
    break;
 8003430:	e008      	b.n	8003444 <light_getRawData+0x9c>
	  HAL_Delay(154);
 8003432:	209a      	movs	r0, #154	; 0x9a
 8003434:	f001 f870 	bl	8004518 <HAL_Delay>
    break;
 8003438:	e004      	b.n	8003444 <light_getRawData+0x9c>
	  HAL_Delay(700);
 800343a:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800343e:	f001 f86b 	bl	8004518 <HAL_Delay>
    break;
 8003442:	bf00      	nop
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20004fd5 	.word	0x20004fd5

08003450 <light_calculateColorTemperature_dn40>:
 *  @return Color temperature in degrees Kelvin
 */
uint16_t light_calculateColorTemperature_dn40(uint16_t r,
                                                           uint16_t g,
                                                           uint16_t b,
                                                           uint16_t c) {
 8003450:	b490      	push	{r4, r7}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4623      	mov	r3, r4
 8003460:	80fb      	strh	r3, [r7, #6]
 8003462:	4603      	mov	r3, r0
 8003464:	80bb      	strh	r3, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	807b      	strh	r3, [r7, #2]
 800346a:	4613      	mov	r3, r2
 800346c:	803b      	strh	r3, [r7, #0]
  uint16_t r2, b2; /* RGB values minus IR component */
  uint16_t sat;    /* Digital saturation level */
  uint16_t ir;     /* Inferred IR content */

  if (c == 0) {
 800346e:	883b      	ldrh	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <light_calculateColorTemperature_dn40+0x28>
    return 0;
 8003474:	2300      	movs	r3, #0
 8003476:	e052      	b.n	800351e <light_calculateColorTemperature_dn40+0xce>
   *     (64*2.4ms=153.6ms).
   * (c) If the integration time is > 153.6ms, digital saturation will
   *     occur before analog saturation. Digital saturation occurs when
   *     the count reaches 65535.
   */
  if ((256 - _tcs34725IntegrationTime) > 63) {
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <light_calculateColorTemperature_dn40+0xd8>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003480:	2b3f      	cmp	r3, #63	; 0x3f
 8003482:	dd03      	ble.n	800348c <light_calculateColorTemperature_dn40+0x3c>
    /* Track digital saturation */
    sat = 65535;
 8003484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003488:	82fb      	strh	r3, [r7, #22]
 800348a:	e006      	b.n	800349a <light_calculateColorTemperature_dn40+0x4a>
  } else {
    /* Track analog saturation */
    sat = 1024 * (256 - _tcs34725IntegrationTime);
 800348c:	4b26      	ldr	r3, [pc, #152]	; (8003528 <light_calculateColorTemperature_dn40+0xd8>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003494:	b29b      	uxth	r3, r3
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	82fb      	strh	r3, [r7, #22]
   *     saturated. This means that you can be below the 'sat' value, but
   *     still be saturating. At integration times >150ms this can be
   *     ignored, but <= 150ms you should calculate the 75% saturation
   *     level to avoid this problem.
   */
  if ((256 - _tcs34725IntegrationTime) <= 63) {
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <light_calculateColorTemperature_dn40+0xd8>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80034a2:	2b3f      	cmp	r3, #63	; 0x3f
 80034a4:	dc05      	bgt.n	80034b2 <light_calculateColorTemperature_dn40+0x62>
    /* Adjust sat to 75% to avoid analog saturation if atime < 153.6ms */
    sat -= sat / 4;
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8afa      	ldrh	r2, [r7, #22]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	82fb      	strh	r3, [r7, #22]
  }

  /* Check for saturation and mark the sample as invalid if true */
  if (c >= sat) {
 80034b2:	883a      	ldrh	r2, [r7, #0]
 80034b4:	8afb      	ldrh	r3, [r7, #22]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d301      	bcc.n	80034be <light_calculateColorTemperature_dn40+0x6e>
    return 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e02f      	b.n	800351e <light_calculateColorTemperature_dn40+0xce>
  }

  /* AMS RGB sensors have no IR channel, so the IR content must be */
  /* calculated indirectly. */
  ir = (r + g + b > c) ? (r + g + b - c) / 2 : 0;
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	441a      	add	r2, r3
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	441a      	add	r2, r3
 80034c8:	883b      	ldrh	r3, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	dd0b      	ble.n	80034e6 <light_calculateColorTemperature_dn40+0x96>
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	88bb      	ldrh	r3, [r7, #4]
 80034d2:	441a      	add	r2, r3
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	441a      	add	r2, r3
 80034d8:	883b      	ldrh	r3, [r7, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	0fda      	lsrs	r2, r3, #31
 80034de:	4413      	add	r3, r2
 80034e0:	105b      	asrs	r3, r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	e000      	b.n	80034e8 <light_calculateColorTemperature_dn40+0x98>
 80034e6:	2300      	movs	r3, #0
 80034e8:	82bb      	strh	r3, [r7, #20]

  /* Remove the IR component from the raw RGB values */
  r2 = r - ir;
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	8abb      	ldrh	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	827b      	strh	r3, [r7, #18]
  b2 = b - ir;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	8abb      	ldrh	r3, [r7, #20]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	823b      	strh	r3, [r7, #16]

  if (r2 == 0) {
 80034fa:	8a7b      	ldrh	r3, [r7, #18]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <light_calculateColorTemperature_dn40+0xb4>
    return 0;
 8003500:	2300      	movs	r3, #0
 8003502:	e00c      	b.n	800351e <light_calculateColorTemperature_dn40+0xce>
  }

  /* A simple method of measuring color temp is to use the ratio of blue */
  /* to red light, taking IR cancellation into account. */
  uint16_t cct = (3810 * (uint32_t)b2) / /** Color temp coefficient. */
 8003504:	8a3b      	ldrh	r3, [r7, #16]
 8003506:	f640 62e2 	movw	r2, #3810	; 0xee2
 800350a:	fb02 f203 	mul.w	r2, r2, r3
                     (uint32_t)r2 +
 800350e:	8a7b      	ldrh	r3, [r7, #18]
  uint16_t cct = (3810 * (uint32_t)b2) / /** Color temp coefficient. */
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
                     (uint32_t)r2 +
 8003514:	b29b      	uxth	r3, r3
  uint16_t cct = (3810 * (uint32_t)b2) / /** Color temp coefficient. */
 8003516:	f203 536f 	addw	r3, r3, #1391	; 0x56f
 800351a:	81fb      	strh	r3, [r7, #14]
                 1391; /** Color temp offset. */

  return cct;
 800351c:	89fb      	ldrh	r3, [r7, #14]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bc90      	pop	{r4, r7}
 8003526:	4770      	bx	lr
 8003528:	20004fd5 	.word	0x20004fd5

0800352c <light_calculateLux>:
 *          Green value
 *  @param  b
 *          Blue value
 *  @return Lux value
 */
uint16_t light_calculateLux(uint16_t r, uint16_t g, uint16_t b) {
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
 8003536:	460b      	mov	r3, r1
 8003538:	80bb      	strh	r3, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	807b      	strh	r3, [r7, #2]
  float illuminance;

  /* This only uses RGB ... how can we integrate clear or calculate lux */
  /* based exclusively on clear since this might be more reliable?      */
  illuminance = (-0.32466F * r) + (1.57837F * g) + (-0.73191F * b);
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003548:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800359c <light_calculateLux+0x70>
 800354c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003550:	88bb      	ldrh	r3, [r7, #4]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80035a0 <light_calculateLux+0x74>
 800355e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003570:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80035a4 <light_calculateLux+0x78>
 8003574:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	edc7 7a03 	vstr	s15, [r7, #12]

  return (uint16_t)illuminance;
 8003580:	edd7 7a03 	vldr	s15, [r7, #12]
 8003584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003588:	ee17 3a90 	vmov	r3, s15
 800358c:	b29b      	uxth	r3, r3
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	bea639d6 	.word	0xbea639d6
 80035a0:	3fca0807 	.word	0x3fca0807
 80035a4:	bf3b5e74 	.word	0xbf3b5e74

080035a8 <LL_RCC_HSI48_Enable>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_HSI48_IsReady>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d101      	bne.n	80035e2 <LL_RCC_HSI48_IsReady+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <LL_RCC_HSI48_IsReady+0x1a>
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_RCC_LSE_SetDriveCapability>:
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f023 0218 	bic.w	r2, r3, #24
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	3220      	adds	r2, #32
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	4a05      	ldr	r2, [pc, #20]	; (8003648 <LL_HSEM_1StepLock+0x2c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d001      	beq.n	800363a <LL_HSEM_1StepLock+0x1e>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <LL_HSEM_1StepLock+0x20>
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	80000400 	.word	0x80000400

0800364c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <main+0x54>)
 8003652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003656:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003658:	f000 ff12 	bl	8004480 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800365c:	f000 faee 	bl	8003c3c <_Z12Reset_Devicev>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003660:	f000 f820 	bl	80036a4 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  Init_Exti( );
 8003664:	f000 fb14 	bl	8003c90 <_Z9Init_Extiv>
  initClk();
 8003668:	f000 fb1e 	bl	8003ca8 <_Z7initClkv>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800366c:	f7fe fddc 	bl	8002228 <MX_GPIO_Init>
  MX_DMA_Init();
 8003670:	f7fe fda5 	bl	80021be <MX_DMA_Init>
  MX_TIM2_Init();
 8003674:	f000 fdba 	bl	80041ec <MX_TIM2_Init>
  MX_TIM17_Init();
 8003678:	f000 fe06 	bl	8004288 <MX_TIM17_Init>
  MX_ADC1_Init();
 800367c:	f7fe f926 	bl	80018cc <MX_ADC1_Init>
  MX_USB_Device_Init();
 8003680:	f011 fd1c 	bl	80150bc <MX_USB_Device_Init>
  MX_RF_Init();
 8003684:	f000 fb2c 	bl	8003ce0 <MX_RF_Init>
  MX_RTC_Init();
 8003688:	f000 fb5c 	bl	8003d44 <MX_RTC_Init>
  MX_I2C1_Init();
 800368c:	f7ff fc94 	bl	8002fb8 <MX_I2C1_Init>


	/* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003690:	f00c fb7c 	bl	800fd8c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003694:	f7fe fb76 	bl	8001d84 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8003698:	f00c fbac 	bl	800fdf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800369c:	e7fe      	b.n	800369c <main+0x50>
 800369e:	bf00      	nop
 80036a0:	58004000 	.word	0x58004000

080036a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b0ae      	sub	sp, #184	; 0xb8
 80036a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80036ae:	2248      	movs	r2, #72	; 0x48
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f013 fac7 	bl	8016c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
 80036c8:	615a      	str	r2, [r3, #20]
 80036ca:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	2250      	movs	r2, #80	; 0x50
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f013 fab7 	bl	8016c46 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e6:	f043 0310 	orr.w	r3, r3, #16
 80036ea:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80036ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f6:	f043 0303 	orr.w	r3, r3, #3
 80036fa:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80036fc:	f004 fc1e 	bl	8007f3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003700:	2000      	movs	r0, #0
 8003702:	f7ff ff74 	bl	80035ee <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <_Z18SystemClock_Configv+0x180>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800370e:	4a45      	ldr	r2, [pc, #276]	; (8003824 <_Z18SystemClock_Configv+0x180>)
 8003710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4b43      	ldr	r3, [pc, #268]	; (8003824 <_Z18SystemClock_Configv+0x180>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003722:	2307      	movs	r3, #7
 8003724:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800372c:	2301      	movs	r3, #1
 800372e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003734:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003736:	2340      	movs	r3, #64	; 0x40
 8003738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003742:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003746:	4618      	mov	r0, r3
 8003748:	f004 ffa8 	bl	800869c <HAL_RCC_OscConfig>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	bf14      	ite	ne
 8003752:	2301      	movne	r3, #1
 8003754:	2300      	moveq	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800375c:	f000 f878 	bl	8003850 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003760:	236f      	movs	r3, #111	; 0x6f
 8003762:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003764:	2302      	movs	r3, #2
 8003766:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003768:	2300      	movs	r3, #0
 800376a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800376c:	2300      	movs	r3, #0
 800376e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003770:	2300      	movs	r3, #0
 8003772:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003774:	2300      	movs	r3, #0
 8003776:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800377c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f005 fb16 	bl	8008db4 <HAL_RCC_ClockConfig>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf14      	ite	ne
 800378e:	2301      	movne	r3, #1
 8003790:	2300      	moveq	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8003798:	f000 f85a 	bl	8003850 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800379c:	f44f 5374 	mov.w	r3, #15616	; 0x3d00
 80037a0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80037a2:	2306      	movs	r3, #6
 80037a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80037a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80037ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80037b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80037b6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80037b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80037be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80037c4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80037c8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80037ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ce:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80037d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80037d4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80037d6:	2300      	movs	r3, #0
 80037d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80037da:	2310      	movs	r3, #16
 80037dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f005 ff42 	bl	800966a <HAL_RCCEx_PeriphCLKConfig>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <_Z18SystemClock_Configv+0x156>
  {
    Error_Handler();
 80037f6:	f000 f82b 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  //https://community.st.com/s/question/0D50X0000C0wdqe/stm32wb55-ble-hid?t=1591239574627
  LL_HSEM_1StepLock(HSEM, 5 );
 80037fa:	2105      	movs	r1, #5
 80037fc:	480a      	ldr	r0, [pc, #40]	; (8003828 <_Z18SystemClock_Configv+0x184>)
 80037fe:	f7ff ff0d 	bl	800361c <LL_HSEM_1StepLock>
  LL_RCC_HSI48_Enable();
 8003802:	f7ff fed1 	bl	80035a8 <LL_RCC_HSI48_Enable>
  while(!LL_RCC_HSI48_IsReady());
 8003806:	f7ff fee0 	bl	80035ca <LL_RCC_HSI48_IsReady>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d000      	beq.n	800381c <_Z18SystemClock_Configv+0x178>
 800381a:	e7f4      	b.n	8003806 <_Z18SystemClock_Configv+0x162>
  /* USER CODE END Smps */
}
 800381c:	bf00      	nop
 800381e:	37b8      	adds	r7, #184	; 0xb8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	58000400 	.word	0x58000400
 8003828:	58001400 	.word	0x58001400

0800382c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800383e:	f000 fe3f 	bl	80044c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40012c00 	.word	0x40012c00

08003850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003854:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003856:	e7fe      	b.n	8003856 <Error_Handler+0x6>

08003858 <LL_EXTI_DisableIT_0_31>:
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <LL_EXTI_DisableIT_0_31+0x28>)
 8003862:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	43db      	mvns	r3, r3
 800386a:	4905      	ldr	r1, [pc, #20]	; (8003880 <LL_EXTI_DisableIT_0_31+0x28>)
 800386c:	4013      	ands	r3, r2
 800386e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	58000800 	.word	0x58000800

08003884 <LL_EXTI_DisableIT_32_63>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <LL_EXTI_DisableIT_32_63+0x28>)
 800388e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	43db      	mvns	r3, r3
 8003896:	4905      	ldr	r1, [pc, #20]	; (80038ac <LL_EXTI_DisableIT_32_63+0x28>)
 8003898:	4013      	ands	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	58000800 	.word	0x58000800

080038b0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003908:	d101      	bne.n	800390e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800391e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800392e:	d101      	bne.n	8003934 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_AHB3_GRP1_EnableClock>:
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003954:	4313      	orrs	r3, r2
 8003956:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003964:	68fb      	ldr	r3, [r7, #12]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	605a      	str	r2, [r3, #4]
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	615a      	str	r2, [r3, #20]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	615a      	str	r2, [r3, #20]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	619a      	str	r2, [r3, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <LL_HSEM_1StepLock>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	3220      	adds	r2, #32
 8003a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4c:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <LL_HSEM_1StepLock+0x2c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d001      	beq.n	8003a56 <LL_HSEM_1StepLock+0x1e>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <LL_HSEM_1StepLock+0x20>
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	80000400 	.word	0x80000400

08003a68 <_Z6myMainv>:

uint16_t Tcounts = 0x83;  // set threshold for over temperature interrupt, 0x83 == 67072 counts

//uint16_t adc_data[4];

int myMain(void){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b0b0      	sub	sp, #192	; 0xc0
 8003a6c:	af08      	add	r7, sp, #32

	calipile_setup(CALIPILE_ADDRESS, NULL, NULL, &hi2c1);
 8003a6e:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <_Z6myMainv+0x15c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	2100      	movs	r1, #0
 8003a74:	200c      	movs	r0, #12
 8003a76:	f7fd f849 	bl	8000b0c <calipile_setup>
	calipile_wake();
 8003a7a:	f7fd f86d 	bl	8000b58 <calipile_wake>
	calipile_readEEPROM();
 8003a7e:	f7fd f9db 	bl	8000e38 <calipile_readEEPROM>
	calipile_initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
 8003a82:	4b51      	ldr	r3, [pc, #324]	; (8003bc8 <_Z6myMainv+0x160>)
 8003a84:	7818      	ldrb	r0, [r3, #0]
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <_Z6myMainv+0x164>)
 8003a88:	7819      	ldrb	r1, [r3, #0]
 8003a8a:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <_Z6myMainv+0x168>)
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	4b51      	ldr	r3, [pc, #324]	; (8003bd4 <_Z6myMainv+0x16c>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f7fd f87f 	bl	8000b94 <calipile_initMotion>
	calipile_initTempThr(Tcounts);  // choose something ~5% above TPAMB
 8003a96:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <_Z6myMainv+0x170>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd f8ce 	bl	8000c3c <calipile_initTempThr>

	light_begin(TCS34725_ADDRESS, NULL, NULL, &hi2c1, TCS34725_INTEGRATIONTIME_700MS, TCS34725_GAIN_1X);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <_Z6myMainv+0x15c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2029      	movs	r0, #41	; 0x29
 8003ab0:	f7ff fc06 	bl	80032c0 <light_begin>
		powerMeasSetup();
		HAL_Delay(100);

	#endif
#else
	HAL_TIM_Base_Start_IT(&htim2);
 8003ab4:	4849      	ldr	r0, [pc, #292]	; (8003bdc <_Z6myMainv+0x174>)
 8003ab6:	f006 fa11 	bl	8009edc <HAL_TIM_Base_Start_IT>

//	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_SET);
	HAL_TIM_Base_Start(&htim17);
 8003aba:	4849      	ldr	r0, [pc, #292]	; (8003be0 <_Z6myMainv+0x178>)
 8003abc:	f006 f9a0 	bl	8009e00 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4847      	ldr	r0, [pc, #284]	; (8003be0 <_Z6myMainv+0x178>)
 8003ac4:	f006 faba 	bl	800a03c <HAL_TIM_PWM_Start>

	Stepper motor_base(STEPS, AIN1_1_GPIO_Port, AIN1_1_Pin,
			AIN2_1_GPIO_Port, AIN2_1_Pin,
			BIN1_1_GPIO_Port, BIN1_1_Pin,
			BIN2_1_GPIO_Port, BIN2_1_Pin, &adc_data.mag_base, NON_INVERTED);
 8003ac8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003acc:	2301      	movs	r3, #1
 8003ace:	9307      	str	r3, [sp, #28]
 8003ad0:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <_Z6myMainv+0x17c>)
 8003ad2:	9306      	str	r3, [sp, #24]
 8003ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ad8:	9305      	str	r3, [sp, #20]
 8003ada:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <_Z6myMainv+0x180>)
 8003adc:	9304      	str	r3, [sp, #16]
 8003ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ae8:	9302      	str	r3, [sp, #8]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003afc:	f640 0104 	movw	r1, #2052	; 0x804
 8003b00:	f7fd fae2 	bl	80010c8 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_base.setSpeed(12);
 8003b04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b08:	210c      	movs	r1, #12
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fb1c 	bl	8001148 <_ZN7Stepper8setSpeedEl>
	motor_base.setStepBound(BASE_STEP_RANGE);
 8003b10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b14:	f641 010c 	movw	r1, #6156	; 0x180c
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd fb2d 	bl	8001178 <_ZN7Stepper12setStepBoundEl>

	Stepper motor_led(STEPS, AIN1_2_GPIO_Port, AIN1_2_Pin,
				AIN2_2_GPIO_Port, AIN2_2_Pin,
				BIN1_2_GPIO_Port, BIN1_2_Pin,
				BIN2_2_GPIO_Port, BIN2_2_Pin,  &adc_data.mag_led, INVERTED);
 8003b1e:	1d38      	adds	r0, r7, #4
 8003b20:	23ff      	movs	r3, #255	; 0xff
 8003b22:	9307      	str	r3, [sp, #28]
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <_Z6myMainv+0x184>)
 8003b26:	9306      	str	r3, [sp, #24]
 8003b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b2c:	9305      	str	r3, [sp, #20]
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <_Z6myMainv+0x180>)
 8003b30:	9304      	str	r3, [sp, #16]
 8003b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b36:	9303      	str	r3, [sp, #12]
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <_Z6myMainv+0x180>)
 8003b3a:	9302      	str	r3, [sp, #8]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2302      	movs	r3, #2
 8003b48:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003b4c:	f640 0104 	movw	r1, #2052	; 0x804
 8003b50:	f7fd faba 	bl	80010c8 <_ZN7StepperC1ElP12GPIO_TypeDeftS1_tS1_tS1_tPVth>
	motor_led.setSpeed(16);
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	2110      	movs	r1, #16
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd faf5 	bl	8001148 <_ZN7Stepper8setSpeedEl>
	motor_led.setStepBound(LED_STEP_RANGE);
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	f647 1123 	movw	r1, #31011	; 0x7923
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fb07 	bl	8001178 <_ZN7Stepper12setStepBoundEl>

	uint32_t counter = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 4);
 8003b70:	2204      	movs	r2, #4
 8003b72:	491c      	ldr	r1, [pc, #112]	; (8003be4 <_Z6myMainv+0x17c>)
 8003b74:	481e      	ldr	r0, [pc, #120]	; (8003bf0 <_Z6myMainv+0x188>)
 8003b76:	f001 f823 	bl	8004bc0 <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8003b7a:	2064      	movs	r0, #100	; 0x64
 8003b7c:	f000 fccc 	bl	8004518 <HAL_Delay>

	while (1)
		  {
			counter += 1;
 8003b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b84:	3301      	adds	r3, #1
 8003b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
//
//			startCal(0, 0, 0, 0, motor_base, motor_led);


			// apartment
			startCal(0.2, 0.98, 0.1, 0.3, motor_base, motor_led);
 8003b8a:	1d3a      	adds	r2, r7, #4
 8003b8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	eddf 1a17 	vldr	s3, [pc, #92]	; 8003bf4 <_Z6myMainv+0x18c>
 8003b98:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8003bf8 <_Z6myMainv+0x190>
 8003b9c:	eddf 0a17 	vldr	s1, [pc, #92]	; 8003bfc <_Z6myMainv+0x194>
 8003ba0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003c00 <_Z6myMainv+0x198>
 8003ba4:	f7fe f92c 	bl	8001e00 <startCal>


//			startCal(0.0, 0.15, 0.05, 0.2, motor_base, motor_led);

			// turn off spotlight
			HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_RESET);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2110      	movs	r1, #16
 8003bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb0:	f002 fcd2 	bl	8006558 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	480a      	ldr	r0, [pc, #40]	; (8003be0 <_Z6myMainv+0x178>)
 8003bb8:	f006 fb1a 	bl	800a1f0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim17);
 8003bbc:	4808      	ldr	r0, [pc, #32]	; (8003be0 <_Z6myMainv+0x178>)
 8003bbe:	f006 f965 	bl	8009e8c <HAL_TIM_Base_Stop>



			while(1){};
 8003bc2:	e7fe      	b.n	8003bc2 <_Z6myMainv+0x15a>
 8003bc4:	20004f88 	.word	0x20004f88
 8003bc8:	20000004 	.word	0x20000004
 8003bcc:	20000005 	.word	0x20000005
 8003bd0:	200003cc 	.word	0x200003cc
 8003bd4:	200003cd 	.word	0x200003cd
 8003bd8:	20000006 	.word	0x20000006
 8003bdc:	20005094 	.word	0x20005094
 8003be0:	20005048 	.word	0x20005048
 8003be4:	200003c4 	.word	0x200003c4
 8003be8:	48000400 	.word	0x48000400
 8003bec:	200003c6 	.word	0x200003c6
 8003bf0:	20004eb8 	.word	0x20004eb8
 8003bf4:	3e99999a 	.word	0x3e99999a
 8003bf8:	3dcccccd 	.word	0x3dcccccd
 8003bfc:	3f7ae148 	.word	0x3f7ae148
 8003c00:	3e4ccccd 	.word	0x3e4ccccd

08003c04 <_Z18Reset_BackupDomainv>:




void Reset_BackupDomain( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8003c08:	f7ff fe74 	bl	80038f4 <LL_RCC_IsActiveFlag_PINRST>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <_Z18Reset_BackupDomainv+0x1c>
 8003c12:	f7ff fe82 	bl	800391a <LL_RCC_IsActiveFlag_SFTRST>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <_Z18Reset_BackupDomainv+0x1c>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <_Z18Reset_BackupDomainv+0x1e>
 8003c20:	2300      	movs	r3, #0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <_Z18Reset_BackupDomainv+0x34>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8003c26:	f004 f989 	bl	8007f3c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8003c2a:	f004 f987 	bl	8007f3c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8003c2e:	f7ff fe3f 	bl	80038b0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8003c32:	f7ff fe4e 	bl	80038d2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
}
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_Z12Reset_Devicev>:

void Reset_Device( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8003c40:	f7ff ffe0 	bl	8003c04 <_Z18Reset_BackupDomainv>

  Reset_IPCC();
 8003c44:	f000 f802 	bl	8003c4c <_Z10Reset_IPCCv>
#endif

  return;
 8003c48:	bf00      	nop
}
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_Z10Reset_IPCCv>:

void Reset_IPCC( void )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8003c50:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c54:	f7ff fe74 	bl	8003940 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8003c58:	213f      	movs	r1, #63	; 0x3f
 8003c5a:	480c      	ldr	r0, [pc, #48]	; (8003c8c <_Z10Reset_IPCCv+0x40>)
 8003c5c:	f7ff fecf 	bl	80039fe <LL_C1_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8003c60:	213f      	movs	r1, #63	; 0x3f
 8003c62:	480a      	ldr	r0, [pc, #40]	; (8003c8c <_Z10Reset_IPCCv+0x40>)
 8003c64:	f7ff fed9 	bl	8003a1a <LL_C2_IPCC_ClearFlag_CHx>
                           IPCC,
                           LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                               | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8003c68:	213f      	movs	r1, #63	; 0x3f
 8003c6a:	4808      	ldr	r0, [pc, #32]	; (8003c8c <_Z10Reset_IPCCv+0x40>)
 8003c6c:	f7ff fe81 	bl	8003972 <LL_C1_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8003c70:	213f      	movs	r1, #63	; 0x3f
 8003c72:	4806      	ldr	r0, [pc, #24]	; (8003c8c <_Z10Reset_IPCCv+0x40>)
 8003c74:	f7ff fea0 	bl	80039b8 <LL_C2_IPCC_DisableTransmitChannel>
                                    IPCC,
                                    LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                        | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8003c78:	213f      	movs	r1, #63	; 0x3f
 8003c7a:	4804      	ldr	r0, [pc, #16]	; (8003c8c <_Z10Reset_IPCCv+0x40>)
 8003c7c:	f7ff fe8b 	bl	8003996 <LL_C1_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8003c80:	213f      	movs	r1, #63	; 0x3f
 8003c82:	4802      	ldr	r0, [pc, #8]	; (8003c8c <_Z10Reset_IPCCv+0x40>)
 8003c84:	f7ff feaa 	bl	80039dc <LL_C2_IPCC_DisableReceiveChannel>
                                   IPCC,
                                   LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
                                       | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8003c88:	bf00      	nop
}
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	58000c00 	.word	0x58000c00

08003c90 <_Z9Init_Extiv>:

void Init_Exti( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	f7ff fdde 	bl	8003858 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8003c9c:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8003ca0:	f7ff fdf0 	bl	8003884 <LL_EXTI_DisableIT_32_63>

  return;
 8003ca4:	bf00      	nop
}
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_Z7initClkv>:

  return;
}

void initClk (void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b092      	sub	sp, #72	; 0x48
 8003cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef st_oscInit = {0};
 8003cae:	463b      	mov	r3, r7
 8003cb0:	2248      	movs	r2, #72	; 0x48
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f012 ffc6 	bl	8016c46 <memset>

  /* Get mutex */
  LL_HSEM_1StepLock(HSEM, 5);
 8003cba:	2105      	movs	r1, #5
 8003cbc:	4807      	ldr	r0, [pc, #28]	; (8003cdc <_Z7initClkv+0x34>)
 8003cbe:	f7ff febb 	bl	8003a38 <LL_HSEM_1StepLock>

  st_oscInit.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8003cc2:	2340      	movs	r3, #64	; 0x40
 8003cc4:	603b      	str	r3, [r7, #0]
  st_oscInit.HSI48State     = RCC_HSI48_ON; /* Used by USB */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_RCC_OscConfig(&st_oscInit);
 8003cca:	463b      	mov	r3, r7
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f004 fce5 	bl	800869c <HAL_RCC_OscConfig>
}
 8003cd2:	bf00      	nop
 8003cd4:	3748      	adds	r7, #72	; 0x48
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	58001400 	.word	0x58001400

08003ce0 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0

}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_RCC_EnableRTC>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d06:	bf00      	nop
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_APB1_GRP1_EnableClock>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d34:	68fb      	ldr	r3, [r7, #12]
}
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d4a:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <MX_RTC_Init+0x50>)
 8003d4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d56:	220f      	movs	r2, #15
 8003d58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003d60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d7a:	4805      	ldr	r0, [pc, #20]	; (8003d90 <MX_RTC_Init+0x4c>)
 8003d7c:	f005 fefb 	bl	8009b76 <HAL_RTC_Init>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003d86:	f7ff fd63 	bl	8003850 <Error_Handler>
  }

}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20004fd8 	.word	0x20004fd8
 8003d94:	40002800 	.word	0x40002800

08003d98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <HAL_RTC_MspInit+0x28>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d105      	bne.n	8003db6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003daa:	f7ff ffa0 	bl	8003cee <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003dae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003db2:	f7ff ffad 	bl	8003d10 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40002800 	.word	0x40002800

08003dc4 <MsgTask>:

char* endOfLine = "\n\r";

#ifndef SOLAR_SENSOR_NODE
void MsgTask(void *argument)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	struct MeasMsg msg;

	while(1){
		// grab message from queue
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8003dcc:	4b07      	ldr	r3, [pc, #28]	; (8003dec <MsgTask+0x28>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	f107 010c 	add.w	r1, r7, #12
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f00c fda9 	bl	8010930 <osMessageQueueGet>

		// operate on said message
		measMsgReceivedFromNode(&msg);
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f804 	bl	8003df0 <measMsgReceivedFromNode>
		osMessageQueueGet (msgQueueHandle, &msg, NULL, osWaitForever);
 8003de8:	e7f0      	b.n	8003dcc <MsgTask+0x8>
 8003dea:	bf00      	nop
 8003dec:	2000032c 	.word	0x2000032c

08003df0 <measMsgReceivedFromNode>:
	}
}
#endif

void measMsgReceivedFromNode(struct MeasMsg* msg){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

	// send over UART if USB UART active
#if USB_UART_ACTIVE
	int8_t retry = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]

	memcpy((struct MeasMsg*) &serialMsg.measMsg, msg, sizeof(struct MeasMsg));
 8003dfc:	2214      	movs	r2, #20
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4811      	ldr	r0, [pc, #68]	; (8003e48 <measMsgReceivedFromNode+0x58>)
 8003e02:	f012 ff15 	bl	8016c30 <memcpy>

	/* the "-2" in the size is a hack-ish way of removing the byte padding for the python
	 	 data ingester doesn't screw up*/
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 8003e06:	e00d      	b.n	8003e24 <measMsgReceivedFromNode+0x34>
			if(retry == 5){
 8003e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d102      	bne.n	8003e16 <measMsgReceivedFromNode+0x26>
				retry = -1;
 8003e10:	23ff      	movs	r3, #255	; 0xff
 8003e12:	73fb      	strb	r3, [r7, #15]
				break;
 8003e14:	e00d      	b.n	8003e32 <measMsgReceivedFromNode+0x42>
			}
			HAL_Delay(1);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f000 fb7e 	bl	8004518 <HAL_Delay>
			retry+=1;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) &serialMsg, sizeof(serialMsg)-2) != USBD_OK){
 8003e24:	2116      	movs	r1, #22
 8003e26:	4808      	ldr	r0, [pc, #32]	; (8003e48 <measMsgReceivedFromNode+0x58>)
 8003e28:	f011 fa06 	bl	8015238 <CDC_Transmit_FS>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1ea      	bne.n	8003e08 <measMsgReceivedFromNode+0x18>

	// TODO check if power rating in table is lower than current one
	//		if so, replace and record current angle measurements

	// TODO if all expected nodes have replied, move to next Spotlight position
	osThreadFlagsSet (defaultTaskHandle, CAL_THREAD_FLAG);
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <measMsgReceivedFromNode+0x5c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2103      	movs	r1, #3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f00c f8b7 	bl	800ffac <osThreadFlagsSet>
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000008 	.word	0x20000008
 8003e4c:	20000324 	.word	0x20000324

08003e50 <sendSensorMeas_USB>:

void sendSensorMeas_USB(struct SensorSamples* msg){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

	// send over UART if USB UART active
#if USB_UART_ACTIVE
	int8_t retry = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]

	memcpy((struct SensorSamples*) &serialSensorMsg.sensorMeasMsg, msg, sizeof(struct SensorSamples));
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	480e      	ldr	r0, [pc, #56]	; (8003e9c <sendSensorMeas_USB+0x4c>)
 8003e62:	f012 fee5 	bl	8016c30 <memcpy>

	/* the "-2" in the size is a hack-ish way of removing the byte padding for the python
	 	 data ingester doesn't screw up*/
	while(CDC_Transmit_FS((uint8_t* ) &serialSensorMsg, sizeof(serialSensorMsg)-2) != USBD_OK){
 8003e66:	e00d      	b.n	8003e84 <sendSensorMeas_USB+0x34>
			if(retry == 5){
 8003e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d102      	bne.n	8003e76 <sendSensorMeas_USB+0x26>
				retry = -1;
 8003e70:	23ff      	movs	r3, #255	; 0xff
 8003e72:	73fb      	strb	r3, [r7, #15]
				break;
 8003e74:	e00d      	b.n	8003e92 <sendSensorMeas_USB+0x42>
			}
			HAL_Delay(1);
 8003e76:	2001      	movs	r0, #1
 8003e78:	f000 fb4e 	bl	8004518 <HAL_Delay>
			retry+=1;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	73fb      	strb	r3, [r7, #15]
	while(CDC_Transmit_FS((uint8_t* ) &serialSensorMsg, sizeof(serialSensorMsg)-2) != USBD_OK){
 8003e84:	2122      	movs	r1, #34	; 0x22
 8003e86:	4805      	ldr	r0, [pc, #20]	; (8003e9c <sendSensorMeas_USB+0x4c>)
 8003e88:	f011 f9d6 	bl	8015238 <CDC_Transmit_FS>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ea      	bne.n	8003e68 <sendSensorMeas_USB+0x18>

		}

#endif
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000020 	.word	0x20000020

08003ea0 <LL_AHB3_GRP1_EnableClock>:
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003ed6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003eda:	f7ff ffe1 	bl	8003ea0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ede:	2200      	movs	r2, #0
 8003ee0:	210f      	movs	r1, #15
 8003ee2:	f06f 0001 	mvn.w	r0, #1
 8003ee6:	f001 fefc 	bl	8005ce2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2105      	movs	r1, #5
 8003eee:	202e      	movs	r0, #46	; 0x2e
 8003ef0:	f001 fef7 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003ef4:	202e      	movs	r0, #46	; 0x2e
 8003ef6:	f001 ff0e 	bl	8005d16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 15, 0);
 8003efa:	2200      	movs	r2, #0
 8003efc:	210f      	movs	r1, #15
 8003efe:	202c      	movs	r0, #44	; 0x2c
 8003f00:	f001 feef 	bl	8005ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 15, 0);
 8003f04:	2200      	movs	r2, #0
 8003f06:	210f      	movs	r1, #15
 8003f08:	202d      	movs	r0, #45	; 0x2d
 8003f0a:	f001 feea 	bl	8005ce2 <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4013      	ands	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08c      	sub	sp, #48	; 0x30
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8003f54:	2200      	movs	r2, #0
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	2019      	movs	r0, #25
 8003f5a:	f001 fec2 	bl	8005ce2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f5e:	2019      	movs	r0, #25
 8003f60:	f001 fed9 	bl	8005d16 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f68:	f7ff ffd3 	bl	8003f12 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f6c:	f107 0208 	add.w	r2, r7, #8
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f005 f8f0 	bl	800915c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f005 f8d8 	bl	8009130 <HAL_RCC_GetPCLK2Freq>
 8003f80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <HAL_InitTick+0x8c>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0c9b      	lsrs	r3, r3, #18
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_InitTick+0x90>)
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_InitTick+0x94>)
 8003f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <HAL_InitTick+0x90>)
 8003f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <HAL_InitTick+0x90>)
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_InitTick+0x90>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_InitTick+0x90>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003fb0:	4808      	ldr	r0, [pc, #32]	; (8003fd4 <HAL_InitTick+0x90>)
 8003fb2:	f005 fece 	bl	8009d52 <HAL_TIM_Base_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003fbc:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <HAL_InitTick+0x90>)
 8003fbe:	f005 ff8d 	bl	8009edc <HAL_TIM_Base_Start_IT>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	e000      	b.n	8003fc8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3730      	adds	r7, #48	; 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	431bde83 	.word	0x431bde83
 8003fd4:	20004ffc 	.word	0x20004ffc
 8003fd8:	40012c00 	.word	0x40012c00

08003fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fe0:	e7fe      	b.n	8003fe0 <NMI_Handler+0x4>

08003fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fe6:	e7fe      	b.n	8003fe6 <HardFault_Handler+0x4>

08003fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fec:	e7fe      	b.n	8003fec <MemManage_Handler+0x4>

08003fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff2:	e7fe      	b.n	8003ff2 <BusFault_Handler+0x4>

08003ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <UsageFault_Handler+0x4>

08003ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800400c:	4802      	ldr	r0, [pc, #8]	; (8004018 <DMA1_Channel1_IRQHandler+0x10>)
 800400e:	f001 ffe2 	bl	8005fd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20004f1c 	.word	0x20004f1c

0800401c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <ADC1_IRQHandler+0x10>)
 8004022:	f000 fe51 	bl	8004cc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20004eb8 	.word	0x20004eb8

08004030 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004034:	4802      	ldr	r0, [pc, #8]	; (8004040 <USB_LP_IRQHandler+0x10>)
 8004036:	f003 f919 	bl	800726c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	2000663c 	.word	0x2000663c

08004044 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004048:	4802      	ldr	r0, [pc, #8]	; (8004054 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800404a:	f006 f959 	bl	800a300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20004ffc 	.word	0x20004ffc

08004058 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800405c:	f002 fa94 	bl	8006588 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}

08004064 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8004068:	f7fe fca0 	bl	80029ac <HW_TS_RTC_Wakeup_Handler>
}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}

08004070 <IPCC_C1_TX_IRQHandler>:
void IPCC_C1_TX_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8004074:	f010 fea2 	bl	8014dbc <HW_IPCC_Tx_Handler>
  return;
 8004078:	bf00      	nop
}
 800407a:	bd80      	pop	{r7, pc}

0800407c <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8004080:	f010 fe42 	bl	8014d08 <HW_IPCC_Rx_Handler>
  return;
 8004084:	bf00      	nop
}
 8004086:	bd80      	pop	{r7, pc}

08004088 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8004088:	b40c      	push	{r2, r3}
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	460a      	mov	r2, r1
 8004094:	71fb      	strb	r3, [r7, #7]
 8004096:	4613      	mov	r3, r2
 8004098:	71bb      	strb	r3, [r7, #6]
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	b002      	add	sp, #8
 80040a6:	4770      	bx	lr

080040a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80040ac:	4b26      	ldr	r3, [pc, #152]	; (8004148 <SystemInit+0xa0>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80040b2:	4b25      	ldr	r3, [pc, #148]	; (8004148 <SystemInit+0xa0>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	4a23      	ldr	r2, [pc, #140]	; (8004148 <SystemInit+0xa0>)
 80040ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80040da:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e6:	4b19      	ldr	r3, [pc, #100]	; (800414c <SystemInit+0xa4>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80040ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f8:	f023 0305 	bic.w	r3, r3, #5
 80040fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <SystemInit+0xa8>)
 800411a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800411c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <SystemInit+0xa8>)
 8004122:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000ed00 	.word	0xe000ed00
 800414c:	faf6fefb 	.word	0xfaf6fefb
 8004150:	22041000 	.word	0x22041000

08004154 <LL_AHB2_GRP1_EnableClock>:
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4313      	orrs	r3, r2
 800416a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4013      	ands	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004178:	68fb      	ldr	r3, [r7, #12]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_APB1_GRP1_EnableClock>:
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4313      	orrs	r3, r2
 800419c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_APB2_GRP1_EnableClock>:
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4013      	ands	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041dc:	68fb      	ldr	r3, [r7, #12]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	605a      	str	r2, [r3, #4]
 80041fc:	609a      	str	r2, [r3, #8]
 80041fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800420a:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <MX_TIM2_Init+0x98>)
 800420c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004210:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <MX_TIM2_Init+0x98>)
 8004214:	221f      	movs	r2, #31
 8004216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004218:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <MX_TIM2_Init+0x98>)
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <MX_TIM2_Init+0x98>)
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <MX_TIM2_Init+0x98>)
 8004228:	2200      	movs	r2, #0
 800422a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <MX_TIM2_Init+0x98>)
 800422e:	2200      	movs	r2, #0
 8004230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004232:	4814      	ldr	r0, [pc, #80]	; (8004284 <MX_TIM2_Init+0x98>)
 8004234:	f005 fd8d 	bl	8009d52 <HAL_TIM_Base_Init>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800423e:	f7ff fb07 	bl	8003850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004246:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004248:	f107 0310 	add.w	r3, r7, #16
 800424c:	4619      	mov	r1, r3
 800424e:	480d      	ldr	r0, [pc, #52]	; (8004284 <MX_TIM2_Init+0x98>)
 8004250:	f006 fa86 	bl	800a760 <HAL_TIM_ConfigClockSource>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800425a:	f7ff faf9 	bl	8003850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4806      	ldr	r0, [pc, #24]	; (8004284 <MX_TIM2_Init+0x98>)
 800426c:	f006 fefe 	bl	800b06c <HAL_TIMEx_MasterConfigSynchronization>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004276:	f7ff faeb 	bl	8003850 <Error_Handler>
  }

}
 800427a:	bf00      	nop
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20005094 	.word	0x20005094

08004288 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b094      	sub	sp, #80	; 0x50
 800428c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800428e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	611a      	str	r2, [r3, #16]
 800429e:	615a      	str	r2, [r3, #20]
 80042a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042a2:	463b      	mov	r3, r7
 80042a4:	2234      	movs	r2, #52	; 0x34
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f012 fccc 	bl	8016c46 <memset>

  htim17.Instance = TIM17;
 80042ae:	4b31      	ldr	r3, [pc, #196]	; (8004374 <MX_TIM17_Init+0xec>)
 80042b0:	4a31      	ldr	r2, [pc, #196]	; (8004378 <MX_TIM17_Init+0xf0>)
 80042b2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3199;
 80042b4:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <MX_TIM17_Init+0xec>)
 80042b6:	f640 427f 	movw	r2, #3199	; 0xc7f
 80042ba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042bc:	4b2d      	ldr	r3, [pc, #180]	; (8004374 <MX_TIM17_Init+0xec>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 80042c2:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <MX_TIM17_Init+0xec>)
 80042c4:	2264      	movs	r2, #100	; 0x64
 80042c6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c8:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <MX_TIM17_Init+0xec>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <MX_TIM17_Init+0xec>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042d4:	4b27      	ldr	r3, [pc, #156]	; (8004374 <MX_TIM17_Init+0xec>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80042da:	4826      	ldr	r0, [pc, #152]	; (8004374 <MX_TIM17_Init+0xec>)
 80042dc:	f005 fd39 	bl	8009d52 <HAL_TIM_Base_Init>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80042e6:	f7ff fab3 	bl	8003850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80042ea:	4822      	ldr	r0, [pc, #136]	; (8004374 <MX_TIM17_Init+0xec>)
 80042ec:	f005 fe44 	bl	8009f78 <HAL_TIM_PWM_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80042f6:	f7ff faab 	bl	8003850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042fa:	2360      	movs	r3, #96	; 0x60
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004302:	2300      	movs	r3, #0
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004306:	2300      	movs	r3, #0
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800430a:	2300      	movs	r3, #0
 800430c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004316:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800431a:	2200      	movs	r2, #0
 800431c:	4619      	mov	r1, r3
 800431e:	4815      	ldr	r0, [pc, #84]	; (8004374 <MX_TIM17_Init+0xec>)
 8004320:	f006 f90e 	bl	800a540 <HAL_TIM_PWM_ConfigChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800432a:	f7ff fa91 	bl	8003850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800432e:	2300      	movs	r3, #0
 8004330:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800434c:	2300      	movs	r3, #0
 800434e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004350:	463b      	mov	r3, r7
 8004352:	4619      	mov	r1, r3
 8004354:	4807      	ldr	r0, [pc, #28]	; (8004374 <MX_TIM17_Init+0xec>)
 8004356:	f006 fee9 	bl	800b12c <HAL_TIMEx_ConfigBreakDeadTime>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8004360:	f7ff fa76 	bl	8003850 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim17);
 8004364:	4803      	ldr	r0, [pc, #12]	; (8004374 <MX_TIM17_Init+0xec>)
 8004366:	f000 f825 	bl	80043b4 <HAL_TIM_MspPostInit>

}
 800436a:	bf00      	nop
 800436c:	3750      	adds	r7, #80	; 0x50
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20005048 	.word	0x20005048
 8004378:	40014800 	.word	0x40014800

0800437c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d103      	bne.n	8004396 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800438e:	2001      	movs	r0, #1
 8004390:	f7ff fef9 	bl	8004186 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004394:	e008      	b.n	80043a8 <HAL_TIM_Base_MspInit+0x2c>
  else if(tim_baseHandle->Instance==TIM17)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <HAL_TIM_Base_MspInit+0x34>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d103      	bne.n	80043a8 <HAL_TIM_Base_MspInit+0x2c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80043a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80043a4:	f7ff ff08 	bl	80041b8 <LL_APB2_GRP1_EnableClock>
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40014800 	.word	0x40014800

080043b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM17)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <HAL_TIM_MspPostInit+0x54>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d113      	bne.n	80043fe <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d6:	2002      	movs	r0, #2
 80043d8:	f7ff febc 	bl	8004154 <LL_AHB2_GRP1_EnableClock>
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80043dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	2302      	movs	r3, #2
 80043e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80043ee:	230e      	movs	r3, #14
 80043f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80043f2:	f107 030c 	add.w	r3, r7, #12
 80043f6:	4619      	mov	r1, r3
 80043f8:	4804      	ldr	r0, [pc, #16]	; (800440c <HAL_TIM_MspPostInit+0x58>)
 80043fa:	f001 ff3d 	bl	8006278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80043fe:	bf00      	nop
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40014800 	.word	0x40014800
 800440c:	48000400 	.word	0x48000400

08004410 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004410:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004412:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004414:	3304      	adds	r3, #4

08004416 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004416:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004418:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800441a:	d3f9      	bcc.n	8004410 <CopyDataInit>
  bx lr
 800441c:	4770      	bx	lr

0800441e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800441e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004420:	3004      	adds	r0, #4

08004422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004422:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004424:	d3fb      	bcc.n	800441e <FillZerobss>
  bx lr
 8004426:	4770      	bx	lr

08004428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004428:	480c      	ldr	r0, [pc, #48]	; (800445c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800442a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800442c:	f7ff fe3c 	bl	80040a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004430:	480b      	ldr	r0, [pc, #44]	; (8004460 <LoopForever+0x8>)
 8004432:	490c      	ldr	r1, [pc, #48]	; (8004464 <LoopForever+0xc>)
 8004434:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <LoopForever+0x10>)
 8004436:	2300      	movs	r3, #0
 8004438:	f7ff ffed 	bl	8004416 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800443c:	480b      	ldr	r0, [pc, #44]	; (800446c <LoopForever+0x14>)
 800443e:	490c      	ldr	r1, [pc, #48]	; (8004470 <LoopForever+0x18>)
 8004440:	2300      	movs	r3, #0
 8004442:	f7ff ffee 	bl	8004422 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004446:	480b      	ldr	r0, [pc, #44]	; (8004474 <LoopForever+0x1c>)
 8004448:	490b      	ldr	r1, [pc, #44]	; (8004478 <LoopForever+0x20>)
 800444a:	2300      	movs	r3, #0
 800444c:	f7ff ffe9 	bl	8004422 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004450:	f012 fbca 	bl	8016be8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004454:	f7ff f8fa 	bl	800364c <main>

08004458 <LoopForever>:

LoopForever:
  b LoopForever
 8004458:	e7fe      	b.n	8004458 <LoopForever>
 800445a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800445c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004460:	20000004 	.word	0x20000004
 8004464:	2000024c 	.word	0x2000024c
 8004468:	08017270 	.word	0x08017270
  INIT_BSS _sbss, _ebss
 800446c:	20000300 	.word	0x20000300
 8004470:	200068b0 	.word	0x200068b0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004474:	200300e0 	.word	0x200300e0
 8004478:	20030b57 	.word	0x20030b57

0800447c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800447c:	e7fe      	b.n	800447c <AES1_IRQHandler>
	...

08004480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_Init+0x3c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <HAL_Init+0x3c>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004496:	2003      	movs	r0, #3
 8004498:	f001 fc18 	bl	8005ccc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800449c:	2000      	movs	r0, #0
 800449e:	f7ff fd51 	bl	8003f44 <HAL_InitTick>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	71fb      	strb	r3, [r7, #7]
 80044ac:	e001      	b.n	80044b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044ae:	f7ff fd10 	bl	8003ed2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044b2:	79fb      	ldrb	r3, [r7, #7]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	58004000 	.word	0x58004000

080044c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_IncTick+0x20>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_IncTick+0x24>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <HAL_IncTick+0x24>)
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	2000004c 	.word	0x2000004c
 80044e4:	200050e0 	.word	0x200050e0

080044e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return uwTick;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_GetTick+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	200050e0 	.word	0x200050e0

08004500 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_GetTickPrio+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000048 	.word	0x20000048

08004518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8004520:	f7ff ffe2 	bl	80044e8 <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d005      	beq.n	800453e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_Delay+0x40>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800453e:	bf00      	nop
 8004540:	f7ff ffd2 	bl	80044e8 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	429a      	cmp	r2, r3
 800454e:	d8f7      	bhi.n	8004540 <HAL_Delay+0x28>
    {
    }
  }
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	2000004c 	.word	0x2000004c

0800455c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	609a      	str	r2, [r3, #8]
#endif
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3360      	adds	r3, #96	; 0x60
 80045d6:	461a      	mov	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <LL_ADC_SetOffset+0x44>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	03fff000 	.word	0x03fff000

0800460c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3360      	adds	r3, #96	; 0x60
 800461a:	461a      	mov	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3360      	adds	r3, #96	; 0x60
 8004648:	461a      	mov	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	431a      	orrs	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004686:	2300      	movs	r3, #0
#endif
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3330      	adds	r3, #48	; 0x30
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	4413      	add	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	211f      	movs	r1, #31
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0e9b      	lsrs	r3, r3, #26
 80046cc:	f003 011f 	and.w	r1, r3, #31
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	fa01 f303 	lsl.w	r3, r1, r3
 80046da:	431a      	orrs	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 80046e0:	bf00      	nop
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0303 	and.w	r3, r3, #3
#endif
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004714:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800472e:	b480      	push	{r7}
 8004730:	b087      	sub	sp, #28
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3314      	adds	r3, #20
 800473e:	461a      	mov	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	0e5b      	lsrs	r3, r3, #25
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	4413      	add	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0d1b      	lsrs	r3, r3, #20
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2107      	movs	r1, #7
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	0d1b      	lsrs	r3, r3, #20
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	431a      	orrs	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0318 	and.w	r3, r3, #24
 80047a6:	4908      	ldr	r1, [pc, #32]	; (80047c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80047a8:	40d9      	lsrs	r1, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	400b      	ands	r3, r1
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	0007ffff 	.word	0x0007ffff

080047cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80047dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6093      	str	r3, [r2, #8]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004804:	d101      	bne.n	800480a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800482c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004854:	d101      	bne.n	800485a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <LL_ADC_IsEnabled+0x18>
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <LL_ADC_IsEnabled+0x1a>
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048ca:	f043 0204 	orr.w	r2, r3, #4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d101      	bne.n	80048f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d101      	bne.n	800491c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800493c:	2300      	movs	r3, #0
 800493e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e12c      	b.n	8004ba4 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fd f84d 	bl	80019f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff3d 	bl	80047f0 <LL_ADC_IsDeepPowerDownEnabled>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ff23 	bl	80047cc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff ff58 	bl	8004840 <LL_ADC_IsInternalRegulatorEnabled>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d113      	bne.n	80049be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ff3c 	bl	8004818 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80049a0:	4b82      	ldr	r3, [pc, #520]	; (8004bac <HAL_ADC_Init+0x280>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	099b      	lsrs	r3, r3, #6
 80049a6:	4a82      	ldr	r2, [pc, #520]	; (8004bb0 <HAL_ADC_Init+0x284>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80049b0:	e002      	b.n	80049b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f9      	bne.n	80049b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff3c 	bl	8004840 <LL_ADC_IsInternalRegulatorEnabled>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10d      	bne.n	80049ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ff75 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 80049f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f040 80c7 	bne.w	8004b92 <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 80c3 	bne.w	8004b92 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a14:	f043 0202 	orr.w	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff35 	bl	8004890 <LL_ADC_IsEnabled>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a2c:	4861      	ldr	r0, [pc, #388]	; (8004bb4 <HAL_ADC_Init+0x288>)
 8004a2e:	f7ff ff2f 	bl	8004890 <LL_ADC_IsEnabled>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	485e      	ldr	r0, [pc, #376]	; (8004bb8 <HAL_ADC_Init+0x28c>)
 8004a40:	f7ff fd8c 	bl	800455c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7e5b      	ldrb	r3, [r3, #25]
 8004a48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004a54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004a5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a62:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8004a64:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d106      	bne.n	8004a84 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	045b      	lsls	r3, r3, #17
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	4b45      	ldr	r3, [pc, #276]	; (8004bbc <HAL_ADC_Init+0x290>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff10 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 8004abe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff ff1d 	bl	8004904 <LL_ADC_INJ_IsConversionOngoing>
 8004aca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13d      	bne.n	8004b4e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d13a      	bne.n	8004b4e <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004adc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ae4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af4:	f023 0302 	bic.w	r3, r3, #2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	69b9      	ldr	r1, [r7, #24]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d118      	bne.n	8004b3e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b16:	f023 0304 	bic.w	r3, r3, #4
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	611a      	str	r2, [r3, #16]
 8004b3c:	e007      	b.n	8004b4e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d10c      	bne.n	8004b70 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	f023 010f 	bic.w	r1, r3, #15
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004b6e:	e007      	b.n	8004b80 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 020f 	bic.w	r2, r2, #15
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f023 0303 	bic.w	r3, r3, #3
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54
 8004b90:	e007      	b.n	8004ba2 <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000044 	.word	0x20000044
 8004bb0:	053e2d63 	.word	0x053e2d63
 8004bb4:	50040000 	.word	0x50040000
 8004bb8:	50040300 	.word	0x50040300
 8004bbc:	fff0c007 	.word	0xfff0c007

08004bc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fe84 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d167      	bne.n	8004cac <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_ADC_Start_DMA+0x2a>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e063      	b.n	8004cb2 <HAL_ADC_Start_DMA+0xf2>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fe0a 	bl	800580c <ADC_Enable>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d14f      	bne.n	8004ca2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	f023 0206 	bic.w	r2, r3, #6
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8004c2e:	e002      	b.n	8004c36 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <HAL_ADC_Start_DMA+0xfc>)
 8004c3c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_ADC_Start_DMA+0x100>)
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <HAL_ADC_Start_DMA+0x104>)
 8004c4c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	221c      	movs	r2, #28
 8004c54:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0210 	orr.w	r2, r2, #16
 8004c6c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3340      	adds	r3, #64	; 0x40
 8004c88:	4619      	mov	r1, r3
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f001 f927 	bl	8005ee0 <HAL_DMA_Start_IT>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fe0b 	bl	80048b6 <LL_ADC_REG_StartConversion>
 8004ca0:	e006      	b.n	8004cb0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004caa:	e001      	b.n	8004cb0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
 8004cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	08005901 	.word	0x08005901
 8004cc0:	080059d9 	.word	0x080059d9
 8004cc4:	080059f5 	.word	0x080059f5

08004cc8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d017      	beq.n	8004d1e <HAL_ADC_IRQHandler+0x56>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d012      	beq.n	8004d1e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d08:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 feb1 	bl	8005a78 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <HAL_ADC_IRQHandler+0x6a>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d05d      	beq.n	8004df8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d058      	beq.n	8004df8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d105      	bne.n	8004d5e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fc83 	bl	800466e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03d      	beq.n	8004dea <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7c:	d035      	beq.n	8004dea <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d12e      	bne.n	8004dea <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fda4 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d11a      	bne.n	8004dd2 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 020c 	bic.w	r2, r2, #12
 8004daa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d112      	bne.n	8004dea <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	f043 0201 	orr.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
 8004dd0:	e00b      	b.n	8004dea <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	f043 0210 	orr.w	r2, r3, #16
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	f043 0201 	orr.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f922 	bl	8005034 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	220c      	movs	r2, #12
 8004df6:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d004      	beq.n	8004e0c <HAL_ADC_IRQHandler+0x144>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d074      	beq.n	8004f00 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d06f      	beq.n	8004f00 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fc63 	bl	8004708 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004e42:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fc10 	bl	800466e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e4e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d049      	beq.n	8004ef2 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_ADC_IRQHandler+0x1b0>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d041      	beq.n	8004ef2 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d13c      	bne.n	8004ef2 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d135      	bne.n	8004ef2 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d12e      	bne.n	8004ef2 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fd33 	bl	8004904 <LL_ADC_INJ_IsConversionOngoing>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d11a      	bne.n	8004eda <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004eb2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d112      	bne.n	8004ef2 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
 8004ed8:	e00b      	b.n	8004ef2 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	f043 0210 	orr.w	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fd98 	bl	8005a28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2260      	movs	r2, #96	; 0x60
 8004efe:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d011      	beq.n	8004f2e <HAL_ADC_IRQHandler+0x266>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f89b 	bl	800505c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2280      	movs	r2, #128	; 0x80
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d012      	beq.n	8004f5e <HAL_ADC_IRQHandler+0x296>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fd7e 	bl	8005a50 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d012      	beq.n	8004f8e <HAL_ADC_IRQHandler+0x2c6>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fd70 	bl	8005a64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02b      	beq.n	8004ff0 <HAL_ADC_IRQHandler+0x328>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d026      	beq.n	8004ff0 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8004faa:	2301      	movs	r3, #1
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	e009      	b.n	8004fc4 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fb99 	bl	80046ec <LL_ADC_REG_GetDMATransfer>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	f043 0202 	orr.w	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f844 	bl	8005070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d018      	beq.n	800502c <HAL_ADC_IRQHandler+0x364>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005000:	2b00      	cmp	r3, #0
 8005002:	d013      	beq.n	800502c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f043 0208 	orr.w	r2, r3, #8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005024:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fd08 	bl	8005a3c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800502c:	bf00      	nop
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b0b6      	sub	sp, #216	; 0xd8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x22>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e39e      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x760>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fc13 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 8383 	bne.w	80057c6 <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	6859      	ldr	r1, [r3, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	f7ff fae1 	bl	8004694 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fc01 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 80050dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fc0d 	bl	8004904 <LL_ADC_INJ_IsConversionOngoing>
 80050ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 81a6 	bne.w	8005444 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 81a1 	bne.w	8005444 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	461a      	mov	r2, r3
 8005110:	f7ff fb0d 	bl	800472e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	08db      	lsrs	r3, r3, #3
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b04      	cmp	r3, #4
 8005134:	d00a      	beq.n	800514c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6919      	ldr	r1, [r3, #16]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005146:	f7ff fa3d 	bl	80045c4 <LL_ADC_SetOffset>
 800514a:	e17b      	b.n	8005444 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fa5a 	bl	800460c <LL_ADC_GetOffsetChannel>
 8005158:	4603      	mov	r3, r0
 800515a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <HAL_ADC_ConfigChannel+0xf4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff fa4f 	bl	800460c <LL_ADC_GetOffsetChannel>
 800516e:	4603      	mov	r3, r0
 8005170:	0e9b      	lsrs	r3, r3, #26
 8005172:	f003 021f 	and.w	r2, r3, #31
 8005176:	e01e      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x132>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fa44 	bl	800460c <LL_ADC_GetOffsetChannel>
 8005184:	4603      	mov	r3, r0
 8005186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8005196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800519a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800519e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 80051a6:	2320      	movs	r3, #32
 80051a8:	e004      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80051aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051ae:	fab3 f383 	clz	r3, r3
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x14a>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	0e9b      	lsrs	r3, r3, #26
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	e018      	b.n	8005200 <HAL_ADC_ConfigChannel+0x17c>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051da:	fa93 f3a3 	rbit	r3, r3
 80051de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80051e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80051ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80051f2:	2320      	movs	r3, #32
 80051f4:	e004      	b.n	8005200 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80051f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051fa:	fab3 f383 	clz	r3, r3
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	429a      	cmp	r2, r3
 8005202:	d106      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fa13 	bl	8004638 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff f9f7 	bl	800460c <LL_ADC_GetOffsetChannel>
 800521e:	4603      	mov	r3, r0
 8005220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <HAL_ADC_ConfigChannel+0x1ba>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff f9ec 	bl	800460c <LL_ADC_GetOffsetChannel>
 8005234:	4603      	mov	r3, r0
 8005236:	0e9b      	lsrs	r3, r3, #26
 8005238:	f003 021f 	and.w	r2, r3, #31
 800523c:	e01e      	b.n	800527c <HAL_ADC_ConfigChannel+0x1f8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2101      	movs	r1, #1
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff f9e1 	bl	800460c <LL_ADC_GetOffsetChannel>
 800524a:	4603      	mov	r3, r0
 800524c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005250:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005254:	fa93 f3a3 	rbit	r3, r3
 8005258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800525c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800526c:	2320      	movs	r3, #32
 800526e:	e004      	b.n	800527a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005274:	fab3 f383 	clz	r3, r3
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x210>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	0e9b      	lsrs	r3, r3, #26
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	e018      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x242>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80052a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80052b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80052b8:	2320      	movs	r3, #32
 80052ba:	e004      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80052bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052c0:	fab3 f383 	clz	r3, r3
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d106      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f9b0 	bl	8004638 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2102      	movs	r1, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff f994 	bl	800460c <LL_ADC_GetOffsetChannel>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_ADC_ConfigChannel+0x280>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2102      	movs	r1, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff f989 	bl	800460c <LL_ADC_GetOffsetChannel>
 80052fa:	4603      	mov	r3, r0
 80052fc:	0e9b      	lsrs	r3, r3, #26
 80052fe:	f003 021f 	and.w	r2, r3, #31
 8005302:	e01e      	b.n	8005342 <HAL_ADC_ConfigChannel+0x2be>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2102      	movs	r1, #2
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff f97e 	bl	800460c <LL_ADC_GetOffsetChannel>
 8005310:	4603      	mov	r3, r0
 8005312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531a:	fa93 f3a3 	rbit	r3, r3
 800531e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005322:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800532a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8005332:	2320      	movs	r3, #32
 8005334:	e004      	b.n	8005340 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <HAL_ADC_ConfigChannel+0x2d6>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0e9b      	lsrs	r3, r3, #26
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	e016      	b.n	8005388 <HAL_ADC_ConfigChannel+0x304>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800536c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800536e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800537a:	2320      	movs	r3, #32
 800537c:	e004      	b.n	8005388 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800537e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	429a      	cmp	r2, r3
 800538a:	d106      	bne.n	800539a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	2102      	movs	r1, #2
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff f94f 	bl	8004638 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2103      	movs	r1, #3
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff f933 	bl	800460c <LL_ADC_GetOffsetChannel>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x342>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2103      	movs	r1, #3
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f928 	bl	800460c <LL_ADC_GetOffsetChannel>
 80053bc:	4603      	mov	r3, r0
 80053be:	0e9b      	lsrs	r3, r3, #26
 80053c0:	f003 021f 	and.w	r2, r3, #31
 80053c4:	e017      	b.n	80053f6 <HAL_ADC_ConfigChannel+0x372>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2103      	movs	r1, #3
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff f91d 	bl	800460c <LL_ADC_GetOffsetChannel>
 80053d2:	4603      	mov	r3, r0
 80053d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80053de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80053e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80053e8:	2320      	movs	r3, #32
 80053ea:	e003      	b.n	80053f4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80053ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ee:	fab3 f383 	clz	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <HAL_ADC_ConfigChannel+0x38a>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	0e9b      	lsrs	r3, r3, #26
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	e011      	b.n	8005432 <HAL_ADC_ConfigChannel+0x3ae>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005416:	fa93 f3a3 	rbit	r3, r3
 800541a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800541c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8005426:	2320      	movs	r3, #32
 8005428:	e003      	b.n	8005432 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	fab3 f383 	clz	r3, r3
 8005430:	b2db      	uxtb	r3, r3
 8005432:	429a      	cmp	r2, r3
 8005434:	d106      	bne.n	8005444 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	2103      	movs	r1, #3
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff f8fa 	bl	8004638 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fa21 	bl	8004890 <LL_ADC_IsEnabled>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 81c1 	bne.w	80057d8 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	461a      	mov	r2, r3
 8005464:	f7ff f98e 	bl	8004784 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4a8e      	ldr	r2, [pc, #568]	; (80056a8 <HAL_ADC_ConfigChannel+0x624>)
 800546e:	4293      	cmp	r3, r2
 8005470:	f040 8130 	bne.w	80056d4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <HAL_ADC_ConfigChannel+0x418>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	0e9b      	lsrs	r3, r3, #26
 800548a:	3301      	adds	r3, #1
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2b09      	cmp	r3, #9
 8005492:	bf94      	ite	ls
 8005494:	2301      	movls	r3, #1
 8005496:	2300      	movhi	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	e019      	b.n	80054d0 <HAL_ADC_ConfigChannel+0x44c>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80054aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80054ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80054b4:	2320      	movs	r3, #32
 80054b6:	e003      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80054b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3301      	adds	r3, #1
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	bf94      	ite	ls
 80054ca:	2301      	movls	r3, #1
 80054cc:	2300      	movhi	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d079      	beq.n	80055c8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d107      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x46c>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	0e9b      	lsrs	r3, r3, #26
 80054e6:	3301      	adds	r3, #1
 80054e8:	069b      	lsls	r3, r3, #26
 80054ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054ee:	e015      	b.n	800551c <HAL_ADC_ConfigChannel+0x498>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f8:	fa93 f3a3 	rbit	r3, r3
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005508:	2320      	movs	r3, #32
 800550a:	e003      	b.n	8005514 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800550c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800550e:	fab3 f383 	clz	r3, r3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	3301      	adds	r3, #1
 8005516:	069b      	lsls	r3, r3, #26
 8005518:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_ADC_ConfigChannel+0x4b8>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	0e9b      	lsrs	r3, r3, #26
 800552e:	3301      	adds	r3, #1
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2101      	movs	r1, #1
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	e017      	b.n	800556c <HAL_ADC_ConfigChannel+0x4e8>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800554a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800554e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005554:	2320      	movs	r3, #32
 8005556:	e003      	b.n	8005560 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555a:	fab3 f383 	clz	r3, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	3301      	adds	r3, #1
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	2101      	movs	r1, #1
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	ea42 0103 	orr.w	r1, r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x50e>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	0e9b      	lsrs	r3, r3, #26
 8005582:	3301      	adds	r3, #1
 8005584:	f003 021f 	and.w	r2, r3, #31
 8005588:	4613      	mov	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	051b      	lsls	r3, r3, #20
 8005590:	e018      	b.n	80055c4 <HAL_ADC_ConfigChannel+0x540>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80055aa:	2320      	movs	r3, #32
 80055ac:	e003      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80055ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	3301      	adds	r3, #1
 80055b8:	f003 021f 	and.w	r2, r3, #31
 80055bc:	4613      	mov	r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4413      	add	r3, r2
 80055c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055c4:	430b      	orrs	r3, r1
 80055c6:	e080      	b.n	80056ca <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <HAL_ADC_ConfigChannel+0x560>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	0e9b      	lsrs	r3, r3, #26
 80055da:	3301      	adds	r3, #1
 80055dc:	069b      	lsls	r3, r3, #26
 80055de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055e2:	e015      	b.n	8005610 <HAL_ADC_ConfigChannel+0x58c>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	fa93 f3a3 	rbit	r3, r3
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80055fc:	2320      	movs	r3, #32
 80055fe:	e003      	b.n	8005608 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	3301      	adds	r3, #1
 800560a:	069b      	lsls	r3, r3, #26
 800560c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005618:	2b00      	cmp	r3, #0
 800561a:	d109      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x5ac>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	0e9b      	lsrs	r3, r3, #26
 8005622:	3301      	adds	r3, #1
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	e017      	b.n	8005660 <HAL_ADC_ConfigChannel+0x5dc>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	fa93 f3a3 	rbit	r3, r3
 800563c:	61fb      	str	r3, [r7, #28]
  return result;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005648:	2320      	movs	r3, #32
 800564a:	e003      	b.n	8005654 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	3301      	adds	r3, #1
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2101      	movs	r1, #1
 800565c:	fa01 f303 	lsl.w	r3, r1, r3
 8005660:	ea42 0103 	orr.w	r1, r2, r3
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <HAL_ADC_ConfigChannel+0x608>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	0e9b      	lsrs	r3, r3, #26
 8005676:	3301      	adds	r3, #1
 8005678:	f003 021f 	and.w	r2, r3, #31
 800567c:	4613      	mov	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	3b1e      	subs	r3, #30
 8005684:	051b      	lsls	r3, r3, #20
 8005686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800568a:	e01d      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x644>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	fa93 f3a3 	rbit	r3, r3
 8005698:	613b      	str	r3, [r7, #16]
  return result;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80056a4:	2320      	movs	r3, #32
 80056a6:	e005      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x630>
 80056a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	fab3 f383 	clz	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	3301      	adds	r3, #1
 80056b6:	f003 021f 	and.w	r2, r3, #31
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	3b1e      	subs	r3, #30
 80056c2:	051b      	lsls	r3, r3, #20
 80056c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056c8:	430b      	orrs	r3, r1
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	6892      	ldr	r2, [r2, #8]
 80056ce:	4619      	mov	r1, r3
 80056d0:	f7ff f82d 	bl	800472e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4b44      	ldr	r3, [pc, #272]	; (80057ec <HAL_ADC_ConfigChannel+0x768>)
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d07b      	beq.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056e0:	4843      	ldr	r0, [pc, #268]	; (80057f0 <HAL_ADC_ConfigChannel+0x76c>)
 80056e2:	f7fe ff61 	bl	80045a8 <LL_ADC_GetCommonPathInternalCh>
 80056e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056ea:	4842      	ldr	r0, [pc, #264]	; (80057f4 <HAL_ADC_ConfigChannel+0x770>)
 80056ec:	f7ff f8d0 	bl	8004890 <LL_ADC_IsEnabled>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d15d      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <HAL_ADC_ConfigChannel+0x774>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d126      	bne.n	800574e <HAL_ADC_ConfigChannel+0x6ca>
 8005700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d120      	bne.n	800574e <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a38      	ldr	r2, [pc, #224]	; (80057f4 <HAL_ADC_ConfigChannel+0x770>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d160      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800571a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800571e:	4619      	mov	r1, r3
 8005720:	4833      	ldr	r0, [pc, #204]	; (80057f0 <HAL_ADC_ConfigChannel+0x76c>)
 8005722:	f7fe ff2e 	bl	8004582 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005726:	4b35      	ldr	r3, [pc, #212]	; (80057fc <HAL_ADC_ConfigChannel+0x778>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	099b      	lsrs	r3, r3, #6
 800572c:	4a34      	ldr	r2, [pc, #208]	; (8005800 <HAL_ADC_ConfigChannel+0x77c>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	099a      	lsrs	r2, r3, #6
 8005734:	4613      	mov	r3, r2
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800573e:	e002      	b.n	8005746 <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3b01      	subs	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f9      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800574c:	e044      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2c      	ldr	r2, [pc, #176]	; (8005804 <HAL_ADC_ConfigChannel+0x780>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d113      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x6fc>
 8005758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800575c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10d      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_ADC_ConfigChannel+0x770>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d134      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800576e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005776:	4619      	mov	r1, r3
 8005778:	481d      	ldr	r0, [pc, #116]	; (80057f0 <HAL_ADC_ConfigChannel+0x76c>)
 800577a:	f7fe ff02 	bl	8004582 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800577e:	e02b      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a20      	ldr	r2, [pc, #128]	; (8005808 <HAL_ADC_ConfigChannel+0x784>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d126      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
 800578a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800578e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d120      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <HAL_ADC_ConfigChannel+0x770>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d11b      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80057a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057a8:	4619      	mov	r1, r3
 80057aa:	4811      	ldr	r0, [pc, #68]	; (80057f0 <HAL_ADC_ConfigChannel+0x76c>)
 80057ac:	f7fe fee9 	bl	8004582 <LL_ADC_SetCommonPathInternalCh>
 80057b0:	e012      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80057c4:	e008      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80057e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	37d8      	adds	r7, #216	; 0xd8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	80080000 	.word	0x80080000
 80057f0:	50040300 	.word	0x50040300
 80057f4:	50040000 	.word	0x50040000
 80057f8:	c7520000 	.word	0xc7520000
 80057fc:	20000044 	.word	0x20000044
 8005800:	053e2d63 	.word	0x053e2d63
 8005804:	cb840000 	.word	0xcb840000
 8005808:	80000001 	.word	0x80000001

0800580c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005814:	2300      	movs	r3, #0
 8005816:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff f837 	bl	8004890 <LL_ADC_IsEnabled>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d15e      	bne.n	80058e6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	4b30      	ldr	r3, [pc, #192]	; (80058f0 <ADC_Enable+0xe4>)
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	f043 0210 	orr.w	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e04a      	b.n	80058e8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff f806 	bl	8004868 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800585c:	4825      	ldr	r0, [pc, #148]	; (80058f4 <ADC_Enable+0xe8>)
 800585e:	f7fe fea3 	bl	80045a8 <LL_ADC_GetCommonPathInternalCh>
 8005862:	4603      	mov	r3, r0
 8005864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00f      	beq.n	800588c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800586c:	4b22      	ldr	r3, [pc, #136]	; (80058f8 <ADC_Enable+0xec>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	099b      	lsrs	r3, r3, #6
 8005872:	4a22      	ldr	r2, [pc, #136]	; (80058fc <ADC_Enable+0xf0>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	3301      	adds	r3, #1
 800587c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800587e:	e002      	b.n	8005886 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	3b01      	subs	r3, #1
 8005884:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f9      	bne.n	8005880 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800588c:	f7fe fe2c 	bl	80044e8 <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005892:	e021      	b.n	80058d8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fff9 	bl	8004890 <LL_ADC_IsEnabled>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe ffdd 	bl	8004868 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80058ae:	f7fe fe1b 	bl	80044e8 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d90d      	bls.n	80058d8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	f043 0210 	orr.w	r2, r3, #16
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e007      	b.n	80058e8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d1d6      	bne.n	8005894 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	8000003f 	.word	0x8000003f
 80058f4:	50040300 	.word	0x50040300
 80058f8:	20000044 	.word	0x20000044
 80058fc:	053e2d63 	.word	0x053e2d63

08005900 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005916:	2b00      	cmp	r3, #0
 8005918:	d14b      	bne.n	80059b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d021      	beq.n	8005978 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fe98 	bl	800466e <LL_ADC_REG_IsTriggerSourceSWStart>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d032      	beq.n	80059aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d12b      	bne.n	80059aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11f      	bne.n	80059aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
 8005976:	e018      	b.n	80059aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d111      	bne.n	80059aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fb42 	bl	8005034 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80059b0:	e00e      	b.n	80059d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff fb56 	bl	8005070 <HAL_ADC_ErrorCallback>
}
 80059c4:	e004      	b.n	80059d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	4798      	blx	r3
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fb2e 	bl	8005048 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	f043 0204 	orr.w	r2, r3, #4
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff fb28 	bl	8005070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005abe:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	60d3      	str	r3, [r2, #12]
}
 8005ac4:	bf00      	nop
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <__NVIC_GetPriorityGrouping+0x18>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	0a1b      	lsrs	r3, r3, #8
 8005ade:	f003 0307 	and.w	r3, r3, #7
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	e000ed00 	.word	0xe000ed00

08005af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db0b      	blt.n	8005b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	f003 021f 	and.w	r2, r3, #31
 8005b08:	4907      	ldr	r1, [pc, #28]	; (8005b28 <__NVIC_EnableIRQ+0x38>)
 8005b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2001      	movs	r0, #1
 8005b12:	fa00 f202 	lsl.w	r2, r0, r2
 8005b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	e000e100 	.word	0xe000e100

08005b2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	db10      	blt.n	8005b60 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	f003 021f 	and.w	r2, r3, #31
 8005b44:	4909      	ldr	r1, [pc, #36]	; (8005b6c <__NVIC_DisableIRQ+0x40>)
 8005b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b52:	3320      	adds	r3, #32
 8005b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005b5c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	e000e100 	.word	0xe000e100

08005b70 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	db0c      	blt.n	8005b9c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	f003 021f 	and.w	r2, r3, #31
 8005b88:	4907      	ldr	r1, [pc, #28]	; (8005ba8 <__NVIC_SetPendingIRQ+0x38>)
 8005b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	2001      	movs	r0, #1
 8005b92:	fa00 f202 	lsl.w	r2, r0, r2
 8005b96:	3340      	adds	r3, #64	; 0x40
 8005b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000e100 	.word	0xe000e100

08005bac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	db0c      	blt.n	8005bd8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	f003 021f 	and.w	r2, r3, #31
 8005bc4:	4907      	ldr	r1, [pc, #28]	; (8005be4 <__NVIC_ClearPendingIRQ+0x38>)
 8005bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2001      	movs	r0, #1
 8005bce:	fa00 f202 	lsl.w	r2, r0, r2
 8005bd2:	3360      	adds	r3, #96	; 0x60
 8005bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000e100 	.word	0xe000e100

08005be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db0a      	blt.n	8005c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	490c      	ldr	r1, [pc, #48]	; (8005c34 <__NVIC_SetPriority+0x4c>)
 8005c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c10:	e00a      	b.n	8005c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4908      	ldr	r1, [pc, #32]	; (8005c38 <__NVIC_SetPriority+0x50>)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	0112      	lsls	r2, r2, #4
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	761a      	strb	r2, [r3, #24]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000e100 	.word	0xe000e100
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f1c3 0307 	rsb	r3, r3, #7
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf28      	it	cs
 8005c5a:	2304      	movcs	r3, #4
 8005c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d902      	bls.n	8005c6c <NVIC_EncodePriority+0x30>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3b03      	subs	r3, #3
 8005c6a:	e000      	b.n	8005c6e <NVIC_EncodePriority+0x32>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43da      	mvns	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	401a      	ands	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c84:	f04f 31ff 	mov.w	r1, #4294967295
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	43d9      	mvns	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	4313      	orrs	r3, r2
         );
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3724      	adds	r7, #36	; 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <__NVIC_SystemReset+0x20>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005cb4:	4903      	ldr	r1, [pc, #12]	; (8005cc4 <__NVIC_SystemReset+0x20>)
 8005cb6:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <__NVIC_SystemReset+0x24>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60cb      	str	r3, [r1, #12]
 8005cbc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <__NVIC_SystemReset+0x1c>
 8005cc4:	e000ed00 	.word	0xe000ed00
 8005cc8:	05fa0004 	.word	0x05fa0004

08005ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fed9 	bl	8005a8c <__NVIC_SetPriorityGrouping>
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	4603      	mov	r3, r0
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cf0:	f7ff fef0 	bl	8005ad4 <__NVIC_GetPriorityGrouping>
 8005cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f7ff ff9e 	bl	8005c3c <NVIC_EncodePriority>
 8005d00:	4602      	mov	r2, r0
 8005d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff ff6d 	bl	8005be8 <__NVIC_SetPriority>
}
 8005d0e:	bf00      	nop
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fee3 	bl	8005af0 <__NVIC_EnableIRQ>
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	4603      	mov	r3, r0
 8005d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fef3 	bl	8005b2c <__NVIC_DisableIRQ>
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005d52:	f7ff ffa7 	bl	8005ca4 <__NVIC_SystemReset>

08005d56 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff ff03 	bl	8005b70 <__NVIC_SetPendingIRQ>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	4603      	mov	r3, r0
 8005d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff ff13 	bl	8005bac <__NVIC_ClearPendingIRQ>
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e08e      	b.n	8005ec0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <HAL_DMA_Init+0x138>)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d80f      	bhi.n	8005dce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	4b45      	ldr	r3, [pc, #276]	; (8005ecc <HAL_DMA_Init+0x13c>)
 8005db6:	4413      	add	r3, r2
 8005db8:	4a45      	ldr	r2, [pc, #276]	; (8005ed0 <HAL_DMA_Init+0x140>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	091b      	lsrs	r3, r3, #4
 8005dc0:	009a      	lsls	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a42      	ldr	r2, [pc, #264]	; (8005ed4 <HAL_DMA_Init+0x144>)
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40
 8005dcc:	e00e      	b.n	8005dec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4b40      	ldr	r3, [pc, #256]	; (8005ed8 <HAL_DMA_Init+0x148>)
 8005dd6:	4413      	add	r3, r2
 8005dd8:	4a3d      	ldr	r2, [pc, #244]	; (8005ed0 <HAL_DMA_Init+0x140>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	009a      	lsls	r2, r3, #2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a3c      	ldr	r2, [pc, #240]	; (8005edc <HAL_DMA_Init+0x14c>)
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9b6 	bl	80061b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e4c:	d102      	bne.n	8005e54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005e60:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e6a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_DMA_Init+0x106>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d80c      	bhi.n	8005e96 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f9d5 	bl	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e92:	605a      	str	r2, [r3, #4]
 8005e94:	e008      	b.n	8005ea8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40020407 	.word	0x40020407
 8005ecc:	bffdfff8 	.word	0xbffdfff8
 8005ed0:	cccccccd 	.word	0xcccccccd
 8005ed4:	40020000 	.word	0x40020000
 8005ed8:	bffdfbf8 	.word	0xbffdfbf8
 8005edc:	40020400 	.word	0x40020400

08005ee0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_DMA_Start_IT+0x20>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e066      	b.n	8005fce <HAL_DMA_Start_IT+0xee>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d155      	bne.n	8005fc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f8fb 	bl	8006134 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d008      	beq.n	8005f58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 020e 	orr.w	r2, r2, #14
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e00f      	b.n	8005f78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0204 	bic.w	r2, r2, #4
 8005f66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 020a 	orr.w	r2, r2, #10
 8005f76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d007      	beq.n	8005f96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e005      	b.n	8005fcc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	f003 031c 	and.w	r3, r3, #28
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d026      	beq.n	8006050 <HAL_DMA_IRQHandler+0x7a>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d021      	beq.n	8006050 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0204 	bic.w	r2, r2, #4
 8006028:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602e:	f003 021c 	and.w	r2, r3, #28
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2104      	movs	r1, #4
 8006038:	fa01 f202 	lsl.w	r2, r1, r2
 800603c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	2b00      	cmp	r3, #0
 8006044:	d071      	beq.n	800612a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800604e:	e06c      	b.n	800612a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006054:	f003 031c 	and.w	r3, r3, #28
 8006058:	2202      	movs	r2, #2
 800605a:	409a      	lsls	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02e      	beq.n	80060c2 <HAL_DMA_IRQHandler+0xec>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d029      	beq.n	80060c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 020a 	bic.w	r2, r2, #10
 800608a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006098:	f003 021c 	and.w	r2, r3, #28
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	2102      	movs	r1, #2
 80060a2:	fa01 f202 	lsl.w	r2, r1, r2
 80060a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d038      	beq.n	800612a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80060c0:	e033      	b.n	800612a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	f003 031c 	and.w	r3, r3, #28
 80060ca:	2208      	movs	r2, #8
 80060cc:	409a      	lsls	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d02a      	beq.n	800612c <HAL_DMA_IRQHandler+0x156>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d025      	beq.n	800612c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 020e 	bic.w	r2, r2, #14
 80060ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	f003 021c 	and.w	r2, r3, #28
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	2101      	movs	r1, #1
 80060fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006102:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800612a:	bf00      	nop
 800612c:	bf00      	nop
}
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800614a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	f003 021c 	and.w	r2, r3, #28
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2101      	movs	r1, #1
 800616c:	fa01 f202 	lsl.w	r2, r1, r2
 8006170:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b10      	cmp	r3, #16
 8006180:	d108      	bne.n	8006194 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006192:	e007      	b.n	80061a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]
}
 80061a4:	bf00      	nop
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	4b17      	ldr	r3, [pc, #92]	; (800621c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d80a      	bhi.n	80061da <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c8:	089b      	lsrs	r3, r3, #2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061d0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6493      	str	r3, [r2, #72]	; 0x48
 80061d8:	e007      	b.n	80061ea <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	089b      	lsrs	r3, r3, #2
 80061e0:	009a      	lsls	r2, r3, #2
 80061e2:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80061e4:	4413      	add	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	3b08      	subs	r3, #8
 80061f2:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006200:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2201      	movs	r2, #1
 800620a:	409a      	lsls	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	40020407 	.word	0x40020407
 8006220:	4002081c 	.word	0x4002081c
 8006224:	cccccccd 	.word	0xcccccccd
 8006228:	40020880 	.word	0x40020880

0800622c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006250:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3b01      	subs	r3, #1
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2201      	movs	r2, #1
 800625c:	409a      	lsls	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006262:	bf00      	nop
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	1000823f 	.word	0x1000823f
 8006274:	40020940 	.word	0x40020940

08006278 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006286:	e14c      	b.n	8006522 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	2101      	movs	r1, #1
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	4013      	ands	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 813e 	beq.w	800651c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d00b      	beq.n	80062c0 <HAL_GPIO_Init+0x48>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d007      	beq.n	80062c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062b4:	2b11      	cmp	r3, #17
 80062b6:	d003      	beq.n	80062c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b12      	cmp	r3, #18
 80062be:	d130      	bne.n	8006322 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	2203      	movs	r2, #3
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	43db      	mvns	r3, r3
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4013      	ands	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062f6:	2201      	movs	r2, #1
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4013      	ands	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	f003 0201 	and.w	r2, r3, #1
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	2203      	movs	r2, #3
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43db      	mvns	r3, r3
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4013      	ands	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	fa02 f303 	lsl.w	r3, r2, r3
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d003      	beq.n	8006362 <HAL_GPIO_Init+0xea>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b12      	cmp	r3, #18
 8006360:	d123      	bne.n	80063aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	08da      	lsrs	r2, r3, #3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3208      	adds	r2, #8
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	220f      	movs	r2, #15
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4013      	ands	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	08da      	lsrs	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3208      	adds	r2, #8
 80063a4:	6939      	ldr	r1, [r7, #16]
 80063a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	2203      	movs	r2, #3
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4013      	ands	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f003 0203 	and.w	r2, r3, #3
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8098 	beq.w	800651c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80063ec:	4a54      	ldr	r2, [pc, #336]	; (8006540 <HAL_GPIO_Init+0x2c8>)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	089b      	lsrs	r3, r3, #2
 80063f2:	3302      	adds	r3, #2
 80063f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	220f      	movs	r2, #15
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4013      	ands	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006416:	d019      	beq.n	800644c <HAL_GPIO_Init+0x1d4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a4a      	ldr	r2, [pc, #296]	; (8006544 <HAL_GPIO_Init+0x2cc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_GPIO_Init+0x1d0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a49      	ldr	r2, [pc, #292]	; (8006548 <HAL_GPIO_Init+0x2d0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00d      	beq.n	8006444 <HAL_GPIO_Init+0x1cc>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a48      	ldr	r2, [pc, #288]	; (800654c <HAL_GPIO_Init+0x2d4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d007      	beq.n	8006440 <HAL_GPIO_Init+0x1c8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a47      	ldr	r2, [pc, #284]	; (8006550 <HAL_GPIO_Init+0x2d8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d101      	bne.n	800643c <HAL_GPIO_Init+0x1c4>
 8006438:	2304      	movs	r3, #4
 800643a:	e008      	b.n	800644e <HAL_GPIO_Init+0x1d6>
 800643c:	2307      	movs	r3, #7
 800643e:	e006      	b.n	800644e <HAL_GPIO_Init+0x1d6>
 8006440:	2303      	movs	r3, #3
 8006442:	e004      	b.n	800644e <HAL_GPIO_Init+0x1d6>
 8006444:	2302      	movs	r3, #2
 8006446:	e002      	b.n	800644e <HAL_GPIO_Init+0x1d6>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <HAL_GPIO_Init+0x1d6>
 800644c:	2300      	movs	r3, #0
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	f002 0203 	and.w	r2, r2, #3
 8006454:	0092      	lsls	r2, r2, #2
 8006456:	4093      	lsls	r3, r2
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800645e:	4938      	ldr	r1, [pc, #224]	; (8006540 <HAL_GPIO_Init+0x2c8>)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	3302      	adds	r3, #2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800646c:	4b39      	ldr	r3, [pc, #228]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 800646e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	43db      	mvns	r3, r3
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4013      	ands	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006492:	4a30      	ldr	r2, [pc, #192]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800649a:	4b2e      	ldr	r3, [pc, #184]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 800649c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	43db      	mvns	r3, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80064c0:	4a24      	ldr	r2, [pc, #144]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064c8:	4b22      	ldr	r3, [pc, #136]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	43db      	mvns	r3, r3
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4013      	ands	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80064f2:	4b18      	ldr	r3, [pc, #96]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	43db      	mvns	r3, r3
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4013      	ands	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006516:	4a0f      	ldr	r2, [pc, #60]	; (8006554 <HAL_GPIO_Init+0x2dc>)
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	3301      	adds	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	f47f aeab 	bne.w	8006288 <HAL_GPIO_Init+0x10>
  }
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	48000400 	.word	0x48000400
 8006548:	48000800 	.word	0x48000800
 800654c:	48000c00 	.word	0x48000c00
 8006550:	48001000 	.word	0x48001000
 8006554:	58000800 	.word	0x58000800

08006558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
 8006564:	4613      	mov	r3, r2
 8006566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006568:	787b      	ldrb	r3, [r7, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006574:	e002      	b.n	800657c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006576:	887a      	ldrh	r2, [r7, #2]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800658e:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <HAL_HSEM_IRQHandler+0x30>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006594:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <HAL_HSEM_IRQHandler+0x30>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	43db      	mvns	r3, r3
 800659c:	4906      	ldr	r1, [pc, #24]	; (80065b8 <HAL_HSEM_IRQHandler+0x30>)
 800659e:	4013      	ands	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80065a2:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <HAL_HSEM_IRQHandler+0x30>)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f807 	bl	80065bc <HAL_HSEM_FreeCallback>
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	58001500 	.word	0x58001500

080065bc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e081      	b.n	80066e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fc fd1e 	bl	8003038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2224      	movs	r2, #36	; 0x24
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 0201 	bic.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d107      	bne.n	800664a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006646:	609a      	str	r2, [r3, #8]
 8006648:	e006      	b.n	8006658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d104      	bne.n	800666a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800668c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	ea42 0103 	orr.w	r1, r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69d9      	ldr	r1, [r3, #28]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1a      	ldr	r2, [r3, #32]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	817b      	strh	r3, [r7, #10]
 8006702:	460b      	mov	r3, r1
 8006704:	813b      	strh	r3, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b20      	cmp	r3, #32
 8006714:	f040 80f9 	bne.w	800690a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <HAL_I2C_Mem_Write+0x34>
 800671e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800672a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0ed      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_I2C_Mem_Write+0x4e>
 800673a:	2302      	movs	r3, #2
 800673c:	e0e6      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006746:	f7fd fecf 	bl	80044e8 <HAL_GetTick>
 800674a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2319      	movs	r3, #25
 8006752:	2201      	movs	r2, #1
 8006754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fac3 	bl	8006ce4 <I2C_WaitOnFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0d1      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2221      	movs	r2, #33	; 0x21
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2240      	movs	r2, #64	; 0x40
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a3a      	ldr	r2, [r7, #32]
 8006782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006790:	88f8      	ldrh	r0, [r7, #6]
 8006792:	893a      	ldrh	r2, [r7, #8]
 8006794:	8979      	ldrh	r1, [r7, #10]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	4603      	mov	r3, r0
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f9d3 	bl	8006b4c <I2C_RequestMemoryWrite>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0a9      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2bff      	cmp	r3, #255	; 0xff
 80067c0:	d90e      	bls.n	80067e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	8979      	ldrh	r1, [r7, #10]
 80067d0:	2300      	movs	r3, #0
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fba5 	bl	8006f28 <I2C_TransferConfig>
 80067de:	e00f      	b.n	8006800 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	8979      	ldrh	r1, [r7, #10]
 80067f2:	2300      	movs	r3, #0
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fb94 	bl	8006f28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 faad 	bl	8006d64 <I2C_WaitOnTXISFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e07b      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d034      	beq.n	80068b8 <HAL_I2C_Mem_Write+0x1c8>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	2b00      	cmp	r3, #0
 8006854:	d130      	bne.n	80068b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2200      	movs	r2, #0
 800685e:	2180      	movs	r1, #128	; 0x80
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fa3f 	bl	8006ce4 <I2C_WaitOnFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e04d      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	d90e      	bls.n	8006898 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	b2da      	uxtb	r2, r3
 8006886:	8979      	ldrh	r1, [r7, #10]
 8006888:	2300      	movs	r3, #0
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fb49 	bl	8006f28 <I2C_TransferConfig>
 8006896:	e00f      	b.n	80068b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	8979      	ldrh	r1, [r7, #10]
 80068aa:	2300      	movs	r3, #0
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 fb38 	bl	8006f28 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d19e      	bne.n	8006800 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fa8c 	bl	8006de4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e01a      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2220      	movs	r2, #32
 80068dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <HAL_I2C_Mem_Write+0x224>)
 80068ea:	400b      	ands	r3, r1
 80068ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	e000      	b.n	800690c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800690a:	2302      	movs	r3, #2
  }
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	fe00e800 	.word	0xfe00e800

08006918 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	4608      	mov	r0, r1
 8006922:	4611      	mov	r1, r2
 8006924:	461a      	mov	r2, r3
 8006926:	4603      	mov	r3, r0
 8006928:	817b      	strh	r3, [r7, #10]
 800692a:	460b      	mov	r3, r1
 800692c:	813b      	strh	r3, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b20      	cmp	r3, #32
 800693c:	f040 80fd 	bne.w	8006b3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_I2C_Mem_Read+0x34>
 8006946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e0f1      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_I2C_Mem_Read+0x4e>
 8006962:	2302      	movs	r3, #2
 8006964:	e0ea      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800696e:	f7fd fdbb 	bl	80044e8 <HAL_GetTick>
 8006972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	2319      	movs	r3, #25
 800697a:	2201      	movs	r2, #1
 800697c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f9af 	bl	8006ce4 <I2C_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0d5      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2222      	movs	r2, #34	; 0x22
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2240      	movs	r2, #64	; 0x40
 800699c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a3a      	ldr	r2, [r7, #32]
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069b8:	88f8      	ldrh	r0, [r7, #6]
 80069ba:	893a      	ldrh	r2, [r7, #8]
 80069bc:	8979      	ldrh	r1, [r7, #10]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	4603      	mov	r3, r0
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f913 	bl	8006bf4 <I2C_RequestMemoryRead>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0ad      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2bff      	cmp	r3, #255	; 0xff
 80069e8:	d90e      	bls.n	8006a08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	8979      	ldrh	r1, [r7, #10]
 80069f8:	4b52      	ldr	r3, [pc, #328]	; (8006b44 <HAL_I2C_Mem_Read+0x22c>)
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fa91 	bl	8006f28 <I2C_TransferConfig>
 8006a06:	e00f      	b.n	8006a28 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	8979      	ldrh	r1, [r7, #10]
 8006a1a:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <HAL_I2C_Mem_Read+0x22c>)
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fa80 	bl	8006f28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2104      	movs	r1, #4
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f956 	bl	8006ce4 <I2C_WaitOnFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e07c      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d034      	beq.n	8006ae8 <HAL_I2C_Mem_Read+0x1d0>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d130      	bne.n	8006ae8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f927 	bl	8006ce4 <I2C_WaitOnFlagUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e04d      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2bff      	cmp	r3, #255	; 0xff
 8006aa8:	d90e      	bls.n	8006ac8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	22ff      	movs	r2, #255	; 0xff
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	8979      	ldrh	r1, [r7, #10]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fa31 	bl	8006f28 <I2C_TransferConfig>
 8006ac6:	e00f      	b.n	8006ae8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	8979      	ldrh	r1, [r7, #10]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fa20 	bl	8006f28 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d19a      	bne.n	8006a28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f974 	bl	8006de4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e01a      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6859      	ldr	r1, [r3, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_I2C_Mem_Read+0x230>)
 8006b1a:	400b      	ands	r3, r1
 8006b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e000      	b.n	8006b3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
  }
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	80002400 	.word	0x80002400
 8006b48:	fe00e800 	.word	0xfe00e800

08006b4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	4608      	mov	r0, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	817b      	strh	r3, [r7, #10]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	813b      	strh	r3, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	8979      	ldrh	r1, [r7, #10]
 8006b6c:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <I2C_RequestMemoryWrite+0xa4>)
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f9d7 	bl	8006f28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b7a:	69fa      	ldr	r2, [r7, #28]
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f8f0 	bl	8006d64 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e02c      	b.n	8006be8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d105      	bne.n	8006ba0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b94:	893b      	ldrh	r3, [r7, #8]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	629a      	str	r2, [r3, #40]	; 0x28
 8006b9e:	e015      	b.n	8006bcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ba0:	893b      	ldrh	r3, [r7, #8]
 8006ba2:	0a1b      	lsrs	r3, r3, #8
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	69b9      	ldr	r1, [r7, #24]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f8d6 	bl	8006d64 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e012      	b.n	8006be8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc2:	893b      	ldrh	r3, [r7, #8]
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2180      	movs	r1, #128	; 0x80
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f884 	bl	8006ce4 <I2C_WaitOnFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	80002000 	.word	0x80002000

08006bf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	461a      	mov	r2, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	817b      	strh	r3, [r7, #10]
 8006c06:	460b      	mov	r3, r1
 8006c08:	813b      	strh	r3, [r7, #8]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	8979      	ldrh	r1, [r7, #10]
 8006c14:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <I2C_RequestMemoryRead+0xa4>)
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f984 	bl	8006f28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	69b9      	ldr	r1, [r7, #24]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f89d 	bl	8006d64 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e02c      	b.n	8006c8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c34:	88fb      	ldrh	r3, [r7, #6]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d105      	bne.n	8006c46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3a:	893b      	ldrh	r3, [r7, #8]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28
 8006c44:	e015      	b.n	8006c72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c46:	893b      	ldrh	r3, [r7, #8]
 8006c48:	0a1b      	lsrs	r3, r3, #8
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	69b9      	ldr	r1, [r7, #24]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f883 	bl	8006d64 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e012      	b.n	8006c8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c68:	893b      	ldrh	r3, [r7, #8]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2140      	movs	r1, #64	; 0x40
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f831 	bl	8006ce4 <I2C_WaitOnFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	80002000 	.word	0x80002000

08006c9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d103      	bne.n	8006cba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d007      	beq.n	8006cd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	619a      	str	r2, [r3, #24]
  }
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cf4:	e022      	b.n	8006d3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d01e      	beq.n	8006d3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfe:	f7fd fbf3 	bl	80044e8 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d302      	bcc.n	8006d14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d113      	bne.n	8006d3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	f043 0220 	orr.w	r2, r3, #32
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e00f      	b.n	8006d5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4013      	ands	r3, r2
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	bf0c      	ite	eq
 8006d4c:	2301      	moveq	r3, #1
 8006d4e:	2300      	movne	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d0cd      	beq.n	8006cf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d70:	e02c      	b.n	8006dcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f870 	bl	8006e5c <I2C_IsAcknowledgeFailed>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e02a      	b.n	8006ddc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d01e      	beq.n	8006dcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8e:	f7fd fbab 	bl	80044e8 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d302      	bcc.n	8006da4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d113      	bne.n	8006dcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da8:	f043 0220 	orr.w	r2, r3, #32
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e007      	b.n	8006ddc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d1cb      	bne.n	8006d72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006df0:	e028      	b.n	8006e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f830 	bl	8006e5c <I2C_IsAcknowledgeFailed>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e026      	b.n	8006e54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e06:	f7fd fb6f 	bl	80044e8 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d113      	bne.n	8006e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e20:	f043 0220 	orr.w	r2, r3, #32
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e007      	b.n	8006e54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f003 0320 	and.w	r3, r3, #32
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d1cf      	bne.n	8006df2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d151      	bne.n	8006f1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e76:	e022      	b.n	8006ebe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d01e      	beq.n	8006ebe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e80:	f7fd fb32 	bl	80044e8 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <I2C_IsAcknowledgeFailed+0x3a>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d113      	bne.n	8006ebe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e02e      	b.n	8006f1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d1d5      	bne.n	8006e78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7ff fedd 	bl	8006c9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6859      	ldr	r1, [r3, #4]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <I2C_IsAcknowledgeFailed+0xc8>)
 8006eee:	400b      	ands	r3, r1
 8006ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	f043 0204 	orr.w	r2, r3, #4
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	fe00e800 	.word	0xfe00e800

08006f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	817b      	strh	r3, [r7, #10]
 8006f36:	4613      	mov	r3, r2
 8006f38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	0d5b      	lsrs	r3, r3, #21
 8006f44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f48:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <I2C_TransferConfig+0x58>)
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	ea02 0103 	and.w	r1, r2, r3
 8006f52:	897b      	ldrh	r3, [r7, #10]
 8006f54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f58:	7a7b      	ldrb	r3, [r7, #9]
 8006f5a:	041b      	lsls	r3, r3, #16
 8006f5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	431a      	orrs	r2, r3
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	03ff63ff 	.word	0x03ff63ff

08006f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d138      	bne.n	800700c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e032      	b.n	800700e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2224      	movs	r2, #36	; 0x24
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6819      	ldr	r1, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
  }
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b20      	cmp	r3, #32
 800702e:	d139      	bne.n	80070a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800703a:	2302      	movs	r3, #2
 800703c:	e033      	b.n	80070a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2224      	movs	r2, #36	; 0x24
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800706c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	e000      	b.n	80070a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070a4:	2302      	movs	r3, #2
  }
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b4:	b08b      	sub	sp, #44	; 0x2c
 80070b6:	af06      	add	r7, sp, #24
 80070b8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0ad      	b.n	8007220 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d106      	bne.n	80070de <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f00e fa25 	bl	8015528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f004 f8e5 	bl	800b2ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e035      	b.n	8007162 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	015b      	lsls	r3, r3, #5
 80070fc:	4413      	add	r3, r2
 80070fe:	3329      	adds	r3, #41	; 0x29
 8007100:	2201      	movs	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	015b      	lsls	r3, r3, #5
 800710a:	4413      	add	r3, r2
 800710c:	3328      	adds	r3, #40	; 0x28
 800710e:	7bfa      	ldrb	r2, [r7, #15]
 8007110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	7bfa      	ldrb	r2, [r7, #15]
 8007116:	b291      	uxth	r1, r2
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	015b      	lsls	r3, r3, #5
 800711c:	4413      	add	r3, r2
 800711e:	3336      	adds	r3, #54	; 0x36
 8007120:	460a      	mov	r2, r1
 8007122:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	015b      	lsls	r3, r3, #5
 800712a:	4413      	add	r3, r2
 800712c:	332b      	adds	r3, #43	; 0x2b
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	015b      	lsls	r3, r3, #5
 8007138:	4413      	add	r3, r2
 800713a:	3338      	adds	r3, #56	; 0x38
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	015b      	lsls	r3, r3, #5
 8007146:	4413      	add	r3, r2
 8007148:	333c      	adds	r3, #60	; 0x3c
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	3302      	adds	r3, #2
 8007154:	015b      	lsls	r3, r3, #5
 8007156:	4413      	add	r3, r2
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	3301      	adds	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
 8007162:	7bfa      	ldrb	r2, [r7, #15]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	429a      	cmp	r2, r3
 800716a:	d3c4      	bcc.n	80070f6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
 8007170:	e031      	b.n	80071d6 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	015b      	lsls	r3, r3, #5
 8007178:	4413      	add	r3, r2
 800717a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	015b      	lsls	r3, r3, #5
 8007188:	4413      	add	r3, r2
 800718a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800718e:	7bfa      	ldrb	r2, [r7, #15]
 8007190:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	015b      	lsls	r3, r3, #5
 8007198:	4413      	add	r3, r2
 800719a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	015b      	lsls	r3, r3, #5
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	015b      	lsls	r3, r3, #5
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	330a      	adds	r3, #10
 80071c8:	015b      	lsls	r3, r3, #5
 80071ca:	4413      	add	r3, r2
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	3301      	adds	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
 80071d6:	7bfa      	ldrb	r2, [r7, #15]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d3c8      	bcc.n	8007172 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	687e      	ldr	r6, [r7, #4]
 80071e8:	466d      	mov	r5, sp
 80071ea:	f106 0410 	add.w	r4, r6, #16
 80071ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	1d33      	adds	r3, r6, #4
 80071f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071fa:	6838      	ldr	r0, [r7, #0]
 80071fc:	f004 f878 	bl	800b2f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d102      	bne.n	800721e <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fe59 	bl	8007ed0 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007228 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_PCD_Start+0x16>
 800723a:	2302      	movs	r3, #2
 800723c:	e012      	b.n	8007264 <HAL_PCD_Start+0x3c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f005 fa48 	bl	800c6e0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f004 f817 	bl	800b288 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f005 fa48 	bl	800c70e <USB_ReadInterrupts>
 800727e:	4603      	mov	r3, r0
 8007280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007288:	d102      	bne.n	8007290 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fb33 	bl	80078f6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f005 fa3a 	bl	800c70e <USB_ReadInterrupts>
 800729a:	4603      	mov	r3, r0
 800729c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a4:	d112      	bne.n	80072cc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b8:	b292      	uxth	r2, r2
 80072ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f00e f9b9 	bl	8015636 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80072c4:	2100      	movs	r1, #0
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f91e 	bl	8007508 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f005 fa1c 	bl	800c70e <USB_ReadInterrupts>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072e0:	d10b      	bne.n	80072fa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072f4:	b292      	uxth	r2, r2
 80072f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f005 fa05 	bl	800c70e <USB_ReadInterrupts>
 8007304:	4603      	mov	r3, r0
 8007306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800730a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800730e:	d10b      	bne.n	8007328 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007318:	b29a      	uxth	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007322:	b292      	uxth	r2, r2
 8007324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f005 f9ee 	bl	800c70e <USB_ReadInterrupts>
 8007332:	4603      	mov	r3, r0
 8007334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d133      	bne.n	80073a6 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0204 	bic.w	r2, r2, #4
 8007350:	b292      	uxth	r2, r2
 8007352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0208 	bic.w	r2, r2, #8
 8007368:	b292      	uxth	r2, r2
 800736a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007374:	2b01      	cmp	r3, #1
 8007376:	d107      	bne.n	8007388 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fdce 	bl	8007f24 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f00e f98d 	bl	80156a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007396:	b29a      	uxth	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073a0:	b292      	uxth	r2, r2
 80073a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f005 f9af 	bl	800c70e <USB_ReadInterrupts>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ba:	d126      	bne.n	800740a <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0208 	orr.w	r2, r2, #8
 80073ce:	b292      	uxth	r2, r2
 80073d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073dc:	b29a      	uxth	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073e6:	b292      	uxth	r2, r2
 80073e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0204 	orr.w	r2, r2, #4
 80073fe:	b292      	uxth	r2, r2
 8007400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f00e f935 	bl	8015674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f005 f97d 	bl	800c70e <USB_ReadInterrupts>
 8007414:	4603      	mov	r3, r0
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d13f      	bne.n	800749e <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007430:	b292      	uxth	r2, r2
 8007432:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800743c:	2b00      	cmp	r3, #0
 800743e:	d12b      	bne.n	8007498 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007448:	b29a      	uxth	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0204 	orr.w	r2, r2, #4
 8007452:	b292      	uxth	r2, r2
 8007454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	b292      	uxth	r2, r2
 800746c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007480:	b29b      	uxth	r3, r3
 8007482:	089b      	lsrs	r3, r3, #2
 8007484:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800748e:	2101      	movs	r1, #1
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fd47 	bl	8007f24 <HAL_PCDEx_LPM_Callback>
 8007496:	e002      	b.n	800749e <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f00e f8eb 	bl	8015674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f005 f933 	bl	800c70e <USB_ReadInterrupts>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b2:	d10e      	bne.n	80074d2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074c6:	b292      	uxth	r2, r2
 80074c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f00e f8a4 	bl	801561a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f005 f919 	bl	800c70e <USB_ReadInterrupts>
 80074dc:	4603      	mov	r3, r0
 80074de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e6:	d10b      	bne.n	8007500 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074fa:	b292      	uxth	r2, r2
 80074fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_PCD_SetAddress+0x1a>
 800751e:	2302      	movs	r3, #2
 8007520:	e013      	b.n	800754a <HAL_PCD_SetAddress+0x42>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	4611      	mov	r1, r2
 800753a:	4618      	mov	r0, r3
 800753c:	f005 f8bc 	bl	800c6b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	4608      	mov	r0, r1
 800755c:	4611      	mov	r1, r2
 800755e:	461a      	mov	r2, r3
 8007560:	4603      	mov	r3, r0
 8007562:	70fb      	strb	r3, [r7, #3]
 8007564:	460b      	mov	r3, r1
 8007566:	803b      	strh	r3, [r7, #0]
 8007568:	4613      	mov	r3, r2
 800756a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007574:	2b00      	cmp	r3, #0
 8007576:	da0b      	bge.n	8007590 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	015b      	lsls	r3, r3, #5
 8007580:	3328      	adds	r3, #40	; 0x28
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4413      	add	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	705a      	strb	r2, [r3, #1]
 800758e:	e00b      	b.n	80075a8 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	015b      	lsls	r3, r3, #5
 8007598:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	4413      	add	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80075b4:	883a      	ldrh	r2, [r7, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	78ba      	ldrb	r2, [r7, #2]
 80075be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80075d2:	78bb      	ldrb	r3, [r7, #2]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d102      	bne.n	80075de <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_PCD_EP_Open+0x9a>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e00e      	b.n	800760a <HAL_PCD_EP_Open+0xb8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f003 fe9c 	bl	800b338 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8007608:	7afb      	ldrb	r3, [r7, #11]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800761e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007622:	2b00      	cmp	r3, #0
 8007624:	da0b      	bge.n	800763e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	015b      	lsls	r3, r3, #5
 800762e:	3328      	adds	r3, #40	; 0x28
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	705a      	strb	r2, [r3, #1]
 800763c:	e00b      	b.n	8007656 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	015b      	lsls	r3, r3, #5
 8007646:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	b2da      	uxtb	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007668:	2b01      	cmp	r3, #1
 800766a:	d101      	bne.n	8007670 <HAL_PCD_EP_Close+0x5e>
 800766c:	2302      	movs	r3, #2
 800766e:	e00e      	b.n	800768e <HAL_PCD_EP_Close+0x7c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68f9      	ldr	r1, [r7, #12]
 800767e:	4618      	mov	r0, r3
 8007680:	f004 fa08 	bl	800ba94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	460b      	mov	r3, r1
 80076a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076a6:	7afb      	ldrb	r3, [r7, #11]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	015b      	lsls	r3, r3, #5
 80076ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2200      	movs	r2, #0
 80076c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2200      	movs	r2, #0
 80076ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6979      	ldr	r1, [r7, #20]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f004 fbbe 	bl	800be6e <USB_EPStartXfer>
 80076f2:	e005      	b.n	8007700 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6979      	ldr	r1, [r7, #20]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f004 fbb7 	bl	800be6e <USB_EPStartXfer>
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	330a      	adds	r3, #10
 8007720:	015b      	lsls	r3, r3, #5
 8007722:	4413      	add	r3, r2
 8007724:	3304      	adds	r3, #4
 8007726:	681b      	ldr	r3, [r3, #0]
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	460b      	mov	r3, r1
 8007742:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	015b      	lsls	r3, r3, #5
 800774c:	3328      	adds	r3, #40	; 0x28
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2200      	movs	r2, #0
 8007764:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2201      	movs	r2, #1
 800776a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	b2da      	uxtb	r2, r3
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6979      	ldr	r1, [r7, #20]
 8007788:	4618      	mov	r0, r3
 800778a:	f004 fb70 	bl	800be6e <USB_EPStartXfer>
 800778e:	e005      	b.n	800779c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6979      	ldr	r1, [r7, #20]
 8007796:	4618      	mov	r0, r3
 8007798:	f004 fb69 	bl	800be6e <USB_EPStartXfer>
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	f003 0207 	and.w	r2, r3, #7
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d901      	bls.n	80077c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e046      	b.n	8007852 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da0b      	bge.n	80077e4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	015b      	lsls	r3, r3, #5
 80077d4:	3328      	adds	r3, #40	; 0x28
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	705a      	strb	r2, [r3, #1]
 80077e2:	e009      	b.n	80077f8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	015b      	lsls	r3, r3, #5
 80077e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	4413      	add	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	b2da      	uxtb	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_PCD_EP_SetStall+0x72>
 8007814:	2302      	movs	r3, #2
 8007816:	e01c      	b.n	8007852 <HAL_PCD_EP_SetStall+0xac>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	4618      	mov	r0, r3
 8007828:	f004 fe47 	bl	800c4ba <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b00      	cmp	r3, #0
 8007834:	d108      	bne.n	8007848 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f004 ff73 	bl	800c72e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	f003 020f 	and.w	r2, r3, #15
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d901      	bls.n	8007878 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e03a      	b.n	80078ee <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da0b      	bge.n	8007898 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	015b      	lsls	r3, r3, #5
 8007888:	3328      	adds	r3, #40	; 0x28
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4413      	add	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	705a      	strb	r2, [r3, #1]
 8007896:	e00b      	b.n	80078b0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	015b      	lsls	r3, r3, #5
 80078a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_PCD_EP_ClrStall+0x76>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e00e      	b.n	80078ee <HAL_PCD_EP_ClrStall+0x94>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68f9      	ldr	r1, [r7, #12]
 80078de:	4618      	mov	r0, r3
 80078e0:	f004 fe3c 	bl	800c55c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b08e      	sub	sp, #56	; 0x38
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80078fe:	e29c      	b.n	8007e3a <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007908:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800790a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8007916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 8152 	bne.w	8007bc4 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007922:	f003 0310 	and.w	r3, r3, #16
 8007926:	2b00      	cmp	r3, #0
 8007928:	d150      	bne.n	80079cc <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793a:	81fb      	strh	r3, [r7, #14]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	89fb      	ldrh	r3, [r7, #14]
 8007942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794a:	b29b      	uxth	r3, r3
 800794c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3328      	adds	r3, #40	; 0x28
 8007952:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795c:	b29b      	uxth	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	4413      	add	r3, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	4413      	add	r3, r2
 800796e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	695a      	ldr	r2, [r3, #20]
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	441a      	add	r2, r3
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800798a:	2100      	movs	r1, #0
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f00d fe2d 	bl	80155ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 824d 	beq.w	8007e3a <PCD_EP_ISR_Handler+0x544>
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 8248 	bne.w	8007e3a <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	b292      	uxth	r2, r2
 80079be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80079ca:	e236      	b.n	8007e3a <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80079dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80079de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d032      	beq.n	8007a4c <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4413      	add	r3, r2
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6812      	ldr	r2, [r2, #0]
 80079fe:	4413      	add	r3, r2
 8007a00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f004 fed1 	bl	800c7c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a32:	4013      	ands	r3, r2
 8007a34:	823b      	strh	r3, [r7, #16]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	8a3a      	ldrh	r2, [r7, #16]
 8007a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a40:	b292      	uxth	r2, r2
 8007a42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f00d fda7 	bl	8015598 <HAL_PCD_SetupStageCallback>
 8007a4a:	e1f6      	b.n	8007e3a <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f280 81f2 	bge.w	8007e3a <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a62:	4013      	ands	r3, r2
 8007a64:	83fb      	strh	r3, [r7, #30]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	8bfa      	ldrh	r2, [r7, #30]
 8007a6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a70:	b292      	uxth	r2, r2
 8007a72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	461a      	mov	r2, r3
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	4413      	add	r3, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6812      	ldr	r2, [r2, #0]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d019      	beq.n	8007ad8 <PCD_EP_ISR_Handler+0x1e2>
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d015      	beq.n	8007ad8 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	6959      	ldr	r1, [r3, #20]
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	f004 fe83 	bl	800c7c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	695a      	ldr	r2, [r3, #20]
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	441a      	add	r2, r3
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f00d fd72 	bl	80155bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	4413      	add	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d112      	bne.n	8007b26 <PCD_EP_ISR_Handler+0x230>
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	e02f      	b.n	8007b86 <PCD_EP_ISR_Handler+0x290>
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b2c:	d813      	bhi.n	8007b56 <PCD_EP_ISR_Handler+0x260>
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	633b      	str	r3, [r7, #48]	; 0x30
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <PCD_EP_ISR_Handler+0x252>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	3301      	adds	r3, #1
 8007b46:	633b      	str	r3, [r7, #48]	; 0x30
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	029b      	lsls	r3, r3, #10
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	e017      	b.n	8007b86 <PCD_EP_ISR_Handler+0x290>
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	095b      	lsrs	r3, r3, #5
 8007b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 031f 	and.w	r3, r3, #31
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <PCD_EP_ISR_Handler+0x27a>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	029b      	lsls	r3, r3, #10
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	827b      	strh	r3, [r7, #18]
 8007b98:	8a7b      	ldrh	r3, [r7, #18]
 8007b9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b9e:	827b      	strh	r3, [r7, #18]
 8007ba0:	8a7b      	ldrh	r3, [r7, #18]
 8007ba2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ba6:	827b      	strh	r3, [r7, #18]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	8a7b      	ldrh	r3, [r7, #18]
 8007bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	8013      	strh	r3, [r2, #0]
 8007bc2:	e13a      	b.n	8007e3a <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007bd6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f280 80d6 	bge.w	8007d8c <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	853b      	strh	r3, [r7, #40]	; 0x28
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007c0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007c12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007c16:	015b      	lsls	r3, r3, #5
 8007c18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4413      	add	r3, r2
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	7b1b      	ldrb	r3, [r3, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d11f      	bne.n	8007c6a <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	4413      	add	r3, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	4413      	add	r3, r2
 8007c44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c4e:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8007c50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d075      	beq.n	8007d42 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	6959      	ldr	r1, [r3, #20]
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	88da      	ldrh	r2, [r3, #6]
 8007c62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c64:	f004 fdb0 	bl	800c7c8 <USB_ReadPMA>
 8007c68:	e06b      	b.n	8007d42 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c84:	847b      	strh	r3, [r7, #34]	; 0x22
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	441a      	add	r2, r3
 8007c94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01f      	beq.n	8007d04 <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ce8:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8007cea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d028      	beq.n	8007d42 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	6959      	ldr	r1, [r3, #20]
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	891a      	ldrh	r2, [r3, #8]
 8007cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cfe:	f004 fd63 	bl	800c7c8 <USB_ReadPMA>
 8007d02:	e01e      	b.n	8007d42 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	4413      	add	r3, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d28:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8007d2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d008      	beq.n	8007d42 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	6959      	ldr	r1, [r3, #20]
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	895a      	ldrh	r2, [r3, #10]
 8007d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d3e:	f004 fd43 	bl	800c7c8 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	69da      	ldr	r2, [r3, #28]
 8007d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d48:	441a      	add	r2, r3
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d54:	441a      	add	r2, r3
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <PCD_EP_ISR_Handler+0x476>
 8007d62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d206      	bcs.n	8007d7a <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f00d fc22 	bl	80155bc <HAL_PCD_DataOutStageCallback>
 8007d78:	e008      	b.n	8007d8c <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	7819      	ldrb	r1, [r3, #0]
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	695a      	ldr	r2, [r3, #20]
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fc85 	bl	8007696 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007d8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d051      	beq.n	8007e3a <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8007d96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d9a:	015b      	lsls	r3, r3, #5
 8007d9c:	3328      	adds	r3, #40	; 0x28
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	4413      	add	r3, r2
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	461a      	mov	r2, r3
 8007daa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	843b      	strh	r3, [r7, #32]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	441a      	add	r2, r3
 8007dce:	8c3b      	ldrh	r3, [r7, #32]
 8007dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6812      	ldr	r2, [r2, #0]
 8007df4:	4413      	add	r3, r2
 8007df6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	695a      	ldr	r2, [r3, #20]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	441a      	add	r2, r3
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f00d fbe3 	bl	80155ec <HAL_PCD_DataInStageCallback>
 8007e26:	e008      	b.n	8007e3a <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	7819      	ldrb	r1, [r3, #0]
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	695a      	ldr	r2, [r3, #20]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fc7d 	bl	8007734 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	b21b      	sxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f6ff ad5a 	blt.w	8007900 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3738      	adds	r7, #56	; 0x38
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b087      	sub	sp, #28
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	607b      	str	r3, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	817b      	strh	r3, [r7, #10]
 8007e64:	4613      	mov	r3, r2
 8007e66:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007e68:	897b      	ldrh	r3, [r7, #10]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e74:	897b      	ldrh	r3, [r7, #10]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	015b      	lsls	r3, r3, #5
 8007e7c:	3328      	adds	r3, #40	; 0x28
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e006      	b.n	8007e94 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e86:	897b      	ldrh	r3, [r7, #10]
 8007e88:	015b      	lsls	r3, r3, #5
 8007e8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4413      	add	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007e94:	893b      	ldrh	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	80da      	strh	r2, [r3, #6]
 8007ea8:	e00b      	b.n	8007ec2 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2201      	movs	r2, #1
 8007eae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	0c1b      	lsrs	r3, r3, #16
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f043 0302 	orr.w	r3, r3, #2
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a04      	ldr	r2, [pc, #16]	; (8007f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4a:	6013      	str	r3, [r2, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	58000400 	.word	0x58000400

08007f5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	58000400 	.word	0x58000400

08007f78 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	4a04      	ldr	r2, [pc, #16]	; (8007f94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f86:	6053      	str	r3, [r2, #4]
}
 8007f88:	bf00      	nop
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	58000400 	.word	0x58000400

08007f98 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007faa:	d101      	bne.n	8007fb0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e000      	b.n	8007fb2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <LL_RCC_HSE_Enable>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fce:	6013      	str	r3, [r2, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <LL_RCC_HSE_Disable>:
{
 8007fda:	b480      	push	{r7}
 8007fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fec:	6013      	str	r3, [r2, #0]
}
 8007fee:	bf00      	nop
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <LL_RCC_HSE_IsReady>:
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800800a:	d101      	bne.n	8008010 <LL_RCC_HSE_IsReady+0x18>
 800800c:	2301      	movs	r3, #1
 800800e:	e000      	b.n	8008012 <LL_RCC_HSE_IsReady+0x1a>
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <LL_RCC_HSI_Enable>:
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800802a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802e:	6013      	str	r3, [r2, #0]
}
 8008030:	bf00      	nop
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <LL_RCC_HSI_Disable>:
{
 800803a:	b480      	push	{r7}
 800803c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800803e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800804c:	6013      	str	r3, [r2, #0]
}
 800804e:	bf00      	nop
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <LL_RCC_HSI_IsReady>:
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800805c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806a:	d101      	bne.n	8008070 <LL_RCC_HSI_IsReady+0x18>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <LL_RCC_HSI_IsReady+0x1a>
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <LL_RCC_HSI_SetCalibTrimming>:
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	061b      	lsls	r3, r3, #24
 8008092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008096:	4313      	orrs	r3, r2
 8008098:	604b      	str	r3, [r1, #4]
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <LL_RCC_HSI48_Enable>:
{
 80080a6:	b480      	push	{r7}
 80080a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80080aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80080be:	bf00      	nop
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <LL_RCC_HSI48_Disable>:
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80080cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80080e0:	bf00      	nop
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <LL_RCC_HSI48_IsReady>:
{
 80080ea:	b480      	push	{r7}
 80080ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80080ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d101      	bne.n	8008102 <LL_RCC_HSI48_IsReady+0x18>
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <LL_RCC_HSI48_IsReady+0x1a>
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <LL_RCC_LSE_Enable>:
{
 800810e:	b480      	push	{r7}
 8008110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008126:	bf00      	nop
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <LL_RCC_LSE_Disable>:
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008140:	f023 0301 	bic.w	r3, r3, #1
 8008144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008148:	bf00      	nop
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <LL_RCC_LSE_EnableBypass>:
{
 8008152:	b480      	push	{r7}
 8008154:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008162:	f043 0304 	orr.w	r3, r3, #4
 8008166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800816a:	bf00      	nop
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <LL_RCC_LSE_DisableBypass>:
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008184:	f023 0304 	bic.w	r3, r3, #4
 8008188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800818c:	bf00      	nop
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <LL_RCC_LSE_IsReady>:
{
 8008196:	b480      	push	{r7}
 8008198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800819a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d101      	bne.n	80081ae <LL_RCC_LSE_IsReady+0x18>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <LL_RCC_LSE_IsReady+0x1a>
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <LL_RCC_LSI1_Enable>:
{
 80081ba:	b480      	push	{r7}
 80081bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80081be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80081d2:	bf00      	nop
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <LL_RCC_LSI1_Disable>:
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80081e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <LL_RCC_LSI1_IsReady>:
{
 80081fe:	b480      	push	{r7}
 8008200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b02      	cmp	r3, #2
 8008210:	d101      	bne.n	8008216 <LL_RCC_LSI1_IsReady+0x18>
 8008212:	2301      	movs	r3, #1
 8008214:	e000      	b.n	8008218 <LL_RCC_LSI1_IsReady+0x1a>
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <LL_RCC_LSI2_Enable>:
{
 8008222:	b480      	push	{r7}
 8008224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800822a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800822e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008232:	f043 0304 	orr.w	r3, r3, #4
 8008236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800823a:	bf00      	nop
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <LL_RCC_LSI2_Disable>:
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800824c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008254:	f023 0304 	bic.w	r3, r3, #4
 8008258:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800825c:	bf00      	nop
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <LL_RCC_LSI2_IsReady>:
{
 8008266:	b480      	push	{r7}
 8008268:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800826a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800826e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	2b08      	cmp	r3, #8
 8008278:	d101      	bne.n	800827e <LL_RCC_LSI2_IsReady+0x18>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <LL_RCC_LSI2_IsReady+0x1a>
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <LL_RCC_LSI2_SetTrimming>:
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800829a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <LL_RCC_MSI_Enable>:
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80082bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	6013      	str	r3, [r2, #0]
}
 80082cc:	bf00      	nop
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <LL_RCC_MSI_Disable>:
{
 80082d6:	b480      	push	{r7}
 80082d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80082da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082e4:	f023 0301 	bic.w	r3, r3, #1
 80082e8:	6013      	str	r3, [r2, #0]
}
 80082ea:	bf00      	nop
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <LL_RCC_MSI_IsReady>:
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80082f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b02      	cmp	r3, #2
 8008304:	d101      	bne.n	800830a <LL_RCC_MSI_IsReady+0x16>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <LL_RCC_MSI_IsReady+0x18>
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <LL_RCC_MSI_SetRange>:
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800831e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4313      	orrs	r3, r2
 8008330:	600b      	str	r3, [r1, #0]
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <LL_RCC_MSI_GetRange>:
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800834e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2bb0      	cmp	r3, #176	; 0xb0
 8008354:	d901      	bls.n	800835a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8008356:	23b0      	movs	r3, #176	; 0xb0
 8008358:	607b      	str	r3, [r7, #4]
  return msiRange;
 800835a:	687b      	ldr	r3, [r7, #4]
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008382:	4313      	orrs	r3, r2
 8008384:	604b      	str	r3, [r1, #4]
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <LL_RCC_SetSysClkSource>:
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800839a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f023 0203 	bic.w	r2, r3, #3
 80083a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	608b      	str	r3, [r1, #8]
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <LL_RCC_GetSysClkSource>:
{
 80083ba:	b480      	push	{r7}
 80083bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80083be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 030c 	and.w	r3, r3, #12
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <LL_RCC_SetAHBPrescaler>:
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80083da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	608b      	str	r3, [r1, #8]
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <LL_C2_RCC_SetAHBPrescaler>:
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008406:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800840a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800840e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <LL_RCC_SetAHB4Prescaler>:
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800842e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008432:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008436:	f023 020f 	bic.w	r2, r3, #15
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	091b      	lsrs	r3, r3, #4
 800843e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <LL_RCC_SetAPB1Prescaler>:
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800845c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4313      	orrs	r3, r2
 800846e:	608b      	str	r3, [r1, #8]
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <LL_RCC_SetAPB2Prescaler>:
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800848e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4313      	orrs	r3, r2
 8008496:	608b      	str	r3, [r1, #8]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <LL_RCC_GetAHBPrescaler>:
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80084a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <LL_C2_RCC_GetAHBPrescaler>:
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80084c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80084c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <LL_RCC_GetAHB4Prescaler>:
{
 80084d6:	b480      	push	{r7}
 80084d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80084da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <LL_RCC_GetAPB1Prescaler>:
{
 80084f2:	b480      	push	{r7}
 80084f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80084f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008500:	4618      	mov	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <LL_RCC_GetAPB2Prescaler>:
{
 800850a:	b480      	push	{r7}
 800850c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800850e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008518:	4618      	mov	r0, r3
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <LL_RCC_PLL_Enable>:
{
 8008522:	b480      	push	{r7}
 8008524:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008534:	6013      	str	r3, [r2, #0]
}
 8008536:	bf00      	nop
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <LL_RCC_PLL_Disable>:
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800854e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008552:	6013      	str	r3, [r2, #0]
}
 8008554:	bf00      	nop
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <LL_RCC_PLL_IsReady>:
{
 800855e:	b480      	push	{r7}
 8008560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008570:	d101      	bne.n	8008576 <LL_RCC_PLL_IsReady+0x18>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <LL_RCC_PLL_IsReady+0x1a>
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <LL_RCC_PLL_GetN>:
{
 8008582:	b480      	push	{r7}
 8008584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008592:	4618      	mov	r0, r3
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <LL_RCC_PLL_GetR>:
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80085a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <LL_RCC_PLL_GetDivider>:
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80085b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <LL_RCC_PLL_GetMainSource>:
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80085d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f003 0303 	and.w	r3, r3, #3
}
 80085da:	4618      	mov	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <LL_RCC_IsActiveFlag_HPRE>:
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80085e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f6:	d101      	bne.n	80085fc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800860c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008610:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800861c:	d101      	bne.n	8008622 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008636:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800863a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800863e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008642:	d101      	bne.n	8008648 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008644:	2301      	movs	r3, #1
 8008646:	e000      	b.n	800864a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008666:	d101      	bne.n	800866c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800867c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800868a:	d101      	bne.n	8008690 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800868c:	2301      	movs	r3, #1
 800868e:	e000      	b.n	8008692 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b08d      	sub	sp, #52	; 0x34
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e37e      	b.n	8008dac <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8092 	beq.w	80087e0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086bc:	f7ff fe7d 	bl	80083ba <LL_RCC_GetSysClkSource>
 80086c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086c2:	f7ff ff83 	bl	80085cc <LL_RCC_PLL_GetMainSource>
 80086c6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <HAL_RCC_OscConfig+0x3e>
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	2b0c      	cmp	r3, #12
 80086d2:	d14c      	bne.n	800876e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d149      	bne.n	800876e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80086da:	f7ff fe0b 	bl	80082f4 <LL_RCC_MSI_IsReady>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <HAL_RCC_OscConfig+0x54>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e35d      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80086f4:	f7ff fe23 	bl	800833e <LL_RCC_MSI_GetRange>
 80086f8:	4603      	mov	r3, r0
 80086fa:	429c      	cmp	r4, r3
 80086fc:	d914      	bls.n	8008728 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fd5c 	bl	80091c0 <RCC_SetFlashLatencyFromMSIRange>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e34c      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fdfd 	bl	8008316 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fe21 	bl	8008368 <LL_RCC_MSI_SetCalibTrimming>
 8008726:	e013      	b.n	8008750 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff fdf2 	bl	8008316 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff fe16 	bl	8008368 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fd3d 	bl	80091c0 <RCC_SetFlashLatencyFromMSIRange>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e32d      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008750:	f000 fcda 	bl	8009108 <HAL_RCC_GetHCLKFreq>
 8008754:	4602      	mov	r2, r0
 8008756:	4bb3      	ldr	r3, [pc, #716]	; (8008a24 <HAL_RCC_OscConfig+0x388>)
 8008758:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800875a:	4bb3      	ldr	r3, [pc, #716]	; (8008a28 <HAL_RCC_OscConfig+0x38c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f7fb fbf0 	bl	8003f44 <HAL_InitTick>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d039      	beq.n	80087de <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e31e      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01e      	beq.n	80087b4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008776:	f7ff fd9f 	bl	80082b8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800877a:	f7fb feb5 	bl	80044e8 <HAL_GetTick>
 800877e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008782:	f7fb feb1 	bl	80044e8 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e30b      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008794:	f7ff fdae 	bl	80082f4 <LL_RCC_MSI_IsReady>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f1      	beq.n	8008782 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fdb7 	bl	8008316 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fddb 	bl	8008368 <LL_RCC_MSI_SetCalibTrimming>
 80087b2:	e015      	b.n	80087e0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80087b4:	f7ff fd8f 	bl	80082d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80087b8:	f7fb fe96 	bl	80044e8 <HAL_GetTick>
 80087bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087c0:	f7fb fe92 	bl	80044e8 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e2ec      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80087d2:	f7ff fd8f 	bl	80082f4 <LL_RCC_MSI_IsReady>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1f1      	bne.n	80087c0 <HAL_RCC_OscConfig+0x124>
 80087dc:	e000      	b.n	80087e0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80087de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d04e      	beq.n	800888a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087ec:	f7ff fde5 	bl	80083ba <LL_RCC_GetSysClkSource>
 80087f0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087f2:	f7ff feeb 	bl	80085cc <LL_RCC_PLL_GetMainSource>
 80087f6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d005      	beq.n	800880a <HAL_RCC_OscConfig+0x16e>
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	2b0c      	cmp	r3, #12
 8008802:	d10d      	bne.n	8008820 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2b03      	cmp	r3, #3
 8008808:	d10a      	bne.n	8008820 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800880a:	f7ff fbf5 	bl	8007ff8 <LL_RCC_HSE_IsReady>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d039      	beq.n	8008888 <HAL_RCC_OscConfig+0x1ec>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d135      	bne.n	8008888 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e2c5      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008828:	d102      	bne.n	8008830 <HAL_RCC_OscConfig+0x194>
 800882a:	f7ff fbc7 	bl	8007fbc <LL_RCC_HSE_Enable>
 800882e:	e001      	b.n	8008834 <HAL_RCC_OscConfig+0x198>
 8008830:	f7ff fbd3 	bl	8007fda <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d012      	beq.n	8008862 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7fb fe54 	bl	80044e8 <HAL_GetTick>
 8008840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008844:	f7fb fe50 	bl	80044e8 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b64      	cmp	r3, #100	; 0x64
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e2aa      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008856:	f7ff fbcf 	bl	8007ff8 <LL_RCC_HSE_IsReady>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0f1      	beq.n	8008844 <HAL_RCC_OscConfig+0x1a8>
 8008860:	e013      	b.n	800888a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008862:	f7fb fe41 	bl	80044e8 <HAL_GetTick>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800886a:	f7fb fe3d 	bl	80044e8 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b64      	cmp	r3, #100	; 0x64
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e297      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800887c:	f7ff fbbc 	bl	8007ff8 <LL_RCC_HSE_IsReady>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1f1      	bne.n	800886a <HAL_RCC_OscConfig+0x1ce>
 8008886:	e000      	b.n	800888a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d051      	beq.n	800893a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008896:	f7ff fd90 	bl	80083ba <LL_RCC_GetSysClkSource>
 800889a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800889c:	f7ff fe96 	bl	80085cc <LL_RCC_PLL_GetMainSource>
 80088a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	d005      	beq.n	80088b4 <HAL_RCC_OscConfig+0x218>
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	2b0c      	cmp	r3, #12
 80088ac:	d113      	bne.n	80088d6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d110      	bne.n	80088d6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088b4:	f7ff fbd0 	bl	8008058 <LL_RCC_HSI_IsReady>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d005      	beq.n	80088ca <HAL_RCC_OscConfig+0x22e>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e270      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fbd4 	bl	800807c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088d4:	e031      	b.n	800893a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d019      	beq.n	8008912 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088de:	f7ff fb9d 	bl	800801c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e2:	f7fb fe01 	bl	80044e8 <HAL_GetTick>
 80088e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80088e8:	e008      	b.n	80088fc <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ea:	f7fb fdfd 	bl	80044e8 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e257      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80088fc:	f7ff fbac 	bl	8008058 <LL_RCC_HSI_IsReady>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0f1      	beq.n	80088ea <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fbb6 	bl	800807c <LL_RCC_HSI_SetCalibTrimming>
 8008910:	e013      	b.n	800893a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008912:	f7ff fb92 	bl	800803a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008916:	f7fb fde7 	bl	80044e8 <HAL_GetTick>
 800891a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800891e:	f7fb fde3 	bl	80044e8 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e23d      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008930:	f7ff fb92 	bl	8008058 <LL_RCC_HSI_IsReady>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1f1      	bne.n	800891e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0308 	and.w	r3, r3, #8
 8008942:	2b00      	cmp	r3, #0
 8008944:	d106      	bne.n	8008954 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 80a3 	beq.w	8008a9a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d076      	beq.n	8008a4a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	d046      	beq.n	80089f6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008968:	f7ff fc49 	bl	80081fe <LL_RCC_LSI1_IsReady>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d113      	bne.n	800899a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008972:	f7ff fc22 	bl	80081ba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008976:	f7fb fdb7 	bl	80044e8 <HAL_GetTick>
 800897a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800897c:	e008      	b.n	8008990 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800897e:	f7fb fdb3 	bl	80044e8 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d901      	bls.n	8008990 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e20d      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008990:	f7ff fc35 	bl	80081fe <LL_RCC_LSI1_IsReady>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f1      	beq.n	800897e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800899a:	f7ff fc42 	bl	8008222 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899e:	f7fb fda3 	bl	80044e8 <HAL_GetTick>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80089a6:	f7fb fd9f 	bl	80044e8 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e1f9      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80089b8:	f7ff fc55 	bl	8008266 <LL_RCC_LSI2_IsReady>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f1      	beq.n	80089a6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fc5f 	bl	800828a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80089cc:	f7ff fc06 	bl	80081dc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d0:	f7fb fd8a 	bl	80044e8 <HAL_GetTick>
 80089d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80089d8:	f7fb fd86 	bl	80044e8 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e1e0      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80089ea:	f7ff fc08 	bl	80081fe <LL_RCC_LSI1_IsReady>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f1      	bne.n	80089d8 <HAL_RCC_OscConfig+0x33c>
 80089f4:	e051      	b.n	8008a9a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80089f6:	f7ff fbe0 	bl	80081ba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fa:	f7fb fd75 	bl	80044e8 <HAL_GetTick>
 80089fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008a00:	e008      	b.n	8008a14 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008a02:	f7fb fd71 	bl	80044e8 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e1cb      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008a14:	f7ff fbf3 	bl	80081fe <LL_RCC_LSI1_IsReady>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f1      	beq.n	8008a02 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008a1e:	f7ff fc11 	bl	8008244 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008a22:	e00c      	b.n	8008a3e <HAL_RCC_OscConfig+0x3a2>
 8008a24:	20000044 	.word	0x20000044
 8008a28:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008a2c:	f7fb fd5c 	bl	80044e8 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e1b6      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008a3e:	f7ff fc12 	bl	8008266 <LL_RCC_LSI2_IsReady>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f1      	bne.n	8008a2c <HAL_RCC_OscConfig+0x390>
 8008a48:	e027      	b.n	8008a9a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008a4a:	f7ff fbfb 	bl	8008244 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a4e:	f7fb fd4b 	bl	80044e8 <HAL_GetTick>
 8008a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008a54:	e008      	b.n	8008a68 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008a56:	f7fb fd47 	bl	80044e8 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d901      	bls.n	8008a68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e1a1      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008a68:	f7ff fbfd 	bl	8008266 <LL_RCC_LSI2_IsReady>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f1      	bne.n	8008a56 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008a72:	f7ff fbb3 	bl	80081dc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a76:	f7fb fd37 	bl	80044e8 <HAL_GetTick>
 8008a7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008a7c:	e008      	b.n	8008a90 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008a7e:	f7fb fd33 	bl	80044e8 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d901      	bls.n	8008a90 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e18d      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008a90:	f7ff fbb5 	bl	80081fe <LL_RCC_LSI1_IsReady>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f1      	bne.n	8008a7e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d05b      	beq.n	8008b5e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aa6:	4bb5      	ldr	r3, [pc, #724]	; (8008d7c <HAL_RCC_OscConfig+0x6e0>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d114      	bne.n	8008adc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008ab2:	f7ff fa43 	bl	8007f3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ab6:	f7fb fd17 	bl	80044e8 <HAL_GetTick>
 8008aba:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008abc:	e008      	b.n	8008ad0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008abe:	f7fb fd13 	bl	80044e8 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e16d      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ad0:	4baa      	ldr	r3, [pc, #680]	; (8008d7c <HAL_RCC_OscConfig+0x6e0>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0f0      	beq.n	8008abe <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d102      	bne.n	8008aea <HAL_RCC_OscConfig+0x44e>
 8008ae4:	f7ff fb13 	bl	800810e <LL_RCC_LSE_Enable>
 8008ae8:	e00c      	b.n	8008b04 <HAL_RCC_OscConfig+0x468>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2b05      	cmp	r3, #5
 8008af0:	d104      	bne.n	8008afc <HAL_RCC_OscConfig+0x460>
 8008af2:	f7ff fb2e 	bl	8008152 <LL_RCC_LSE_EnableBypass>
 8008af6:	f7ff fb0a 	bl	800810e <LL_RCC_LSE_Enable>
 8008afa:	e003      	b.n	8008b04 <HAL_RCC_OscConfig+0x468>
 8008afc:	f7ff fb18 	bl	8008130 <LL_RCC_LSE_Disable>
 8008b00:	f7ff fb38 	bl	8008174 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d014      	beq.n	8008b36 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0c:	f7fb fcec 	bl	80044e8 <HAL_GetTick>
 8008b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008b12:	e00a      	b.n	8008b2a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b14:	f7fb fce8 	bl	80044e8 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e140      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008b2a:	f7ff fb34 	bl	8008196 <LL_RCC_LSE_IsReady>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d0ef      	beq.n	8008b14 <HAL_RCC_OscConfig+0x478>
 8008b34:	e013      	b.n	8008b5e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b36:	f7fb fcd7 	bl	80044e8 <HAL_GetTick>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008b3c:	e00a      	b.n	8008b54 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b3e:	f7fb fcd3 	bl	80044e8 <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d901      	bls.n	8008b54 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e12b      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008b54:	f7ff fb1f 	bl	8008196 <LL_RCC_LSE_IsReady>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1ef      	bne.n	8008b3e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d02c      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d014      	beq.n	8008b9c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b72:	f7ff fa98 	bl	80080a6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b76:	f7fb fcb7 	bl	80044e8 <HAL_GetTick>
 8008b7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008b7c:	e008      	b.n	8008b90 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b7e:	f7fb fcb3 	bl	80044e8 <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d901      	bls.n	8008b90 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e10d      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008b90:	f7ff faab 	bl	80080ea <LL_RCC_HSI48_IsReady>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f1      	beq.n	8008b7e <HAL_RCC_OscConfig+0x4e2>
 8008b9a:	e013      	b.n	8008bc4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b9c:	f7ff fa94 	bl	80080c8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba0:	f7fb fca2 	bl	80044e8 <HAL_GetTick>
 8008ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008ba6:	e008      	b.n	8008bba <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ba8:	f7fb fc9e 	bl	80044e8 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d901      	bls.n	8008bba <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e0f8      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008bba:	f7ff fa96 	bl	80080ea <LL_RCC_HSI48_IsReady>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1f1      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 80ee 	beq.w	8008daa <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bce:	f7ff fbf4 	bl	80083ba <LL_RCC_GetSysClkSource>
 8008bd2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	f040 80af 	bne.w	8008d44 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f003 0203 	and.w	r2, r3, #3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d123      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d11c      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d114      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d10d      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d106      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d05d      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	2b0c      	cmp	r3, #12
 8008c40:	d058      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e0ab      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008c54:	f7ff fc74 	bl	8008540 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c58:	f7fb fc46 	bl	80044e8 <HAL_GetTick>
 8008c5c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c5e:	e008      	b.n	8008c72 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c60:	f7fb fc42 	bl	80044e8 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e09c      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1ef      	bne.n	8008c60 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	4b3e      	ldr	r3, [pc, #248]	; (8008d80 <HAL_RCC_OscConfig+0x6e4>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008c92:	4311      	orrs	r1, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c98:	0212      	lsls	r2, r2, #8
 8008c9a:	4311      	orrs	r1, r2
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ca0:	4311      	orrs	r1, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008ca6:	4311      	orrs	r1, r2
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008cac:	430a      	orrs	r2, r1
 8008cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008cb6:	f7ff fc34 	bl	8008522 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cca:	f7fb fc0d 	bl	80044e8 <HAL_GetTick>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd2:	f7fb fc09 	bl	80044e8 <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e063      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0ef      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cf2:	e05a      	b.n	8008daa <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e059      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d151      	bne.n	8008daa <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008d06:	f7ff fc0c 	bl	8008522 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d18:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d1a:	f7fb fbe5 	bl	80044e8 <HAL_GetTick>
 8008d1e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d22:	f7fb fbe1 	bl	80044e8 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e03b      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0ef      	beq.n	8008d22 <HAL_RCC_OscConfig+0x686>
 8008d42:	e032      	b.n	8008daa <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	2b0c      	cmp	r3, #12
 8008d48:	d02d      	beq.n	8008da6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d4a:	f7ff fbf9 	bl	8008540 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d58:	f023 0303 	bic.w	r3, r3, #3
 8008d5c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8008d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d68:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8008d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d72:	f7fb fbb9 	bl	80044e8 <HAL_GetTick>
 8008d76:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d78:	e00d      	b.n	8008d96 <HAL_RCC_OscConfig+0x6fa>
 8008d7a:	bf00      	nop
 8008d7c:	58000400 	.word	0x58000400
 8008d80:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d84:	f7fb fbb0 	bl	80044e8 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e00a      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1ef      	bne.n	8008d84 <HAL_RCC_OscConfig+0x6e8>
 8008da4:	e001      	b.n	8008daa <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3734      	adds	r7, #52	; 0x34
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd90      	pop	{r4, r7, pc}

08008db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e12d      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dc8:	4b98      	ldr	r3, [pc, #608]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0307 	and.w	r3, r3, #7
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d91b      	bls.n	8008e0e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dd6:	4b95      	ldr	r3, [pc, #596]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f023 0207 	bic.w	r2, r3, #7
 8008dde:	4993      	ldr	r1, [pc, #588]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008de6:	f7fb fb7f 	bl	80044e8 <HAL_GetTick>
 8008dea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dec:	e008      	b.n	8008e00 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008dee:	f7fb fb7b 	bl	80044e8 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d901      	bls.n	8008e00 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e111      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e00:	4b8a      	ldr	r3, [pc, #552]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0307 	and.w	r3, r3, #7
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d1ef      	bne.n	8008dee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d016      	beq.n	8008e48 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fad7 	bl	80083d2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e24:	f7fb fb60 	bl	80044e8 <HAL_GetTick>
 8008e28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008e2a:	e008      	b.n	8008e3e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008e2c:	f7fb fb5c 	bl	80044e8 <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d901      	bls.n	8008e3e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e0f2      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008e3e:	f7ff fbd1 	bl	80085e4 <LL_RCC_IsActiveFlag_HPRE>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0f1      	beq.n	8008e2c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d016      	beq.n	8008e82 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff face 	bl	80083fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e5e:	f7fb fb43 	bl	80044e8 <HAL_GetTick>
 8008e62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008e64:	e008      	b.n	8008e78 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008e66:	f7fb fb3f 	bl	80044e8 <HAL_GetTick>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d901      	bls.n	8008e78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e0d5      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008e78:	f7ff fbc6 	bl	8008608 <LL_RCC_IsActiveFlag_C2HPRE>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0f1      	beq.n	8008e66 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d016      	beq.n	8008ebc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fac7 	bl	8008426 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e98:	f7fb fb26 	bl	80044e8 <HAL_GetTick>
 8008e9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ea0:	f7fb fb22 	bl	80044e8 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e0b8      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008eb2:	f7ff fbbc 	bl	800862e <LL_RCC_IsActiveFlag_SHDHPRE>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f1      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d016      	beq.n	8008ef6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff fac1 	bl	8008454 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008ed2:	f7fb fb09 	bl	80044e8 <HAL_GetTick>
 8008ed6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008ed8:	e008      	b.n	8008eec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008eda:	f7fb fb05 	bl	80044e8 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e09b      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008eec:	f7ff fbb2 	bl	8008654 <LL_RCC_IsActiveFlag_PPRE1>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0f1      	beq.n	8008eda <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0308 	and.w	r3, r3, #8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d017      	beq.n	8008f32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff fab7 	bl	800847c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f0e:	f7fb faeb 	bl	80044e8 <HAL_GetTick>
 8008f12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008f14:	e008      	b.n	8008f28 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f16:	f7fb fae7 	bl	80044e8 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d901      	bls.n	8008f28 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e07d      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008f28:	f7ff fba6 	bl	8008678 <LL_RCC_IsActiveFlag_PPRE2>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f1      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d043      	beq.n	8008fc6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d106      	bne.n	8008f54 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008f46:	f7ff f857 	bl	8007ff8 <LL_RCC_HSE_IsReady>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d11e      	bne.n	8008f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e067      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d106      	bne.n	8008f6a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008f5c:	f7ff faff 	bl	800855e <LL_RCC_PLL_IsReady>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d113      	bne.n	8008f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e05c      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008f72:	f7ff f9bf 	bl	80082f4 <LL_RCC_MSI_IsReady>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d108      	bne.n	8008f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e051      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008f80:	f7ff f86a 	bl	8008058 <LL_RCC_HSI_IsReady>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e04a      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff f9fd 	bl	8008392 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f98:	f7fb faa6 	bl	80044e8 <HAL_GetTick>
 8008f9c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f9e:	e00a      	b.n	8008fb6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fa0:	f7fb faa2 	bl	80044e8 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e036      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fb6:	f7ff fa00 	bl	80083ba <LL_RCC_GetSysClkSource>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d1ec      	bne.n	8008fa0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008fc6:	4b19      	ldr	r3, [pc, #100]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d21b      	bcs.n	800900c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fd4:	4b15      	ldr	r3, [pc, #84]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f023 0207 	bic.w	r2, r3, #7
 8008fdc:	4913      	ldr	r1, [pc, #76]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fe4:	f7fb fa80 	bl	80044e8 <HAL_GetTick>
 8008fe8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fea:	e008      	b.n	8008ffe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008fec:	f7fb fa7c 	bl	80044e8 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d901      	bls.n	8008ffe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e012      	b.n	8009024 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	; (800902c <HAL_RCC_ClockConfig+0x278>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d1ef      	bne.n	8008fec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800900c:	f000 f87c 	bl	8009108 <HAL_RCC_GetHCLKFreq>
 8009010:	4602      	mov	r2, r0
 8009012:	4b07      	ldr	r3, [pc, #28]	; (8009030 <HAL_RCC_ClockConfig+0x27c>)
 8009014:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009016:	f7fb fa73 	bl	8004500 <HAL_GetTickPrio>
 800901a:	4603      	mov	r3, r0
 800901c:	4618      	mov	r0, r3
 800901e:	f7fa ff91 	bl	8003f44 <HAL_InitTick>
 8009022:	4603      	mov	r3, r0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	58004000 	.word	0x58004000
 8009030:	20000044 	.word	0x20000044

08009034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009034:	b590      	push	{r4, r7, lr}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800903a:	f7ff f9be 	bl	80083ba <LL_RCC_GetSysClkSource>
 800903e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10a      	bne.n	800905c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009046:	f7ff f97a 	bl	800833e <LL_RCC_MSI_GetRange>
 800904a:	4603      	mov	r3, r0
 800904c:	091b      	lsrs	r3, r3, #4
 800904e:	f003 030f 	and.w	r3, r3, #15
 8009052:	4a2a      	ldr	r2, [pc, #168]	; (80090fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8009054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	e04a      	b.n	80090f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b04      	cmp	r3, #4
 8009060:	d102      	bne.n	8009068 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009062:	4b27      	ldr	r3, [pc, #156]	; (8009100 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	e044      	b.n	80090f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b08      	cmp	r3, #8
 800906c:	d10a      	bne.n	8009084 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800906e:	f7fe ff93 	bl	8007f98 <LL_RCC_HSE_IsEnabledDiv2>
 8009072:	4603      	mov	r3, r0
 8009074:	2b01      	cmp	r3, #1
 8009076:	d102      	bne.n	800907e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009078:	4b21      	ldr	r3, [pc, #132]	; (8009100 <HAL_RCC_GetSysClockFreq+0xcc>)
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e039      	b.n	80090f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800907e:	4b21      	ldr	r3, [pc, #132]	; (8009104 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e036      	b.n	80090f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009084:	f7ff faa2 	bl	80085cc <LL_RCC_PLL_GetMainSource>
 8009088:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d002      	beq.n	8009096 <HAL_RCC_GetSysClockFreq+0x62>
 8009090:	2b03      	cmp	r3, #3
 8009092:	d003      	beq.n	800909c <HAL_RCC_GetSysClockFreq+0x68>
 8009094:	e00d      	b.n	80090b2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009096:	4b1a      	ldr	r3, [pc, #104]	; (8009100 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009098:	60bb      	str	r3, [r7, #8]
        break;
 800909a:	e015      	b.n	80090c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800909c:	f7fe ff7c 	bl	8007f98 <LL_RCC_HSE_IsEnabledDiv2>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d102      	bne.n	80090ac <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80090a6:	4b16      	ldr	r3, [pc, #88]	; (8009100 <HAL_RCC_GetSysClockFreq+0xcc>)
 80090a8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80090aa:	e00d      	b.n	80090c8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80090ac:	4b15      	ldr	r3, [pc, #84]	; (8009104 <HAL_RCC_GetSysClockFreq+0xd0>)
 80090ae:	60bb      	str	r3, [r7, #8]
        break;
 80090b0:	e00a      	b.n	80090c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80090b2:	f7ff f944 	bl	800833e <LL_RCC_MSI_GetRange>
 80090b6:	4603      	mov	r3, r0
 80090b8:	091b      	lsrs	r3, r3, #4
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	4a0f      	ldr	r2, [pc, #60]	; (80090fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80090c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c4:	60bb      	str	r3, [r7, #8]
        break;
 80090c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80090c8:	f7ff fa5b 	bl	8008582 <LL_RCC_PLL_GetN>
 80090cc:	4602      	mov	r2, r0
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	fb03 f402 	mul.w	r4, r3, r2
 80090d4:	f7ff fa6e 	bl	80085b4 <LL_RCC_PLL_GetDivider>
 80090d8:	4603      	mov	r3, r0
 80090da:	091b      	lsrs	r3, r3, #4
 80090dc:	3301      	adds	r3, #1
 80090de:	fbb4 f4f3 	udiv	r4, r4, r3
 80090e2:	f7ff fa5b 	bl	800859c <LL_RCC_PLL_GetR>
 80090e6:	4603      	mov	r3, r0
 80090e8:	0f5b      	lsrs	r3, r3, #29
 80090ea:	3301      	adds	r3, #1
 80090ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80090f0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80090f2:	68fb      	ldr	r3, [r7, #12]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd90      	pop	{r4, r7, pc}
 80090fc:	08017118 	.word	0x08017118
 8009100:	00f42400 	.word	0x00f42400
 8009104:	01e84800 	.word	0x01e84800

08009108 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009108:	b598      	push	{r3, r4, r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800910c:	f7ff ff92 	bl	8009034 <HAL_RCC_GetSysClockFreq>
 8009110:	4604      	mov	r4, r0
 8009112:	f7ff f9c7 	bl	80084a4 <LL_RCC_GetAHBPrescaler>
 8009116:	4603      	mov	r3, r0
 8009118:	091b      	lsrs	r3, r3, #4
 800911a:	f003 030f 	and.w	r3, r3, #15
 800911e:	4a03      	ldr	r2, [pc, #12]	; (800912c <HAL_RCC_GetHCLKFreq+0x24>)
 8009120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009124:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009128:	4618      	mov	r0, r3
 800912a:	bd98      	pop	{r3, r4, r7, pc}
 800912c:	080170b8 	.word	0x080170b8

08009130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009130:	b598      	push	{r3, r4, r7, lr}
 8009132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009134:	f7ff ffe8 	bl	8009108 <HAL_RCC_GetHCLKFreq>
 8009138:	4604      	mov	r4, r0
 800913a:	f7ff f9e6 	bl	800850a <LL_RCC_GetAPB2Prescaler>
 800913e:	4603      	mov	r3, r0
 8009140:	0adb      	lsrs	r3, r3, #11
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	4a04      	ldr	r2, [pc, #16]	; (8009158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800914c:	f003 031f 	and.w	r3, r3, #31
 8009150:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009154:	4618      	mov	r0, r3
 8009156:	bd98      	pop	{r3, r4, r7, pc}
 8009158:	080170f8 	.word	0x080170f8

0800915c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	226f      	movs	r2, #111	; 0x6f
 800916a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800916c:	f7ff f925 	bl	80083ba <LL_RCC_GetSysClkSource>
 8009170:	4602      	mov	r2, r0
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8009176:	f7ff f995 	bl	80084a4 <LL_RCC_GetAHBPrescaler>
 800917a:	4602      	mov	r2, r0
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8009180:	f7ff f9b7 	bl	80084f2 <LL_RCC_GetAPB1Prescaler>
 8009184:	4602      	mov	r2, r0
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800918a:	f7ff f9be 	bl	800850a <LL_RCC_GetAPB2Prescaler>
 800918e:	4602      	mov	r2, r0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8009194:	f7ff f992 	bl	80084bc <LL_C2_RCC_GetAHBPrescaler>
 8009198:	4602      	mov	r2, r0
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800919e:	f7ff f99a 	bl	80084d6 <LL_RCC_GetAHB4Prescaler>
 80091a2:	4602      	mov	r2, r0
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80091a8:	4b04      	ldr	r3, [pc, #16]	; (80091bc <HAL_RCC_GetClockConfig+0x60>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0207 	and.w	r2, r3, #7
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	601a      	str	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	58004000 	.word	0x58004000

080091c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2bb0      	cmp	r3, #176	; 0xb0
 80091cc:	d903      	bls.n	80091d6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e007      	b.n	80091e6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	091b      	lsrs	r3, r3, #4
 80091da:	f003 030f 	and.w	r3, r3, #15
 80091de:	4a11      	ldr	r2, [pc, #68]	; (8009224 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80091e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80091e6:	f7ff f976 	bl	80084d6 <LL_RCC_GetAHB4Prescaler>
 80091ea:	4603      	mov	r3, r0
 80091ec:	091b      	lsrs	r3, r3, #4
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	4a0d      	ldr	r2, [pc, #52]	; (8009228 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80091f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4a0a      	ldr	r2, [pc, #40]	; (800922c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009204:	fba2 2303 	umull	r2, r3, r2, r3
 8009208:	0c9c      	lsrs	r4, r3, #18
 800920a:	f7fe fea7 	bl	8007f5c <HAL_PWREx_GetVoltageRange>
 800920e:	4603      	mov	r3, r0
 8009210:	4619      	mov	r1, r3
 8009212:	4620      	mov	r0, r4
 8009214:	f000 f80c 	bl	8009230 <RCC_SetFlashLatency>
 8009218:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	bd90      	pop	{r4, r7, pc}
 8009222:	bf00      	nop
 8009224:	08017118 	.word	0x08017118
 8009228:	080170b8 	.word	0x080170b8
 800922c:	431bde83 	.word	0x431bde83

08009230 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b093      	sub	sp, #76	; 0x4c
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800923a:	4b39      	ldr	r3, [pc, #228]	; (8009320 <RCC_SetFlashLatency+0xf0>)
 800923c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009246:	4a37      	ldr	r2, [pc, #220]	; (8009324 <RCC_SetFlashLatency+0xf4>)
 8009248:	f107 031c 	add.w	r3, r7, #28
 800924c:	ca07      	ldmia	r2, {r0, r1, r2}
 800924e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009252:	4b35      	ldr	r3, [pc, #212]	; (8009328 <RCC_SetFlashLatency+0xf8>)
 8009254:	f107 040c 	add.w	r4, r7, #12
 8009258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800925a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800925e:	2300      	movs	r3, #0
 8009260:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009268:	d11c      	bne.n	80092a4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800926a:	2300      	movs	r3, #0
 800926c:	643b      	str	r3, [r7, #64]	; 0x40
 800926e:	e015      	b.n	800929c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009278:	4413      	add	r3, r2
 800927a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d808      	bhi.n	8009296 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800928c:	4413      	add	r3, r2
 800928e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009292:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009294:	e022      	b.n	80092dc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009298:	3301      	adds	r3, #1
 800929a:	643b      	str	r3, [r7, #64]	; 0x40
 800929c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d9e6      	bls.n	8009270 <RCC_SetFlashLatency+0x40>
 80092a2:	e01b      	b.n	80092dc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80092a4:	2300      	movs	r3, #0
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a8:	e015      	b.n	80092d6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80092aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80092b2:	4413      	add	r3, r2
 80092b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d808      	bhi.n	80092d0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80092be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80092c6:	4413      	add	r3, r2
 80092c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80092cc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80092ce:	e005      	b.n	80092dc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80092d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d2:	3301      	adds	r3, #1
 80092d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d9e6      	bls.n	80092aa <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80092dc:	4b13      	ldr	r3, [pc, #76]	; (800932c <RCC_SetFlashLatency+0xfc>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f023 0207 	bic.w	r2, r3, #7
 80092e4:	4911      	ldr	r1, [pc, #68]	; (800932c <RCC_SetFlashLatency+0xfc>)
 80092e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e8:	4313      	orrs	r3, r2
 80092ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80092ec:	f7fb f8fc 	bl	80044e8 <HAL_GetTick>
 80092f0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80092f2:	e008      	b.n	8009306 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80092f4:	f7fb f8f8 	bl	80044e8 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d901      	bls.n	8009306 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e007      	b.n	8009316 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009306:	4b09      	ldr	r3, [pc, #36]	; (800932c <RCC_SetFlashLatency+0xfc>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009310:	429a      	cmp	r2, r3
 8009312:	d1ef      	bne.n	80092f4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	374c      	adds	r7, #76	; 0x4c
 800931a:	46bd      	mov	sp, r7
 800931c:	bd90      	pop	{r4, r7, pc}
 800931e:	bf00      	nop
 8009320:	08016d0c 	.word	0x08016d0c
 8009324:	08016d1c 	.word	0x08016d1c
 8009328:	08016d28 	.word	0x08016d28
 800932c:	58004000 	.word	0x58004000

08009330 <LL_RCC_LSE_IsEnabled>:
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <LL_RCC_LSE_IsEnabled+0x18>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <LL_RCC_LSE_IsEnabled+0x1a>
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <LL_RCC_LSE_IsReady>:
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800935c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d101      	bne.n	800936c <LL_RCC_LSE_IsReady+0x18>
 8009368:	2301      	movs	r3, #1
 800936a:	e000      	b.n	800936e <LL_RCC_LSE_IsReady+0x1a>
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <LL_RCC_SetRFWKPClockSource>:
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800938c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <LL_RCC_SetSMPSClockSource>:
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80093ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	f023 0203 	bic.w	r2, r3, #3
 80093b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4313      	orrs	r3, r2
 80093be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <LL_RCC_SetSMPSPrescaler>:
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80093d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <LL_RCC_SetUSARTClockSource>:
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80093fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009404:	f023 0203 	bic.w	r2, r3, #3
 8009408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4313      	orrs	r3, r2
 8009410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <LL_RCC_SetLPUARTClockSource>:
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009430:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4313      	orrs	r3, r2
 800943c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <LL_RCC_SetI2CClockSource>:
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009458:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	091b      	lsrs	r3, r3, #4
 8009460:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009464:	43db      	mvns	r3, r3
 8009466:	401a      	ands	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800947a:	bf00      	nop
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <LL_RCC_SetLPTIMClockSource>:
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800948e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009492:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	0c1b      	lsrs	r3, r3, #16
 800949a:	041b      	lsls	r3, r3, #16
 800949c:	43db      	mvns	r3, r3
 800949e:	401a      	ands	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	041b      	lsls	r3, r3, #16
 80094a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094a8:	4313      	orrs	r3, r2
 80094aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <LL_RCC_SetSAIClockSource>:
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80094c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80094ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <LL_RCC_SetRNGClockSource>:
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80094ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80094fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4313      	orrs	r3, r2
 8009502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <LL_RCC_SetCLK48ClockSource>:
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800951a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009522:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4313      	orrs	r3, r2
 800952e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <LL_RCC_SetUSBClockSource>:
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff ffe3 	bl	8009512 <LL_RCC_SetCLK48ClockSource>
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <LL_RCC_SetADCClockSource>:
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800955c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009564:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <LL_RCC_SetRTCClockSource>:
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800958c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4313      	orrs	r3, r2
 800959c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <LL_RCC_GetRTCClockSource>:
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80095b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80095bc:	4618      	mov	r0, r3
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <LL_RCC_ForceBackupDomainReset>:
{
 80095c6:	b480      	push	{r7}
 80095c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80095ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80095de:	bf00      	nop
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80095ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <LL_RCC_PLLSAI1_Enable>:
{
 800960a:	b480      	push	{r7}
 800960c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800960e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800961c:	6013      	str	r3, [r2, #0]
}
 800961e:	bf00      	nop
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <LL_RCC_PLLSAI1_Disable>:
{
 8009628:	b480      	push	{r7}
 800962a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800962c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800963a:	6013      	str	r3, [r2, #0]
}
 800963c:	bf00      	nop
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <LL_RCC_PLLSAI1_IsReady>:
{
 8009646:	b480      	push	{r7}
 8009648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800964a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009658:	d101      	bne.n	800965e <LL_RCC_PLLSAI1_IsReady+0x18>
 800965a:	2301      	movs	r3, #1
 800965c:	e000      	b.n	8009660 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b088      	sub	sp, #32
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009672:	2300      	movs	r3, #0
 8009674:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009676:	2300      	movs	r3, #0
 8009678:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	d033      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800968e:	d00c      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009694:	d802      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d010      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x52>
 800969a:	e017      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x62>
 800969c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80096a0:	d017      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80096a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80096a6:	d016      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80096a8:	e010      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80096aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096b8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80096ba:	e00d      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f947 	bl	8009954 <RCCEx_PLLSAI1_ConfigNP>
 80096c6:	4603      	mov	r3, r0
 80096c8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80096ca:	e005      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	77fb      	strb	r3, [r7, #31]
        break;
 80096d0:	e002      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80096d2:	bf00      	nop
 80096d4:	e000      	b.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80096d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d8:	7ffb      	ldrb	r3, [r7, #31]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d105      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fee9 	bl	80094ba <LL_RCC_SetSAIClockSource>
 80096e8:	e001      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ea:	7ffb      	ldrb	r3, [r7, #31]
 80096ec:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d046      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80096fa:	f7ff ff57 	bl	80095ac <LL_RCC_GetRTCClockSource>
 80096fe:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	429a      	cmp	r2, r3
 8009708:	d03c      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800970a:	f7fe fc17 	bl	8007f3c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff ff31 	bl	8009580 <LL_RCC_SetRTCClockSource>
 800971e:	e02e      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009728:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800972a:	f7ff ff4c 	bl	80095c6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800972e:	f7ff ff5b 	bl	80095e8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800974a:	f7ff fdf1 	bl	8009330 <LL_RCC_LSE_IsEnabled>
 800974e:	4603      	mov	r3, r0
 8009750:	2b01      	cmp	r3, #1
 8009752:	d114      	bne.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009754:	f7fa fec8 	bl	80044e8 <HAL_GetTick>
 8009758:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800975a:	e00b      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800975c:	f7fa fec4 	bl	80044e8 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	f241 3288 	movw	r2, #5000	; 0x1388
 800976a:	4293      	cmp	r3, r2
 800976c:	d902      	bls.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	77fb      	strb	r3, [r7, #31]
              break;
 8009772:	e004      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009774:	f7ff fdee 	bl	8009354 <LL_RCC_LSE_IsReady>
 8009778:	4603      	mov	r3, r0
 800977a:	2b01      	cmp	r3, #1
 800977c:	d1ee      	bne.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800977e:	7ffb      	ldrb	r3, [r7, #31]
 8009780:	77bb      	strb	r3, [r7, #30]
 8009782:	e001      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009784:	7ffb      	ldrb	r3, [r7, #31]
 8009786:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d004      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff fe2b 	bl	80093f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d004      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fe36 	bl	8009420 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0310 	and.w	r3, r3, #16
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fe5e 	bl	8009486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d004      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fe53 	bl	8009486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0304 	and.w	r3, r3, #4
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d004      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a1b      	ldr	r3, [r3, #32]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff fe2b 	bl	800944c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0308 	and.w	r3, r3, #8
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d004      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff fe20 	bl	800944c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009814:	2b00      	cmp	r3, #0
 8009816:	d022      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff fe8e 	bl	800953e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800982a:	d107      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800982c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800983a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009844:	d10b      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3304      	adds	r3, #4
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f8dd 	bl	8009a0a <RCCEx_PLLSAI1_ConfigNQ>
 8009850:	4603      	mov	r3, r0
 8009852:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8009854:	7ffb      	ldrb	r3, [r7, #31]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800985a:	7ffb      	ldrb	r3, [r7, #31]
 800985c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009866:	2b00      	cmp	r3, #0
 8009868:	d02b      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009872:	d008      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800987c:	d003      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	2b00      	cmp	r3, #0
 8009884:	d105      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fe2b 	bl	80094e6 <LL_RCC_SetRNGClockSource>
 8009890:	e00a      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	2000      	movs	r0, #0
 800989e:	f7ff fe22 	bl	80094e6 <LL_RCC_SetRNGClockSource>
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7ff fe35 	bl	8009512 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80098b0:	d107      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80098b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80098bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098c0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d022      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fe3e 	bl	8009554 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e0:	d107      	bne.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80098ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098f0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098fa:	d10b      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3304      	adds	r3, #4
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f8dd 	bl	8009ac0 <RCCEx_PLLSAI1_ConfigNR>
 8009906:	4603      	mov	r3, r0
 8009908:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800990a:	7ffb      	ldrb	r3, [r7, #31]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8009910:	7ffb      	ldrb	r3, [r7, #31]
 8009912:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fd27 	bl	8009378 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d009      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff fd46 	bl	80093cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff fd2d 	bl	80093a4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800994a:	7fbb      	ldrb	r3, [r7, #30]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3720      	adds	r7, #32
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009960:	f7ff fe62 	bl	8009628 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009964:	f7fa fdc0 	bl	80044e8 <HAL_GetTick>
 8009968:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800996a:	e009      	b.n	8009980 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800996c:	f7fa fdbc 	bl	80044e8 <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d902      	bls.n	8009980 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	73fb      	strb	r3, [r7, #15]
      break;
 800997e:	e004      	b.n	800998a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009980:	f7ff fe61 	bl	8009646 <LL_RCC_PLLSAI1_IsReady>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1f0      	bne.n	800996c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d137      	bne.n	8009a00 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	021b      	lsls	r3, r3, #8
 80099a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099a4:	4313      	orrs	r3, r2
 80099a6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80099a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099ba:	4313      	orrs	r3, r2
 80099bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80099be:	f7ff fe24 	bl	800960a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c2:	f7fa fd91 	bl	80044e8 <HAL_GetTick>
 80099c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80099c8:	e009      	b.n	80099de <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099ca:	f7fa fd8d 	bl	80044e8 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d902      	bls.n	80099de <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	73fb      	strb	r3, [r7, #15]
        break;
 80099dc:	e004      	b.n	80099e8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80099de:	f7ff fe32 	bl	8009646 <LL_RCC_PLLSAI1_IsReady>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d1f0      	bne.n	80099ca <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d108      	bne.n	8009a00 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80099ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099f2:	691a      	ldr	r2, [r3, #16]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099fc:	4313      	orrs	r3, r2
 80099fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009a16:	f7ff fe07 	bl	8009628 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a1a:	f7fa fd65 	bl	80044e8 <HAL_GetTick>
 8009a1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009a20:	e009      	b.n	8009a36 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a22:	f7fa fd61 	bl	80044e8 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d902      	bls.n	8009a36 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	73fb      	strb	r3, [r7, #15]
      break;
 8009a34:	e004      	b.n	8009a40 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009a36:	f7ff fe06 	bl	8009646 <LL_RCC_PLLSAI1_IsReady>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1f0      	bne.n	8009a22 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d137      	bne.n	8009ab6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a70:	4313      	orrs	r3, r2
 8009a72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009a74:	f7ff fdc9 	bl	800960a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a78:	f7fa fd36 	bl	80044e8 <HAL_GetTick>
 8009a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a7e:	e009      	b.n	8009a94 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a80:	f7fa fd32 	bl	80044e8 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d902      	bls.n	8009a94 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	73fb      	strb	r3, [r7, #15]
        break;
 8009a92:	e004      	b.n	8009a9e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a94:	f7ff fdd7 	bl	8009646 <LL_RCC_PLLSAI1_IsReady>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d1f0      	bne.n	8009a80 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d108      	bne.n	8009ab6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009acc:	f7ff fdac 	bl	8009628 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ad0:	f7fa fd0a 	bl	80044e8 <HAL_GetTick>
 8009ad4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009ad6:	e009      	b.n	8009aec <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ad8:	f7fa fd06 	bl	80044e8 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d902      	bls.n	8009aec <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aea:	e004      	b.n	8009af6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009aec:	f7ff fdab 	bl	8009646 <LL_RCC_PLLSAI1_IsReady>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f0      	bne.n	8009ad8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d137      	bne.n	8009b6c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b10:	4313      	orrs	r3, r2
 8009b12:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b26:	4313      	orrs	r3, r2
 8009b28:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009b2a:	f7ff fd6e 	bl	800960a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b2e:	f7fa fcdb 	bl	80044e8 <HAL_GetTick>
 8009b32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b34:	e009      	b.n	8009b4a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b36:	f7fa fcd7 	bl	80044e8 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d902      	bls.n	8009b4a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	73fb      	strb	r3, [r7, #15]
        break;
 8009b48:	e004      	b.n	8009b54 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009b4a:	f7ff fd7c 	bl	8009646 <LL_RCC_PLLSAI1_IsReady>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d1f0      	bne.n	8009b36 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d108      	bne.n	8009b6c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b5e:	691a      	ldr	r2, [r3, #16]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e090      	b.n	8009caa <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d106      	bne.n	8009ba2 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7fa f8fb 	bl	8003d98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	22ca      	movs	r2, #202	; 0xca
 8009bb0:	625a      	str	r2, [r3, #36]	; 0x24
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2253      	movs	r2, #83	; 0x53
 8009bb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f89f 	bl	8009cfe <RTC_EnterInitMode>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d009      	beq.n	8009bda <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	22ff      	movs	r2, #255	; 0xff
 8009bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2204      	movs	r2, #4
 8009bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e067      	b.n	8009caa <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6899      	ldr	r1, [r3, #8]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	68d2      	ldr	r2, [r2, #12]
 8009c14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6919      	ldr	r1, [r3, #16]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	041a      	lsls	r2, r3, #16
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c38:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0203 	bic.w	r2, r2, #3
 8009c48:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	69da      	ldr	r2, [r3, #28]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	f003 0320 	and.w	r3, r3, #32
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d113      	bne.n	8009c98 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f81e 	bl	8009cb2 <HAL_RTC_WaitForSynchro>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00d      	beq.n	8009c98 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	22ff      	movs	r2, #255	; 0xff
 8009c82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2204      	movs	r2, #4
 8009c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e008      	b.n	8009caa <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	22ff      	movs	r2, #255	; 0xff
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68da      	ldr	r2, [r3, #12]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009cc8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009cca:	f7fa fc0d 	bl	80044e8 <HAL_GetTick>
 8009cce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009cd0:	e009      	b.n	8009ce6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009cd2:	f7fa fc09 	bl	80044e8 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e007      	b.n	8009cf6 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0ee      	beq.n	8009cd2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d119      	bne.n	8009d48 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009d1e:	f7fa fbe3 	bl	80044e8 <HAL_GetTick>
 8009d22:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d24:	e009      	b.n	8009d3a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d26:	f7fa fbdf 	bl	80044e8 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d34:	d901      	bls.n	8009d3a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e007      	b.n	8009d4a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0ee      	beq.n	8009d26 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e049      	b.n	8009df8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d106      	bne.n	8009d7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7fa faff 	bl	800437c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2202      	movs	r2, #2
 8009d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	4619      	mov	r1, r3
 8009d90:	4610      	mov	r0, r2
 8009d92:	f000 fdc7 	bl	800a924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d001      	beq.n	8009e18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e02e      	b.n	8009e76 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a17      	ldr	r2, [pc, #92]	; (8009e84 <HAL_TIM_Base_Start+0x84>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d004      	beq.n	8009e34 <HAL_TIM_Base_Start+0x34>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e32:	d115      	bne.n	8009e60 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689a      	ldr	r2, [r3, #8]
 8009e3a:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <HAL_TIM_Base_Start+0x88>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b06      	cmp	r3, #6
 8009e44:	d015      	beq.n	8009e72 <HAL_TIM_Base_Start+0x72>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4c:	d011      	beq.n	8009e72 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0201 	orr.w	r2, r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e5e:	e008      	b.n	8009e72 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0201 	orr.w	r2, r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	e000      	b.n	8009e74 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	40012c00 	.word	0x40012c00
 8009e88:	00010007 	.word	0x00010007

08009e8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a1a      	ldr	r2, [r3, #32]
 8009e9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10f      	bne.n	8009ec4 <HAL_TIM_Base_Stop+0x38>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6a1a      	ldr	r2, [r3, #32]
 8009eaa:	f240 4344 	movw	r3, #1092	; 0x444
 8009eae:	4013      	ands	r3, r2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d107      	bne.n	8009ec4 <HAL_TIM_Base_Stop+0x38>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0201 	bic.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
	...

08009edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d001      	beq.n	8009ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e036      	b.n	8009f62 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a17      	ldr	r2, [pc, #92]	; (8009f70 <HAL_TIM_Base_Start_IT+0x94>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d004      	beq.n	8009f20 <HAL_TIM_Base_Start_IT+0x44>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1e:	d115      	bne.n	8009f4c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689a      	ldr	r2, [r3, #8]
 8009f26:	4b13      	ldr	r3, [pc, #76]	; (8009f74 <HAL_TIM_Base_Start_IT+0x98>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b06      	cmp	r3, #6
 8009f30:	d015      	beq.n	8009f5e <HAL_TIM_Base_Start_IT+0x82>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f38:	d011      	beq.n	8009f5e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f042 0201 	orr.w	r2, r2, #1
 8009f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4a:	e008      	b.n	8009f5e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0201 	orr.w	r2, r2, #1
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	e000      	b.n	8009f60 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	40012c00 	.word	0x40012c00
 8009f74:	00010007 	.word	0x00010007

08009f78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e049      	b.n	800a01e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d106      	bne.n	8009fa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f841 	bl	800a026 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f000 fcb4 	bl	800a924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
	...

0800a03c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d109      	bne.n	800a060 <HAL_TIM_PWM_Start+0x24>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b01      	cmp	r3, #1
 800a056:	bf14      	ite	ne
 800a058:	2301      	movne	r3, #1
 800a05a:	2300      	moveq	r3, #0
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	e03c      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b04      	cmp	r3, #4
 800a064:	d109      	bne.n	800a07a <HAL_TIM_PWM_Start+0x3e>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b01      	cmp	r3, #1
 800a070:	bf14      	ite	ne
 800a072:	2301      	movne	r3, #1
 800a074:	2300      	moveq	r3, #0
 800a076:	b2db      	uxtb	r3, r3
 800a078:	e02f      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b08      	cmp	r3, #8
 800a07e:	d109      	bne.n	800a094 <HAL_TIM_PWM_Start+0x58>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b01      	cmp	r3, #1
 800a08a:	bf14      	ite	ne
 800a08c:	2301      	movne	r3, #1
 800a08e:	2300      	moveq	r3, #0
 800a090:	b2db      	uxtb	r3, r3
 800a092:	e022      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b0c      	cmp	r3, #12
 800a098:	d109      	bne.n	800a0ae <HAL_TIM_PWM_Start+0x72>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	bf14      	ite	ne
 800a0a6:	2301      	movne	r3, #1
 800a0a8:	2300      	moveq	r3, #0
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	e015      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b10      	cmp	r3, #16
 800a0b2:	d109      	bne.n	800a0c8 <HAL_TIM_PWM_Start+0x8c>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	bf14      	ite	ne
 800a0c0:	2301      	movne	r3, #1
 800a0c2:	2300      	moveq	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	e008      	b.n	800a0da <HAL_TIM_PWM_Start+0x9e>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	bf14      	ite	ne
 800a0d4:	2301      	movne	r3, #1
 800a0d6:	2300      	moveq	r3, #0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e079      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <HAL_TIM_PWM_Start+0xb6>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0f0:	e023      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d104      	bne.n	800a102 <HAL_TIM_PWM_Start+0xc6>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a100:	e01b      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b08      	cmp	r3, #8
 800a106:	d104      	bne.n	800a112 <HAL_TIM_PWM_Start+0xd6>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a110:	e013      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b0c      	cmp	r3, #12
 800a116:	d104      	bne.n	800a122 <HAL_TIM_PWM_Start+0xe6>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a120:	e00b      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b10      	cmp	r3, #16
 800a126:	d104      	bne.n	800a132 <HAL_TIM_PWM_Start+0xf6>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a130:	e003      	b.n	800a13a <HAL_TIM_PWM_Start+0xfe>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2202      	movs	r2, #2
 800a136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2201      	movs	r2, #1
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 ff6c 	bl	800b020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a24      	ldr	r2, [pc, #144]	; (800a1e0 <HAL_TIM_PWM_Start+0x1a4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d009      	beq.n	800a166 <HAL_TIM_PWM_Start+0x12a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a23      	ldr	r2, [pc, #140]	; (800a1e4 <HAL_TIM_PWM_Start+0x1a8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d004      	beq.n	800a166 <HAL_TIM_PWM_Start+0x12a>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a21      	ldr	r2, [pc, #132]	; (800a1e8 <HAL_TIM_PWM_Start+0x1ac>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d101      	bne.n	800a16a <HAL_TIM_PWM_Start+0x12e>
 800a166:	2301      	movs	r3, #1
 800a168:	e000      	b.n	800a16c <HAL_TIM_PWM_Start+0x130>
 800a16a:	2300      	movs	r3, #0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d007      	beq.n	800a180 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a17e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a16      	ldr	r2, [pc, #88]	; (800a1e0 <HAL_TIM_PWM_Start+0x1a4>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d004      	beq.n	800a194 <HAL_TIM_PWM_Start+0x158>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a192:	d115      	bne.n	800a1c0 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <HAL_TIM_PWM_Start+0x1b0>)
 800a19c:	4013      	ands	r3, r2
 800a19e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b06      	cmp	r3, #6
 800a1a4:	d015      	beq.n	800a1d2 <HAL_TIM_PWM_Start+0x196>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ac:	d011      	beq.n	800a1d2 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f042 0201 	orr.w	r2, r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1be:	e008      	b.n	800a1d2 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e000      	b.n	800a1d4 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	40012c00 	.word	0x40012c00
 800a1e4:	40014400 	.word	0x40014400
 800a1e8:	40014800 	.word	0x40014800
 800a1ec:	00010007 	.word	0x00010007

0800a1f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2200      	movs	r2, #0
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 ff0c 	bl	800b020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a39      	ldr	r2, [pc, #228]	; (800a2f4 <HAL_TIM_PWM_Stop+0x104>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d009      	beq.n	800a226 <HAL_TIM_PWM_Stop+0x36>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a38      	ldr	r2, [pc, #224]	; (800a2f8 <HAL_TIM_PWM_Stop+0x108>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d004      	beq.n	800a226 <HAL_TIM_PWM_Stop+0x36>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a36      	ldr	r2, [pc, #216]	; (800a2fc <HAL_TIM_PWM_Stop+0x10c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d101      	bne.n	800a22a <HAL_TIM_PWM_Stop+0x3a>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <HAL_TIM_PWM_Stop+0x3c>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d017      	beq.n	800a260 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6a1a      	ldr	r2, [r3, #32]
 800a236:	f241 1311 	movw	r3, #4369	; 0x1111
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10f      	bne.n	800a260 <HAL_TIM_PWM_Stop+0x70>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6a1a      	ldr	r2, [r3, #32]
 800a246:	f240 4344 	movw	r3, #1092	; 0x444
 800a24a:	4013      	ands	r3, r2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d107      	bne.n	800a260 <HAL_TIM_PWM_Stop+0x70>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a25e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6a1a      	ldr	r2, [r3, #32]
 800a266:	f241 1311 	movw	r3, #4369	; 0x1111
 800a26a:	4013      	ands	r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10f      	bne.n	800a290 <HAL_TIM_PWM_Stop+0xa0>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6a1a      	ldr	r2, [r3, #32]
 800a276:	f240 4344 	movw	r3, #1092	; 0x444
 800a27a:	4013      	ands	r3, r2
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d107      	bne.n	800a290 <HAL_TIM_PWM_Stop+0xa0>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f022 0201 	bic.w	r2, r2, #1
 800a28e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d104      	bne.n	800a2a0 <HAL_TIM_PWM_Stop+0xb0>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a29e:	e023      	b.n	800a2e8 <HAL_TIM_PWM_Stop+0xf8>
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d104      	bne.n	800a2b0 <HAL_TIM_PWM_Stop+0xc0>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2ae:	e01b      	b.n	800a2e8 <HAL_TIM_PWM_Stop+0xf8>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b08      	cmp	r3, #8
 800a2b4:	d104      	bne.n	800a2c0 <HAL_TIM_PWM_Stop+0xd0>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2be:	e013      	b.n	800a2e8 <HAL_TIM_PWM_Stop+0xf8>
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2b0c      	cmp	r3, #12
 800a2c4:	d104      	bne.n	800a2d0 <HAL_TIM_PWM_Stop+0xe0>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2ce:	e00b      	b.n	800a2e8 <HAL_TIM_PWM_Stop+0xf8>
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b10      	cmp	r3, #16
 800a2d4:	d104      	bne.n	800a2e0 <HAL_TIM_PWM_Stop+0xf0>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2de:	e003      	b.n	800a2e8 <HAL_TIM_PWM_Stop+0xf8>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	40012c00 	.word	0x40012c00
 800a2f8:	40014400 	.word	0x40014400
 800a2fc:	40014800 	.word	0x40014800

0800a300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	2b02      	cmp	r3, #2
 800a314:	d122      	bne.n	800a35c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b02      	cmp	r3, #2
 800a322:	d11b      	bne.n	800a35c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f06f 0202 	mvn.w	r2, #2
 800a32c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 facf 	bl	800a8e6 <HAL_TIM_IC_CaptureCallback>
 800a348:	e005      	b.n	800a356 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fac1 	bl	800a8d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fad2 	bl	800a8fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	2b04      	cmp	r3, #4
 800a368:	d122      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b04      	cmp	r3, #4
 800a376:	d11b      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f06f 0204 	mvn.w	r2, #4
 800a380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2202      	movs	r2, #2
 800a386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a392:	2b00      	cmp	r3, #0
 800a394:	d003      	beq.n	800a39e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 faa5 	bl	800a8e6 <HAL_TIM_IC_CaptureCallback>
 800a39c:	e005      	b.n	800a3aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa97 	bl	800a8d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 faa8 	bl	800a8fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	2b08      	cmp	r3, #8
 800a3bc:	d122      	bne.n	800a404 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b08      	cmp	r3, #8
 800a3ca:	d11b      	bne.n	800a404 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0208 	mvn.w	r2, #8
 800a3d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2204      	movs	r2, #4
 800a3da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fa7b 	bl	800a8e6 <HAL_TIM_IC_CaptureCallback>
 800a3f0:	e005      	b.n	800a3fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fa6d 	bl	800a8d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fa7e 	bl	800a8fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	2b10      	cmp	r3, #16
 800a410:	d122      	bne.n	800a458 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0310 	and.w	r3, r3, #16
 800a41c:	2b10      	cmp	r3, #16
 800a41e:	d11b      	bne.n	800a458 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0210 	mvn.w	r2, #16
 800a428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2208      	movs	r2, #8
 800a42e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fa51 	bl	800a8e6 <HAL_TIM_IC_CaptureCallback>
 800a444:	e005      	b.n	800a452 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fa43 	bl	800a8d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa54 	bl	800a8fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b01      	cmp	r3, #1
 800a464:	d10e      	bne.n	800a484 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b01      	cmp	r3, #1
 800a472:	d107      	bne.n	800a484 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f06f 0201 	mvn.w	r2, #1
 800a47c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7f9 f9d4 	bl	800382c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48e:	2b80      	cmp	r3, #128	; 0x80
 800a490:	d10e      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49c:	2b80      	cmp	r3, #128	; 0x80
 800a49e:	d107      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fed8 	bl	800b260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4be:	d10e      	bne.n	800a4de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ca:	2b80      	cmp	r3, #128	; 0x80
 800a4cc:	d107      	bne.n	800a4de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fecb 	bl	800b274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b40      	cmp	r3, #64	; 0x40
 800a4ea:	d10e      	bne.n	800a50a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f6:	2b40      	cmp	r3, #64	; 0x40
 800a4f8:	d107      	bne.n	800a50a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa02 	bl	800a90e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b20      	cmp	r3, #32
 800a516:	d10e      	bne.n	800a536 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b20      	cmp	r3, #32
 800a524:	d107      	bne.n	800a536 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f06f 0220 	mvn.w	r2, #32
 800a52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fe8b 	bl	800b24c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a536:	bf00      	nop
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a552:	2b01      	cmp	r3, #1
 800a554:	d101      	bne.n	800a55a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a556:	2302      	movs	r3, #2
 800a558:	e0fd      	b.n	800a756 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b14      	cmp	r3, #20
 800a566:	f200 80f0 	bhi.w	800a74a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a56a:	a201      	add	r2, pc, #4	; (adr r2, 800a570 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a570:	0800a5c5 	.word	0x0800a5c5
 800a574:	0800a74b 	.word	0x0800a74b
 800a578:	0800a74b 	.word	0x0800a74b
 800a57c:	0800a74b 	.word	0x0800a74b
 800a580:	0800a605 	.word	0x0800a605
 800a584:	0800a74b 	.word	0x0800a74b
 800a588:	0800a74b 	.word	0x0800a74b
 800a58c:	0800a74b 	.word	0x0800a74b
 800a590:	0800a647 	.word	0x0800a647
 800a594:	0800a74b 	.word	0x0800a74b
 800a598:	0800a74b 	.word	0x0800a74b
 800a59c:	0800a74b 	.word	0x0800a74b
 800a5a0:	0800a687 	.word	0x0800a687
 800a5a4:	0800a74b 	.word	0x0800a74b
 800a5a8:	0800a74b 	.word	0x0800a74b
 800a5ac:	0800a74b 	.word	0x0800a74b
 800a5b0:	0800a6c9 	.word	0x0800a6c9
 800a5b4:	0800a74b 	.word	0x0800a74b
 800a5b8:	0800a74b 	.word	0x0800a74b
 800a5bc:	0800a74b 	.word	0x0800a74b
 800a5c0:	0800a709 	.word	0x0800a709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68b9      	ldr	r1, [r7, #8]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fa0e 	bl	800a9ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699a      	ldr	r2, [r3, #24]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0208 	orr.w	r2, r2, #8
 800a5de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	699a      	ldr	r2, [r3, #24]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0204 	bic.w	r2, r2, #4
 800a5ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6999      	ldr	r1, [r3, #24]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	691a      	ldr	r2, [r3, #16]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	619a      	str	r2, [r3, #24]
      break;
 800a602:	e0a3      	b.n	800a74c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fa6a 	bl	800aae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	699a      	ldr	r2, [r3, #24]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a61e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a62e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6999      	ldr	r1, [r3, #24]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	021a      	lsls	r2, r3, #8
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	619a      	str	r2, [r3, #24]
      break;
 800a644:	e082      	b.n	800a74c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68b9      	ldr	r1, [r7, #8]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fac3 	bl	800abd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	69da      	ldr	r2, [r3, #28]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f042 0208 	orr.w	r2, r2, #8
 800a660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	69da      	ldr	r2, [r3, #28]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0204 	bic.w	r2, r2, #4
 800a670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69d9      	ldr	r1, [r3, #28]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	691a      	ldr	r2, [r3, #16]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	61da      	str	r2, [r3, #28]
      break;
 800a684:	e062      	b.n	800a74c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 fb1b 	bl	800acc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69da      	ldr	r2, [r3, #28]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69da      	ldr	r2, [r3, #28]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	69d9      	ldr	r1, [r3, #28]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	021a      	lsls	r2, r3, #8
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	61da      	str	r2, [r3, #28]
      break;
 800a6c6:	e041      	b.n	800a74c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68b9      	ldr	r1, [r7, #8]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fb58 	bl	800ad84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f042 0208 	orr.w	r2, r2, #8
 800a6e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 0204 	bic.w	r2, r2, #4
 800a6f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	691a      	ldr	r2, [r3, #16]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a706:	e021      	b.n	800a74c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fb90 	bl	800ae34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a722:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a732:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	021a      	lsls	r2, r3, #8
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	430a      	orrs	r2, r1
 800a746:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a748:	e000      	b.n	800a74c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a74a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop

0800a760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a770:	2b01      	cmp	r3, #1
 800a772:	d101      	bne.n	800a778 <HAL_TIM_ConfigClockSource+0x18>
 800a774:	2302      	movs	r3, #2
 800a776:	e0a8      	b.n	800a8ca <HAL_TIM_ConfigClockSource+0x16a>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a79a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b40      	cmp	r3, #64	; 0x40
 800a7b2:	d067      	beq.n	800a884 <HAL_TIM_ConfigClockSource+0x124>
 800a7b4:	2b40      	cmp	r3, #64	; 0x40
 800a7b6:	d80b      	bhi.n	800a7d0 <HAL_TIM_ConfigClockSource+0x70>
 800a7b8:	2b10      	cmp	r3, #16
 800a7ba:	d073      	beq.n	800a8a4 <HAL_TIM_ConfigClockSource+0x144>
 800a7bc:	2b10      	cmp	r3, #16
 800a7be:	d802      	bhi.n	800a7c6 <HAL_TIM_ConfigClockSource+0x66>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d06f      	beq.n	800a8a4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a7c4:	e078      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d06c      	beq.n	800a8a4 <HAL_TIM_ConfigClockSource+0x144>
 800a7ca:	2b30      	cmp	r3, #48	; 0x30
 800a7cc:	d06a      	beq.n	800a8a4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800a7ce:	e073      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a7d0:	2b70      	cmp	r3, #112	; 0x70
 800a7d2:	d00d      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0x90>
 800a7d4:	2b70      	cmp	r3, #112	; 0x70
 800a7d6:	d804      	bhi.n	800a7e2 <HAL_TIM_ConfigClockSource+0x82>
 800a7d8:	2b50      	cmp	r3, #80	; 0x50
 800a7da:	d033      	beq.n	800a844 <HAL_TIM_ConfigClockSource+0xe4>
 800a7dc:	2b60      	cmp	r3, #96	; 0x60
 800a7de:	d041      	beq.n	800a864 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800a7e0:	e06a      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a7e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7e6:	d066      	beq.n	800a8b6 <HAL_TIM_ConfigClockSource+0x156>
 800a7e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ec:	d017      	beq.n	800a81e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800a7ee:	e063      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	6899      	ldr	r1, [r3, #8]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f000 fbee 	bl	800afe0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a812:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	609a      	str	r2, [r3, #8]
      break;
 800a81c:	e04c      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6899      	ldr	r1, [r3, #8]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f000 fbd7 	bl	800afe0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a840:	609a      	str	r2, [r3, #8]
      break;
 800a842:	e039      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	6859      	ldr	r1, [r3, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	461a      	mov	r2, r3
 800a852:	f000 fb49 	bl	800aee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2150      	movs	r1, #80	; 0x50
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fba2 	bl	800afa6 <TIM_ITRx_SetConfig>
      break;
 800a862:	e029      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	6859      	ldr	r1, [r3, #4]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	461a      	mov	r2, r3
 800a872:	f000 fb68 	bl	800af46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2160      	movs	r1, #96	; 0x60
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 fb92 	bl	800afa6 <TIM_ITRx_SetConfig>
      break;
 800a882:	e019      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	6859      	ldr	r1, [r3, #4]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	461a      	mov	r2, r3
 800a892:	f000 fb29 	bl	800aee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2140      	movs	r1, #64	; 0x40
 800a89c:	4618      	mov	r0, r3
 800a89e:	f000 fb82 	bl	800afa6 <TIM_ITRx_SetConfig>
      break;
 800a8a2:	e009      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f000 fb79 	bl	800afa6 <TIM_ITRx_SetConfig>
        break;
 800a8b4:	e000      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800a8b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8ee:	bf00      	nop
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a90e:	b480      	push	{r7}
 800a910:	b083      	sub	sp, #12
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a916:	bf00      	nop
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
	...

0800a924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a2a      	ldr	r2, [pc, #168]	; (800a9e0 <TIM_Base_SetConfig+0xbc>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_Base_SetConfig+0x20>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a942:	d108      	bne.n	800a956 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a94a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	4313      	orrs	r3, r2
 800a954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a21      	ldr	r2, [pc, #132]	; (800a9e0 <TIM_Base_SetConfig+0xbc>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00b      	beq.n	800a976 <TIM_Base_SetConfig+0x52>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a964:	d007      	beq.n	800a976 <TIM_Base_SetConfig+0x52>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a1e      	ldr	r2, [pc, #120]	; (800a9e4 <TIM_Base_SetConfig+0xc0>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_Base_SetConfig+0x52>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a1d      	ldr	r2, [pc, #116]	; (800a9e8 <TIM_Base_SetConfig+0xc4>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d108      	bne.n	800a988 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a97c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a0c      	ldr	r2, [pc, #48]	; (800a9e0 <TIM_Base_SetConfig+0xbc>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d007      	beq.n	800a9c4 <TIM_Base_SetConfig+0xa0>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a0b      	ldr	r2, [pc, #44]	; (800a9e4 <TIM_Base_SetConfig+0xc0>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d003      	beq.n	800a9c4 <TIM_Base_SetConfig+0xa0>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a0a      	ldr	r2, [pc, #40]	; (800a9e8 <TIM_Base_SetConfig+0xc4>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d103      	bne.n	800a9cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	691a      	ldr	r2, [r3, #16]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	615a      	str	r2, [r3, #20]
}
 800a9d2:	bf00      	nop
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	40012c00 	.word	0x40012c00
 800a9e4:	40014400 	.word	0x40014400
 800a9e8:	40014800 	.word	0x40014800

0800a9ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b087      	sub	sp, #28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	f023 0201 	bic.w	r2, r3, #1
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0303 	bic.w	r3, r3, #3
 800aa26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f023 0302 	bic.w	r3, r3, #2
 800aa38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a24      	ldr	r2, [pc, #144]	; (800aad8 <TIM_OC1_SetConfig+0xec>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d007      	beq.n	800aa5c <TIM_OC1_SetConfig+0x70>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a23      	ldr	r2, [pc, #140]	; (800aadc <TIM_OC1_SetConfig+0xf0>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d003      	beq.n	800aa5c <TIM_OC1_SetConfig+0x70>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a22      	ldr	r2, [pc, #136]	; (800aae0 <TIM_OC1_SetConfig+0xf4>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d10c      	bne.n	800aa76 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f023 0308 	bic.w	r3, r3, #8
 800aa62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f023 0304 	bic.w	r3, r3, #4
 800aa74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <TIM_OC1_SetConfig+0xec>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d007      	beq.n	800aa8e <TIM_OC1_SetConfig+0xa2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a17      	ldr	r2, [pc, #92]	; (800aae0 <TIM_OC1_SetConfig+0xf4>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d003      	beq.n	800aa8e <TIM_OC1_SetConfig+0xa2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a14      	ldr	r2, [pc, #80]	; (800aadc <TIM_OC1_SetConfig+0xf0>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d111      	bne.n	800aab2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	621a      	str	r2, [r3, #32]
}
 800aacc:	bf00      	nop
 800aace:	371c      	adds	r7, #28
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	40012c00 	.word	0x40012c00
 800aadc:	40014800 	.word	0x40014800
 800aae0:	40014400 	.word	0x40014400

0800aae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	f023 0210 	bic.w	r2, r3, #16
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	021b      	lsls	r3, r3, #8
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	f023 0320 	bic.w	r3, r3, #32
 800ab32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	011b      	lsls	r3, r3, #4
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a22      	ldr	r2, [pc, #136]	; (800abcc <TIM_OC2_SetConfig+0xe8>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d10d      	bne.n	800ab64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a19      	ldr	r2, [pc, #100]	; (800abcc <TIM_OC2_SetConfig+0xe8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d007      	beq.n	800ab7c <TIM_OC2_SetConfig+0x98>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a18      	ldr	r2, [pc, #96]	; (800abd0 <TIM_OC2_SetConfig+0xec>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d003      	beq.n	800ab7c <TIM_OC2_SetConfig+0x98>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a17      	ldr	r2, [pc, #92]	; (800abd4 <TIM_OC2_SetConfig+0xf0>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d113      	bne.n	800aba4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	621a      	str	r2, [r3, #32]
}
 800abbe:	bf00      	nop
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	40012c00 	.word	0x40012c00
 800abd0:	40014400 	.word	0x40014400
 800abd4:	40014800 	.word	0x40014800

0800abd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0303 	bic.w	r3, r3, #3
 800ac12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a21      	ldr	r2, [pc, #132]	; (800acbc <TIM_OC3_SetConfig+0xe4>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d10d      	bne.n	800ac56 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	021b      	lsls	r3, r3, #8
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a18      	ldr	r2, [pc, #96]	; (800acbc <TIM_OC3_SetConfig+0xe4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d007      	beq.n	800ac6e <TIM_OC3_SetConfig+0x96>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a17      	ldr	r2, [pc, #92]	; (800acc0 <TIM_OC3_SetConfig+0xe8>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d003      	beq.n	800ac6e <TIM_OC3_SetConfig+0x96>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a16      	ldr	r2, [pc, #88]	; (800acc4 <TIM_OC3_SetConfig+0xec>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d113      	bne.n	800ac96 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	621a      	str	r2, [r3, #32]
}
 800acb0:	bf00      	nop
 800acb2:	371c      	adds	r7, #28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	40012c00 	.word	0x40012c00
 800acc0:	40014400 	.word	0x40014400
 800acc4:	40014800 	.word	0x40014800

0800acc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	021b      	lsls	r3, r3, #8
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	031b      	lsls	r3, r3, #12
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <TIM_OC4_SetConfig+0xb0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d007      	beq.n	800ad3c <TIM_OC4_SetConfig+0x74>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a13      	ldr	r2, [pc, #76]	; (800ad7c <TIM_OC4_SetConfig+0xb4>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d003      	beq.n	800ad3c <TIM_OC4_SetConfig+0x74>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a12      	ldr	r2, [pc, #72]	; (800ad80 <TIM_OC4_SetConfig+0xb8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d109      	bne.n	800ad50 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	019b      	lsls	r3, r3, #6
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	621a      	str	r2, [r3, #32]
}
 800ad6a:	bf00      	nop
 800ad6c:	371c      	adds	r7, #28
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40012c00 	.word	0x40012c00
 800ad7c:	40014400 	.word	0x40014400
 800ad80:	40014800 	.word	0x40014800

0800ad84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800adc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	041b      	lsls	r3, r3, #16
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	4313      	orrs	r3, r2
 800add4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <TIM_OC5_SetConfig+0xa4>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d007      	beq.n	800adee <TIM_OC5_SetConfig+0x6a>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a12      	ldr	r2, [pc, #72]	; (800ae2c <TIM_OC5_SetConfig+0xa8>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d003      	beq.n	800adee <TIM_OC5_SetConfig+0x6a>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a11      	ldr	r2, [pc, #68]	; (800ae30 <TIM_OC5_SetConfig+0xac>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d109      	bne.n	800ae02 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	021b      	lsls	r3, r3, #8
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	621a      	str	r2, [r3, #32]
}
 800ae1c:	bf00      	nop
 800ae1e:	371c      	adds	r7, #28
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	40012c00 	.word	0x40012c00
 800ae2c:	40014400 	.word	0x40014400
 800ae30:	40014800 	.word	0x40014800

0800ae34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	051b      	lsls	r3, r3, #20
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a14      	ldr	r2, [pc, #80]	; (800aedc <TIM_OC6_SetConfig+0xa8>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d007      	beq.n	800aea0 <TIM_OC6_SetConfig+0x6c>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a13      	ldr	r2, [pc, #76]	; (800aee0 <TIM_OC6_SetConfig+0xac>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d003      	beq.n	800aea0 <TIM_OC6_SetConfig+0x6c>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a12      	ldr	r2, [pc, #72]	; (800aee4 <TIM_OC6_SetConfig+0xb0>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d109      	bne.n	800aeb4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	695b      	ldr	r3, [r3, #20]
 800aeac:	029b      	lsls	r3, r3, #10
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	685a      	ldr	r2, [r3, #4]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	621a      	str	r2, [r3, #32]
}
 800aece:	bf00      	nop
 800aed0:	371c      	adds	r7, #28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	40012c00 	.word	0x40012c00
 800aee0:	40014400 	.word	0x40014400
 800aee4:	40014800 	.word	0x40014800

0800aee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f023 0201 	bic.w	r2, r3, #1
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f023 030a 	bic.w	r3, r3, #10
 800af24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	621a      	str	r2, [r3, #32]
}
 800af3a:	bf00      	nop
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af46:	b480      	push	{r7}
 800af48:	b087      	sub	sp, #28
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	f023 0210 	bic.w	r2, r3, #16
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	031b      	lsls	r3, r3, #12
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	4313      	orrs	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	011b      	lsls	r3, r3, #4
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	621a      	str	r2, [r3, #32]
}
 800af9a:	bf00      	nop
 800af9c:	371c      	adds	r7, #28
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b085      	sub	sp, #20
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800afbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	f043 0307 	orr.w	r3, r3, #7
 800afcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	609a      	str	r2, [r3, #8]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800affa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	021a      	lsls	r2, r3, #8
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	431a      	orrs	r2, r3
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	4313      	orrs	r3, r2
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	609a      	str	r2, [r3, #8]
}
 800b014:	bf00      	nop
 800b016:	371c      	adds	r7, #28
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b020:	b480      	push	{r7}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	f003 031f 	and.w	r3, r3, #31
 800b032:	2201      	movs	r2, #1
 800b034:	fa02 f303 	lsl.w	r3, r2, r3
 800b038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6a1a      	ldr	r2, [r3, #32]
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	43db      	mvns	r3, r3
 800b042:	401a      	ands	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6a1a      	ldr	r2, [r3, #32]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f003 031f 	and.w	r3, r3, #31
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	fa01 f303 	lsl.w	r3, r1, r3
 800b058:	431a      	orrs	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	621a      	str	r2, [r3, #32]
}
 800b05e:	bf00      	nop
 800b060:	371c      	adds	r7, #28
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
	...

0800b06c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d101      	bne.n	800b084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b080:	2302      	movs	r3, #2
 800b082:	e04a      	b.n	800b11a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a1f      	ldr	r2, [pc, #124]	; (800b128 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d108      	bne.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a12      	ldr	r2, [pc, #72]	; (800b128 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d004      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ec:	d10c      	bne.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	40012c00 	.word	0x40012c00

0800b12c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b140:	2b01      	cmp	r3, #1
 800b142:	d101      	bne.n	800b148 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b144:	2302      	movs	r3, #2
 800b146:	e078      	b.n	800b23a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	4313      	orrs	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	4313      	orrs	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4313      	orrs	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	4313      	orrs	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	695b      	ldr	r3, [r3, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	041b      	lsls	r3, r3, #16
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a20      	ldr	r2, [pc, #128]	; (800b248 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d106      	bne.n	800b1da <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a1a      	ldr	r2, [pc, #104]	; (800b248 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d121      	bne.n	800b228 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ee:	051b      	lsls	r3, r3, #20
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20c:	4313      	orrs	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d106      	bne.n	800b228 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	4313      	orrs	r3, r2
 800b226:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	40012c00 	.word	0x40012c00

0800b24c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b290:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b294:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b2c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b2c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	43db      	mvns	r3, r3
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4013      	ands	r3, r2
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b082      	sub	sp, #8
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	f107 0014 	add.w	r0, r7, #20
 800b2fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff ffb0 	bl	800b288 <USB_EnableGlobalInt>

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b334:	b004      	add	sp, #16
 800b336:	4770      	bx	lr

0800b338 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b338:	b480      	push	{r7}
 800b33a:	b09d      	sub	sp, #116	; 0x74
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	b29b      	uxth	r3, r3
 800b356:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b35e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	78db      	ldrb	r3, [r3, #3]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d81f      	bhi.n	800b3aa <USB_ActivateEndpoint+0x72>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <USB_ActivateEndpoint+0x38>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b381 	.word	0x0800b381
 800b374:	0800b39d 	.word	0x0800b39d
 800b378:	0800b3b3 	.word	0x0800b3b3
 800b37c:	0800b38f 	.word	0x0800b38f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b380:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b388:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b38c:	e012      	b.n	800b3b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b38e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b392:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b396:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b39a:	e00b      	b.n	800b3b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b39c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b3a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b3a8:	e004      	b.n	800b3b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b3b0:	e000      	b.n	800b3b4 <USB_ActivateEndpoint+0x7c>
      break;
 800b3b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	441a      	add	r2, r3
 800b3be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b3c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	b21b      	sxth	r3, r3
 800b3e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ee:	b21a      	sxth	r2, r3
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	b21b      	sxth	r3, r3
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	b21b      	sxth	r3, r3
 800b3fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	441a      	add	r2, r3
 800b408:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b40c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	7b1b      	ldrb	r3, [r3, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f040 8149 	bne.w	800b6bc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	785b      	ldrb	r3, [r3, #1]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 8084 	beq.w	800b53c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	61bb      	str	r3, [r7, #24]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b43e:	b29b      	uxth	r3, r3
 800b440:	461a      	mov	r2, r3
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	4413      	add	r3, r2
 800b446:	61bb      	str	r3, [r7, #24]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	00da      	lsls	r2, r3, #3
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	4413      	add	r3, r2
 800b452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	88db      	ldrh	r3, [r3, #6]
 800b45c:	085b      	lsrs	r3, r3, #1
 800b45e:	b29b      	uxth	r3, r3
 800b460:	005b      	lsls	r3, r3, #1
 800b462:	b29a      	uxth	r2, r3
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	827b      	strh	r3, [r7, #18]
 800b476:	8a7b      	ldrh	r3, [r7, #18]
 800b478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01b      	beq.n	800b4b8 <USB_ActivateEndpoint+0x180>
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b496:	823b      	strh	r3, [r7, #16]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	441a      	add	r2, r3
 800b4a2:	8a3b      	ldrh	r3, [r7, #16]
 800b4a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	78db      	ldrb	r3, [r3, #3]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d020      	beq.n	800b502 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4d6:	81bb      	strh	r3, [r7, #12]
 800b4d8:	89bb      	ldrh	r3, [r7, #12]
 800b4da:	f083 0320 	eor.w	r3, r3, #32
 800b4de:	81bb      	strh	r3, [r7, #12]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	441a      	add	r2, r3
 800b4ea:	89bb      	ldrh	r3, [r7, #12]
 800b4ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	8013      	strh	r3, [r2, #0]
 800b500:	e2bf      	b.n	800ba82 <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b518:	81fb      	strh	r3, [r7, #14]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	441a      	add	r2, r3
 800b524:	89fb      	ldrh	r3, [r7, #14]
 800b526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b52a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b52e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b536:	b29b      	uxth	r3, r3
 800b538:	8013      	strh	r3, [r2, #0]
 800b53a:	e2a2      	b.n	800ba82 <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	633b      	str	r3, [r7, #48]	; 0x30
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b546:	b29b      	uxth	r3, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	4413      	add	r3, r2
 800b54e:	633b      	str	r3, [r7, #48]	; 0x30
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	00da      	lsls	r2, r3, #3
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	4413      	add	r3, r2
 800b55a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b55e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	88db      	ldrh	r3, [r3, #6]
 800b564:	085b      	lsrs	r3, r3, #1
 800b566:	b29b      	uxth	r3, r3
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	62bb      	str	r3, [r7, #40]	; 0x28
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	461a      	mov	r2, r3
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	4413      	add	r3, r2
 800b582:	62bb      	str	r3, [r7, #40]	; 0x28
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	00da      	lsls	r2, r3, #3
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	4413      	add	r3, r2
 800b58e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d112      	bne.n	800b5c2 <USB_ActivateEndpoint+0x28a>
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	801a      	strh	r2, [r3, #0]
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	881b      	ldrh	r3, [r3, #0]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	801a      	strh	r2, [r3, #0]
 800b5c0:	e02f      	b.n	800b622 <USB_ActivateEndpoint+0x2ea>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b5c8:	d813      	bhi.n	800b5f2 <USB_ActivateEndpoint+0x2ba>
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <USB_ActivateEndpoint+0x2ac>
 800b5de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	029b      	lsls	r3, r3, #10
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	801a      	strh	r2, [r3, #0]
 800b5f0:	e017      	b.n	800b622 <USB_ActivateEndpoint+0x2ea>
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	095b      	lsrs	r3, r3, #5
 800b5f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	f003 031f 	and.w	r3, r3, #31
 800b602:	2b00      	cmp	r3, #0
 800b604:	d102      	bne.n	800b60c <USB_ActivateEndpoint+0x2d4>
 800b606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b608:	3b01      	subs	r3, #1
 800b60a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b60c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b60e:	b29b      	uxth	r3, r3
 800b610:	029b      	lsls	r3, r3, #10
 800b612:	b29b      	uxth	r3, r3
 800b614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	881b      	ldrh	r3, [r3, #0]
 800b62e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b636:	2b00      	cmp	r3, #0
 800b638:	d01b      	beq.n	800b672 <USB_ActivateEndpoint+0x33a>
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	b29b      	uxth	r3, r3
 800b648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b650:	843b      	strh	r3, [r7, #32]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	441a      	add	r2, r3
 800b65c:	8c3b      	ldrh	r3, [r7, #32]
 800b65e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b66e:	b29b      	uxth	r3, r3
 800b670:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	b29b      	uxth	r3, r3
 800b680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b688:	83fb      	strh	r3, [r7, #30]
 800b68a:	8bfb      	ldrh	r3, [r7, #30]
 800b68c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b690:	83fb      	strh	r3, [r7, #30]
 800b692:	8bfb      	ldrh	r3, [r7, #30]
 800b694:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b698:	83fb      	strh	r3, [r7, #30]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	441a      	add	r2, r3
 800b6a4:	8bfb      	ldrh	r3, [r7, #30]
 800b6a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	8013      	strh	r3, [r2, #0]
 800b6ba:	e1e2      	b.n	800ba82 <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	441a      	add	r2, r3
 800b6e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b6e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	663b      	str	r3, [r7, #96]	; 0x60
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b702:	b29b      	uxth	r3, r3
 800b704:	461a      	mov	r2, r3
 800b706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b708:	4413      	add	r3, r2
 800b70a:	663b      	str	r3, [r7, #96]	; 0x60
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	00da      	lsls	r2, r3, #3
 800b712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b714:	4413      	add	r3, r2
 800b716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b71a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	891b      	ldrh	r3, [r3, #8]
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	b29b      	uxth	r3, r3
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b72a:	801a      	strh	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b736:	b29b      	uxth	r3, r3
 800b738:	461a      	mov	r2, r3
 800b73a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b73c:	4413      	add	r3, r2
 800b73e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	00da      	lsls	r2, r3, #3
 800b746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b748:	4413      	add	r3, r2
 800b74a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b74e:	657b      	str	r3, [r7, #84]	; 0x54
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	895b      	ldrh	r3, [r3, #10]
 800b754:	085b      	lsrs	r3, r3, #1
 800b756:	b29b      	uxth	r3, r3
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b75e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f040 80b1 	bne.w	800b8cc <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b77a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b77e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b782:	2b00      	cmp	r3, #0
 800b784:	d01d      	beq.n	800b7c2 <USB_ActivateEndpoint+0x48a>
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	881b      	ldrh	r3, [r3, #0]
 800b792:	b29b      	uxth	r3, r3
 800b794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	441a      	add	r2, r3
 800b7aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b7ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4413      	add	r3, r2
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b7d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d01b      	beq.n	800b812 <USB_ActivateEndpoint+0x4da>
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	441a      	add	r2, r3
 800b7fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b80a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b80e:	b29b      	uxth	r3, r3
 800b810:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b828:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	441a      	add	r2, r3
 800b834:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b83a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b83e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b846:	b29b      	uxth	r3, r3
 800b848:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4413      	add	r3, r2
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b860:	873b      	strh	r3, [r7, #56]	; 0x38
 800b862:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b864:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b868:	873b      	strh	r3, [r7, #56]	; 0x38
 800b86a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b86c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b870:	873b      	strh	r3, [r7, #56]	; 0x38
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	441a      	add	r2, r3
 800b87c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b87e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b88e:	b29b      	uxth	r3, r3
 800b890:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	441a      	add	r2, r3
 800b8b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	8013      	strh	r3, [r2, #0]
 800b8ca:	e0da      	b.n	800ba82 <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	881b      	ldrh	r3, [r3, #0]
 800b8d8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b8dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b8e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01d      	beq.n	800b924 <USB_ActivateEndpoint+0x5ec>
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	441a      	add	r2, r3
 800b90c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b920:	b29b      	uxth	r3, r3
 800b922:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01d      	beq.n	800b97c <USB_ActivateEndpoint+0x644>
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	4413      	add	r3, r2
 800b94a:	881b      	ldrh	r3, [r3, #0]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b956:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	441a      	add	r2, r3
 800b964:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b96c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b978:	b29b      	uxth	r3, r3
 800b97a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b992:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	441a      	add	r2, r3
 800b9a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b9a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	78db      	ldrb	r3, [r3, #3]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d024      	beq.n	800ba0a <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b9da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b9de:	f083 0320 	eor.w	r3, r3, #32
 800b9e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	441a      	add	r2, r3
 800b9f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b9f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	8013      	strh	r3, [r2, #0]
 800ba08:	e01d      	b.n	800ba46 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	441a      	add	r2, r3
 800ba2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	441a      	add	r2, r3
 800ba6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ba6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800ba82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3774      	adds	r7, #116	; 0x74
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop

0800ba94 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b08d      	sub	sp, #52	; 0x34
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	7b1b      	ldrb	r3, [r3, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f040 808e 	bne.w	800bbc4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	785b      	ldrb	r3, [r3, #1]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d044      	beq.n	800bb3a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	81bb      	strh	r3, [r7, #12]
 800babe:	89bb      	ldrh	r3, [r7, #12]
 800bac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d01b      	beq.n	800bb00 <USB_DeactivateEndpoint+0x6c>
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bade:	817b      	strh	r3, [r7, #10]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	441a      	add	r2, r3
 800baea:	897b      	ldrh	r3, [r7, #10]
 800baec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800baf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	881b      	ldrh	r3, [r3, #0]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb16:	813b      	strh	r3, [r7, #8]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	441a      	add	r2, r3
 800bb22:	893b      	ldrh	r3, [r7, #8]
 800bb24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	8013      	strh	r3, [r2, #0]
 800bb38:	e192      	b.n	800be60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	827b      	strh	r3, [r7, #18]
 800bb48:	8a7b      	ldrh	r3, [r7, #18]
 800bb4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d01b      	beq.n	800bb8a <USB_DeactivateEndpoint+0xf6>
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb68:	823b      	strh	r3, [r7, #16]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	441a      	add	r2, r3
 800bb74:	8a3b      	ldrh	r3, [r7, #16]
 800bb76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba0:	81fb      	strh	r3, [r7, #14]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	441a      	add	r2, r3
 800bbac:	89fb      	ldrh	r3, [r7, #14]
 800bbae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	8013      	strh	r3, [r2, #0]
 800bbc2:	e14d      	b.n	800be60 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	785b      	ldrb	r3, [r3, #1]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f040 80a5 	bne.w	800bd18 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	843b      	strh	r3, [r7, #32]
 800bbdc:	8c3b      	ldrh	r3, [r7, #32]
 800bbde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d01b      	beq.n	800bc1e <USB_DeactivateEndpoint+0x18a>
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfc:	83fb      	strh	r3, [r7, #30]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	441a      	add	r2, r3
 800bc08:	8bfb      	ldrh	r3, [r7, #30]
 800bc0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	83bb      	strh	r3, [r7, #28]
 800bc2c:	8bbb      	ldrh	r3, [r7, #28]
 800bc2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d01b      	beq.n	800bc6e <USB_DeactivateEndpoint+0x1da>
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4c:	837b      	strh	r3, [r7, #26]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	441a      	add	r2, r3
 800bc58:	8b7b      	ldrh	r3, [r7, #26]
 800bc5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc84:	833b      	strh	r3, [r7, #24]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	441a      	add	r2, r3
 800bc90:	8b3b      	ldrh	r3, [r7, #24]
 800bc92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcbc:	82fb      	strh	r3, [r7, #22]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	441a      	add	r2, r3
 800bcc8:	8afb      	ldrh	r3, [r7, #22]
 800bcca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcf4:	82bb      	strh	r3, [r7, #20]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	441a      	add	r2, r3
 800bd00:	8abb      	ldrh	r3, [r7, #20]
 800bd02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	8013      	strh	r3, [r2, #0]
 800bd16:	e0a3      	b.n	800be60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bd26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d01b      	beq.n	800bd68 <USB_DeactivateEndpoint+0x2d4>
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd46:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	441a      	add	r2, r3
 800bd52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bd76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01b      	beq.n	800bdb8 <USB_DeactivateEndpoint+0x324>
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	881b      	ldrh	r3, [r3, #0]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd96:	853b      	strh	r3, [r7, #40]	; 0x28
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	441a      	add	r2, r3
 800bda2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bda4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bda8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	441a      	add	r2, r3
 800bdda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bde0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bde4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4413      	add	r3, r2
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be06:	84bb      	strh	r3, [r7, #36]	; 0x24
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	441a      	add	r2, r3
 800be12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be24:	b29b      	uxth	r3, r3
 800be26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	b29b      	uxth	r3, r3
 800be36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	441a      	add	r2, r3
 800be4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3734      	adds	r7, #52	; 0x34
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b0a0      	sub	sp, #128	; 0x80
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	785b      	ldrb	r3, [r3, #1]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	f040 81a1 	bne.w	800c1c4 <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	699a      	ldr	r2, [r3, #24]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d909      	bls.n	800bea2 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	699a      	ldr	r2, [r3, #24]
 800be98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be9a:	1ad2      	subs	r2, r2, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	619a      	str	r2, [r3, #24]
 800bea0:	e005      	b.n	800beae <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2200      	movs	r2, #0
 800beac:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	7b1b      	ldrb	r3, [r3, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d11f      	bne.n	800bef6 <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	6959      	ldr	r1, [r3, #20]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	88da      	ldrh	r2, [r3, #6]
 800bebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fc3f 	bl	800c746 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	613b      	str	r3, [r7, #16]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	461a      	mov	r2, r3
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	4413      	add	r3, r2
 800beda:	613b      	str	r3, [r7, #16]
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	00da      	lsls	r2, r3, #3
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	4413      	add	r3, r2
 800bee6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beee:	b29a      	uxth	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	801a      	strh	r2, [r3, #0]
 800bef4:	e141      	b.n	800c17a <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d076      	beq.n	800bffa <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	785b      	ldrb	r3, [r3, #1]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d153      	bne.n	800bfc0 <USB_EPStartXfer+0x152>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	61fb      	str	r3, [r7, #28]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	461a      	mov	r2, r3
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	4413      	add	r3, r2
 800bf2a:	61fb      	str	r3, [r7, #28]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	00da      	lsls	r2, r3, #3
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	4413      	add	r3, r2
 800bf36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf3a:	61bb      	str	r3, [r7, #24]
 800bf3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d112      	bne.n	800bf68 <USB_EPStartXfer+0xfa>
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	801a      	strh	r2, [r3, #0]
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	801a      	strh	r2, [r3, #0]
 800bf66:	e043      	b.n	800bff0 <USB_EPStartXfer+0x182>
 800bf68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf6a:	2b3e      	cmp	r3, #62	; 0x3e
 800bf6c:	d811      	bhi.n	800bf92 <USB_EPStartXfer+0x124>
 800bf6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf70:	085b      	lsrs	r3, r3, #1
 800bf72:	677b      	str	r3, [r7, #116]	; 0x74
 800bf74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <USB_EPStartXfer+0x116>
 800bf7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf80:	3301      	adds	r3, #1
 800bf82:	677b      	str	r3, [r7, #116]	; 0x74
 800bf84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	029b      	lsls	r3, r3, #10
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	801a      	strh	r2, [r3, #0]
 800bf90:	e02e      	b.n	800bff0 <USB_EPStartXfer+0x182>
 800bf92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf94:	095b      	lsrs	r3, r3, #5
 800bf96:	677b      	str	r3, [r7, #116]	; 0x74
 800bf98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf9a:	f003 031f 	and.w	r3, r3, #31
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <USB_EPStartXfer+0x13a>
 800bfa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	677b      	str	r3, [r7, #116]	; 0x74
 800bfa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	029b      	lsls	r3, r3, #10
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	801a      	strh	r2, [r3, #0]
 800bfbe:	e017      	b.n	800bff0 <USB_EPStartXfer+0x182>
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	785b      	ldrb	r3, [r3, #1]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d113      	bne.n	800bff0 <USB_EPStartXfer+0x182>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd4:	4413      	add	r3, r2
 800bfd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	00da      	lsls	r2, r3, #3
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfe6:	623b      	str	r3, [r7, #32]
 800bfe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	895b      	ldrh	r3, [r3, #10]
 800bff4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800bff8:	e075      	b.n	800c0e6 <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	785b      	ldrb	r3, [r3, #1]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d153      	bne.n	800c0aa <USB_EPStartXfer+0x23c>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	461a      	mov	r2, r3
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	4413      	add	r3, r2
 800c014:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	00da      	lsls	r2, r3, #3
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	4413      	add	r3, r2
 800c020:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c024:	62bb      	str	r3, [r7, #40]	; 0x28
 800c026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d112      	bne.n	800c052 <USB_EPStartXfer+0x1e4>
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	b29b      	uxth	r3, r3
 800c032:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c036:	b29a      	uxth	r2, r3
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	801a      	strh	r2, [r3, #0]
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	b29b      	uxth	r3, r3
 800c042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04e:	801a      	strh	r2, [r3, #0]
 800c050:	e045      	b.n	800c0de <USB_EPStartXfer+0x270>
 800c052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c054:	2b3e      	cmp	r3, #62	; 0x3e
 800c056:	d811      	bhi.n	800c07c <USB_EPStartXfer+0x20e>
 800c058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c05a:	085b      	lsrs	r3, r3, #1
 800c05c:	673b      	str	r3, [r7, #112]	; 0x70
 800c05e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <USB_EPStartXfer+0x200>
 800c068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c06a:	3301      	adds	r3, #1
 800c06c:	673b      	str	r3, [r7, #112]	; 0x70
 800c06e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c070:	b29b      	uxth	r3, r3
 800c072:	029b      	lsls	r3, r3, #10
 800c074:	b29a      	uxth	r2, r3
 800c076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c078:	801a      	strh	r2, [r3, #0]
 800c07a:	e030      	b.n	800c0de <USB_EPStartXfer+0x270>
 800c07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c07e:	095b      	lsrs	r3, r3, #5
 800c080:	673b      	str	r3, [r7, #112]	; 0x70
 800c082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c084:	f003 031f 	and.w	r3, r3, #31
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d102      	bne.n	800c092 <USB_EPStartXfer+0x224>
 800c08c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c08e:	3b01      	subs	r3, #1
 800c090:	673b      	str	r3, [r7, #112]	; 0x70
 800c092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c094:	b29b      	uxth	r3, r3
 800c096:	029b      	lsls	r3, r3, #10
 800c098:	b29b      	uxth	r3, r3
 800c09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a6:	801a      	strh	r2, [r3, #0]
 800c0a8:	e019      	b.n	800c0de <USB_EPStartXfer+0x270>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d115      	bne.n	800c0de <USB_EPStartXfer+0x270>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c2:	4413      	add	r3, r2
 800c0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	00da      	lsls	r2, r3, #3
 800c0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0d4:	633b      	str	r3, [r7, #48]	; 0x30
 800c0d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	891b      	ldrh	r3, [r3, #8]
 800c0e2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	6959      	ldr	r1, [r3, #20]
 800c0ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fb27 	bl	800c746 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	785b      	ldrb	r3, [r3, #1]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d11c      	bne.n	800c13a <USB_EPStartXfer+0x2cc>
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c116:	82bb      	strh	r3, [r7, #20]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	441a      	add	r2, r3
 800c122:	8abb      	ldrh	r3, [r7, #20]
 800c124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c12c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c134:	b29b      	uxth	r3, r3
 800c136:	8013      	strh	r3, [r2, #0]
 800c138:	e01f      	b.n	800c17a <USB_EPStartXfer+0x30c>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	785b      	ldrb	r3, [r3, #1]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d11b      	bne.n	800c17a <USB_EPStartXfer+0x30c>
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c158:	82fb      	strh	r3, [r7, #22]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	441a      	add	r2, r3
 800c164:	8afb      	ldrh	r3, [r7, #22]
 800c166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c16a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c16e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c176:	b29b      	uxth	r3, r3
 800c178:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4413      	add	r3, r2
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	b29b      	uxth	r3, r3
 800c188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c190:	817b      	strh	r3, [r7, #10]
 800c192:	897b      	ldrh	r3, [r7, #10]
 800c194:	f083 0310 	eor.w	r3, r3, #16
 800c198:	817b      	strh	r3, [r7, #10]
 800c19a:	897b      	ldrh	r3, [r7, #10]
 800c19c:	f083 0320 	eor.w	r3, r3, #32
 800c1a0:	817b      	strh	r3, [r7, #10]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	441a      	add	r2, r3
 800c1ac:	897b      	ldrh	r3, [r7, #10]
 800c1ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	8013      	strh	r3, [r2, #0]
 800c1c2:	e175      	b.n	800c4b0 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	699a      	ldr	r2, [r3, #24]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d909      	bls.n	800c1e4 <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	699a      	ldr	r2, [r3, #24]
 800c1da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1dc:	1ad2      	subs	r2, r2, r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	619a      	str	r2, [r3, #24]
 800c1e2:	e005      	b.n	800c1f0 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	7b1b      	ldrb	r3, [r3, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d153      	bne.n	800c2a0 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	643b      	str	r3, [r7, #64]	; 0x40
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c202:	b29b      	uxth	r3, r3
 800c204:	461a      	mov	r2, r3
 800c206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c208:	4413      	add	r3, r2
 800c20a:	643b      	str	r3, [r7, #64]	; 0x40
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	00da      	lsls	r2, r3, #3
 800c212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c214:	4413      	add	r3, r2
 800c216:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c21a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d112      	bne.n	800c248 <USB_EPStartXfer+0x3da>
 800c222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	b29b      	uxth	r3, r3
 800c228:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c230:	801a      	strh	r2, [r3, #0]
 800c232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	b29b      	uxth	r3, r3
 800c238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c23c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c240:	b29a      	uxth	r2, r3
 800c242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c244:	801a      	strh	r2, [r3, #0]
 800c246:	e10f      	b.n	800c468 <USB_EPStartXfer+0x5fa>
 800c248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c24a:	2b3e      	cmp	r3, #62	; 0x3e
 800c24c:	d811      	bhi.n	800c272 <USB_EPStartXfer+0x404>
 800c24e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c250:	085b      	lsrs	r3, r3, #1
 800c252:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <USB_EPStartXfer+0x3f6>
 800c25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c260:	3301      	adds	r3, #1
 800c262:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c266:	b29b      	uxth	r3, r3
 800c268:	029b      	lsls	r3, r3, #10
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26e:	801a      	strh	r2, [r3, #0]
 800c270:	e0fa      	b.n	800c468 <USB_EPStartXfer+0x5fa>
 800c272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c274:	095b      	lsrs	r3, r3, #5
 800c276:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c27a:	f003 031f 	and.w	r3, r3, #31
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d102      	bne.n	800c288 <USB_EPStartXfer+0x41a>
 800c282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c284:	3b01      	subs	r3, #1
 800c286:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	029b      	lsls	r3, r3, #10
 800c28e:	b29b      	uxth	r3, r3
 800c290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c298:	b29a      	uxth	r2, r3
 800c29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29c:	801a      	strh	r2, [r3, #0]
 800c29e:	e0e3      	b.n	800c468 <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	785b      	ldrb	r3, [r3, #1]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d153      	bne.n	800c350 <USB_EPStartXfer+0x4e2>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2b8:	4413      	add	r3, r2
 800c2ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	00da      	lsls	r2, r3, #3
 800c2c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2ca:	657b      	str	r3, [r7, #84]	; 0x54
 800c2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d112      	bne.n	800c2f8 <USB_EPStartXfer+0x48a>
 800c2d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e0:	801a      	strh	r2, [r3, #0]
 800c2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e4:	881b      	ldrh	r3, [r3, #0]
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2f4:	801a      	strh	r2, [r3, #0]
 800c2f6:	e045      	b.n	800c384 <USB_EPStartXfer+0x516>
 800c2f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2fa:	2b3e      	cmp	r3, #62	; 0x3e
 800c2fc:	d811      	bhi.n	800c322 <USB_EPStartXfer+0x4b4>
 800c2fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c300:	085b      	lsrs	r3, r3, #1
 800c302:	66bb      	str	r3, [r7, #104]	; 0x68
 800c304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d002      	beq.n	800c314 <USB_EPStartXfer+0x4a6>
 800c30e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c310:	3301      	adds	r3, #1
 800c312:	66bb      	str	r3, [r7, #104]	; 0x68
 800c314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c316:	b29b      	uxth	r3, r3
 800c318:	029b      	lsls	r3, r3, #10
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c31e:	801a      	strh	r2, [r3, #0]
 800c320:	e030      	b.n	800c384 <USB_EPStartXfer+0x516>
 800c322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c324:	095b      	lsrs	r3, r3, #5
 800c326:	66bb      	str	r3, [r7, #104]	; 0x68
 800c328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c32a:	f003 031f 	and.w	r3, r3, #31
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <USB_EPStartXfer+0x4ca>
 800c332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c334:	3b01      	subs	r3, #1
 800c336:	66bb      	str	r3, [r7, #104]	; 0x68
 800c338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	029b      	lsls	r3, r3, #10
 800c33e:	b29b      	uxth	r3, r3
 800c340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c348:	b29a      	uxth	r2, r3
 800c34a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c34c:	801a      	strh	r2, [r3, #0]
 800c34e:	e019      	b.n	800c384 <USB_EPStartXfer+0x516>
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	785b      	ldrb	r3, [r3, #1]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d115      	bne.n	800c384 <USB_EPStartXfer+0x516>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	663b      	str	r3, [r7, #96]	; 0x60
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c362:	b29b      	uxth	r3, r3
 800c364:	461a      	mov	r2, r3
 800c366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c368:	4413      	add	r3, r2
 800c36a:	663b      	str	r3, [r7, #96]	; 0x60
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	00da      	lsls	r2, r3, #3
 800c372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c374:	4413      	add	r3, r2
 800c376:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c37a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c37c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c37e:	b29a      	uxth	r2, r3
 800c380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c382:	801a      	strh	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	653b      	str	r3, [r7, #80]	; 0x50
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	785b      	ldrb	r3, [r3, #1]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d153      	bne.n	800c438 <USB_EPStartXfer+0x5ca>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	64bb      	str	r3, [r7, #72]	; 0x48
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	461a      	mov	r2, r3
 800c39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a0:	4413      	add	r3, r2
 800c3a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	00da      	lsls	r2, r3, #3
 800c3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c3b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d112      	bne.n	800c3e0 <USB_EPStartXfer+0x572>
 800c3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3c4:	b29a      	uxth	r2, r3
 800c3c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c8:	801a      	strh	r2, [r3, #0]
 800c3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3dc:	801a      	strh	r2, [r3, #0]
 800c3de:	e043      	b.n	800c468 <USB_EPStartXfer+0x5fa>
 800c3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3e2:	2b3e      	cmp	r3, #62	; 0x3e
 800c3e4:	d811      	bhi.n	800c40a <USB_EPStartXfer+0x59c>
 800c3e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3e8:	085b      	lsrs	r3, r3, #1
 800c3ea:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <USB_EPStartXfer+0x58e>
 800c3f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	667b      	str	r3, [r7, #100]	; 0x64
 800c3fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	029b      	lsls	r3, r3, #10
 800c402:	b29a      	uxth	r2, r3
 800c404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c406:	801a      	strh	r2, [r3, #0]
 800c408:	e02e      	b.n	800c468 <USB_EPStartXfer+0x5fa>
 800c40a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c40c:	095b      	lsrs	r3, r3, #5
 800c40e:	667b      	str	r3, [r7, #100]	; 0x64
 800c410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c412:	f003 031f 	and.w	r3, r3, #31
 800c416:	2b00      	cmp	r3, #0
 800c418:	d102      	bne.n	800c420 <USB_EPStartXfer+0x5b2>
 800c41a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c41c:	3b01      	subs	r3, #1
 800c41e:	667b      	str	r3, [r7, #100]	; 0x64
 800c420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c422:	b29b      	uxth	r3, r3
 800c424:	029b      	lsls	r3, r3, #10
 800c426:	b29b      	uxth	r3, r3
 800c428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c42c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c430:	b29a      	uxth	r2, r3
 800c432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c434:	801a      	strh	r2, [r3, #0]
 800c436:	e017      	b.n	800c468 <USB_EPStartXfer+0x5fa>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d113      	bne.n	800c468 <USB_EPStartXfer+0x5fa>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c446:	b29b      	uxth	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c44c:	4413      	add	r3, r2
 800c44e:	653b      	str	r3, [r7, #80]	; 0x50
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00da      	lsls	r2, r3, #3
 800c456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c458:	4413      	add	r3, r2
 800c45a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c45e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c462:	b29a      	uxth	r2, r3
 800c464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c466:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	881b      	ldrh	r3, [r3, #0]
 800c474:	b29b      	uxth	r3, r3
 800c476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c47e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c480:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c482:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c486:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c488:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c48a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c48e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	441a      	add	r2, r3
 800c49a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c49c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3780      	adds	r7, #128	; 0x80
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b085      	sub	sp, #20
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	785b      	ldrb	r3, [r3, #1]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d020      	beq.n	800c50e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4e2:	81bb      	strh	r3, [r7, #12]
 800c4e4:	89bb      	ldrh	r3, [r7, #12]
 800c4e6:	f083 0310 	eor.w	r3, r3, #16
 800c4ea:	81bb      	strh	r3, [r7, #12]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	441a      	add	r2, r3
 800c4f6:	89bb      	ldrh	r3, [r7, #12]
 800c4f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c508:	b29b      	uxth	r3, r3
 800c50a:	8013      	strh	r3, [r2, #0]
 800c50c:	e01f      	b.n	800c54e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c524:	81fb      	strh	r3, [r7, #14]
 800c526:	89fb      	ldrh	r3, [r7, #14]
 800c528:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c52c:	81fb      	strh	r3, [r7, #14]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	441a      	add	r2, r3
 800c538:	89fb      	ldrh	r3, [r7, #14]
 800c53a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c53e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b087      	sub	sp, #28
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	7b1b      	ldrb	r3, [r3, #12]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f040 809d 	bne.w	800c6aa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	785b      	ldrb	r3, [r3, #1]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d04c      	beq.n	800c612 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	823b      	strh	r3, [r7, #16]
 800c586:	8a3b      	ldrh	r3, [r7, #16]
 800c588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d01b      	beq.n	800c5c8 <USB_EPClearStall+0x6c>
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	881b      	ldrh	r3, [r3, #0]
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5a6:	81fb      	strh	r3, [r7, #14]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	441a      	add	r2, r3
 800c5b2:	89fb      	ldrh	r3, [r7, #14]
 800c5b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	78db      	ldrb	r3, [r3, #3]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d06c      	beq.n	800c6aa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5e6:	81bb      	strh	r3, [r7, #12]
 800c5e8:	89bb      	ldrh	r3, [r7, #12]
 800c5ea:	f083 0320 	eor.w	r3, r3, #32
 800c5ee:	81bb      	strh	r3, [r7, #12]
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	441a      	add	r2, r3
 800c5fa:	89bb      	ldrh	r3, [r7, #12]
 800c5fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	8013      	strh	r3, [r2, #0]
 800c610:	e04b      	b.n	800c6aa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	4413      	add	r3, r2
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	82fb      	strh	r3, [r7, #22]
 800c620:	8afb      	ldrh	r3, [r7, #22]
 800c622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c626:	2b00      	cmp	r3, #0
 800c628:	d01b      	beq.n	800c662 <USB_EPClearStall+0x106>
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	b29b      	uxth	r3, r3
 800c638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c63c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c640:	82bb      	strh	r3, [r7, #20]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	441a      	add	r2, r3
 800c64c:	8abb      	ldrh	r3, [r7, #20]
 800c64e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c65e:	b29b      	uxth	r3, r3
 800c660:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	b29b      	uxth	r3, r3
 800c670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c678:	827b      	strh	r3, [r7, #18]
 800c67a:	8a7b      	ldrh	r3, [r7, #18]
 800c67c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c680:	827b      	strh	r3, [r7, #18]
 800c682:	8a7b      	ldrh	r3, [r7, #18]
 800c684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c688:	827b      	strh	r3, [r7, #18]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	441a      	add	r2, r3
 800c694:	8a7b      	ldrh	r3, [r7, #18]
 800c696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c69a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	371c      	adds	r7, #28
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c6c4:	78fb      	ldrb	r3, [r7, #3]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d103      	bne.n	800c6d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2280      	movs	r2, #128	; 0x80
 800c6ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c70e:	b480      	push	{r7}
 800c710:	b085      	sub	sp, #20
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c720:	68fb      	ldr	r3, [r7, #12]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c72e:	b480      	push	{r7}
 800c730:	b083      	sub	sp, #12
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c746:	b480      	push	{r7}
 800c748:	b08d      	sub	sp, #52	; 0x34
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	60f8      	str	r0, [r7, #12]
 800c74e:	60b9      	str	r1, [r7, #8]
 800c750:	4611      	mov	r1, r2
 800c752:	461a      	mov	r2, r3
 800c754:	460b      	mov	r3, r1
 800c756:	80fb      	strh	r3, [r7, #6]
 800c758:	4613      	mov	r3, r2
 800c75a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c75c:	88bb      	ldrh	r3, [r7, #4]
 800c75e:	3301      	adds	r3, #1
 800c760:	085b      	lsrs	r3, r3, #1
 800c762:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c76c:	88fa      	ldrh	r2, [r7, #6]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	4413      	add	r3, r2
 800c772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c776:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c77c:	e01b      	b.n	800c7b6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	3301      	adds	r3, #1
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	021b      	lsls	r3, r3, #8
 800c792:	b29b      	uxth	r3, r3
 800c794:	461a      	mov	r2, r3
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	4313      	orrs	r3, r2
 800c79a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	3302      	adds	r3, #2
 800c7a8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e0      	bne.n	800c77e <USB_WritePMA+0x38>
  }
}
 800c7bc:	bf00      	nop
 800c7be:	3734      	adds	r7, #52	; 0x34
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b08b      	sub	sp, #44	; 0x2c
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	80fb      	strh	r3, [r7, #6]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c7de:	88bb      	ldrh	r3, [r7, #4]
 800c7e0:	085b      	lsrs	r3, r3, #1
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c7ee:	88fa      	ldrh	r2, [r7, #6]
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7f8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c7fe:	e018      	b.n	800c832 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	881b      	ldrh	r3, [r3, #0]
 800c804:	b29b      	uxth	r3, r3
 800c806:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	3302      	adds	r3, #2
 800c80c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	b2da      	uxtb	r2, r3
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	3301      	adds	r3, #1
 800c81a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	0a1b      	lsrs	r3, r3, #8
 800c820:	b2da      	uxtb	r2, r3
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	3301      	adds	r3, #1
 800c82a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	3b01      	subs	r3, #1
 800c830:	627b      	str	r3, [r7, #36]	; 0x24
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1e3      	bne.n	800c800 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c838:	88bb      	ldrh	r3, [r7, #4]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	b29b      	uxth	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	d007      	beq.n	800c854 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	701a      	strb	r2, [r3, #0]
  }
}
 800c854:	bf00      	nop
 800c856:	372c      	adds	r7, #44	; 0x2c
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	460b      	mov	r3, r1
 800c86a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c86c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c870:	f009 f8d0 	bl	8015a14 <USBD_static_malloc>
 800c874:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d105      	bne.n	800c888 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c884:	2302      	movs	r3, #2
 800c886:	e066      	b.n	800c956 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7c1b      	ldrb	r3, [r3, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d119      	bne.n	800c8cc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c89c:	2202      	movs	r2, #2
 800c89e:	2181      	movs	r1, #129	; 0x81
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f008 ff9a 	bl	80157da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c8ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f008 ff90 	bl	80157da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2210      	movs	r2, #16
 800c8c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c8ca:	e016      	b.n	800c8fa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c8cc:	2340      	movs	r3, #64	; 0x40
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	2181      	movs	r1, #129	; 0x81
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f008 ff81 	bl	80157da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c8de:	2340      	movs	r3, #64	; 0x40
 800c8e0:	2202      	movs	r2, #2
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f008 ff78 	bl	80157da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2210      	movs	r2, #16
 800c8f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c8fa:	2308      	movs	r3, #8
 800c8fc:	2203      	movs	r2, #3
 800c8fe:	2182      	movs	r1, #130	; 0x82
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f008 ff6a 	bl	80157da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	7c1b      	ldrb	r3, [r3, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c93a:	2101      	movs	r1, #1
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f009 f835 	bl	80159ac <USBD_LL_PrepareReceive>
 800c942:	e007      	b.n	800c954 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c94a:	2340      	movs	r3, #64	; 0x40
 800c94c:	2101      	movs	r1, #1
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f009 f82c 	bl	80159ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	460b      	mov	r3, r1
 800c968:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c96a:	2181      	movs	r1, #129	; 0x81
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f008 ff5a 	bl	8015826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c978:	2101      	movs	r1, #1
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f008 ff53 	bl	8015826 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c988:	2182      	movs	r1, #130	; 0x82
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f008 ff4b 	bl	8015826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00e      	beq.n	800c9c8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f009 f838 	bl	8015a30 <USBD_static_free>
    pdev->pClassData = NULL;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
	...

0800c9d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d101      	bne.n	800c9fc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e0af      	b.n	800cb5c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d03f      	beq.n	800ca88 <USBD_CDC_Setup+0xb4>
 800ca08:	2b20      	cmp	r3, #32
 800ca0a:	f040 809f 	bne.w	800cb4c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	88db      	ldrh	r3, [r3, #6]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d02e      	beq.n	800ca74 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	b25b      	sxtb	r3, r3
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	da16      	bge.n	800ca4e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ca2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	88d2      	ldrh	r2, [r2, #6]
 800ca32:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	88db      	ldrh	r3, [r3, #6]
 800ca38:	2b07      	cmp	r3, #7
 800ca3a:	bf28      	it	cs
 800ca3c:	2307      	movcs	r3, #7
 800ca3e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	89fa      	ldrh	r2, [r7, #14]
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f001 fa94 	bl	800df74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ca4c:	e085      	b.n	800cb5a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	785a      	ldrb	r2, [r3, #1]
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	88db      	ldrh	r3, [r3, #6]
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ca64:	6939      	ldr	r1, [r7, #16]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	88db      	ldrh	r3, [r3, #6]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 faad 	bl	800dfcc <USBD_CtlPrepareRx>
      break;
 800ca72:	e072      	b.n	800cb5a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	7850      	ldrb	r0, [r2, #1]
 800ca80:	2200      	movs	r2, #0
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	4798      	blx	r3
      break;
 800ca86:	e068      	b.n	800cb5a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	2b0b      	cmp	r3, #11
 800ca8e:	d852      	bhi.n	800cb36 <USBD_CDC_Setup+0x162>
 800ca90:	a201      	add	r2, pc, #4	; (adr r2, 800ca98 <USBD_CDC_Setup+0xc4>)
 800ca92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca96:	bf00      	nop
 800ca98:	0800cac9 	.word	0x0800cac9
 800ca9c:	0800cb45 	.word	0x0800cb45
 800caa0:	0800cb37 	.word	0x0800cb37
 800caa4:	0800cb37 	.word	0x0800cb37
 800caa8:	0800cb37 	.word	0x0800cb37
 800caac:	0800cb37 	.word	0x0800cb37
 800cab0:	0800cb37 	.word	0x0800cb37
 800cab4:	0800cb37 	.word	0x0800cb37
 800cab8:	0800cb37 	.word	0x0800cb37
 800cabc:	0800cb37 	.word	0x0800cb37
 800cac0:	0800caf3 	.word	0x0800caf3
 800cac4:	0800cb1d 	.word	0x0800cb1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b03      	cmp	r3, #3
 800cad2:	d107      	bne.n	800cae4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cad4:	f107 030a 	add.w	r3, r7, #10
 800cad8:	2202      	movs	r2, #2
 800cada:	4619      	mov	r1, r3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f001 fa49 	bl	800df74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cae2:	e032      	b.n	800cb4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f001 f9d3 	bl	800de92 <USBD_CtlError>
            ret = USBD_FAIL;
 800caec:	2303      	movs	r3, #3
 800caee:	75fb      	strb	r3, [r7, #23]
          break;
 800caf0:	e02b      	b.n	800cb4a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d107      	bne.n	800cb0e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cafe:	f107 030d 	add.w	r3, r7, #13
 800cb02:	2201      	movs	r2, #1
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 fa34 	bl	800df74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb0c:	e01d      	b.n	800cb4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f001 f9be 	bl	800de92 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb16:	2303      	movs	r3, #3
 800cb18:	75fb      	strb	r3, [r7, #23]
          break;
 800cb1a:	e016      	b.n	800cb4a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	d00f      	beq.n	800cb48 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f001 f9b1 	bl	800de92 <USBD_CtlError>
            ret = USBD_FAIL;
 800cb30:	2303      	movs	r3, #3
 800cb32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb34:	e008      	b.n	800cb48 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb36:	6839      	ldr	r1, [r7, #0]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f001 f9aa 	bl	800de92 <USBD_CtlError>
          ret = USBD_FAIL;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	75fb      	strb	r3, [r7, #23]
          break;
 800cb42:	e002      	b.n	800cb4a <USBD_CDC_Setup+0x176>
          break;
 800cb44:	bf00      	nop
 800cb46:	e008      	b.n	800cb5a <USBD_CDC_Setup+0x186>
          break;
 800cb48:	bf00      	nop
      }
      break;
 800cb4a:	e006      	b.n	800cb5a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cb4c:	6839      	ldr	r1, [r7, #0]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f001 f99f 	bl	800de92 <USBD_CtlError>
      ret = USBD_FAIL;
 800cb54:	2303      	movs	r3, #3
 800cb56:	75fb      	strb	r3, [r7, #23]
      break;
 800cb58:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3718      	adds	r7, #24
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d101      	bne.n	800cb86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e04c      	b.n	800cc20 <USBD_CDC_DataIn+0xbc>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb8e:	78fa      	ldrb	r2, [r7, #3]
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	4613      	mov	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	440b      	add	r3, r1
 800cb9c:	3318      	adds	r3, #24
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d026      	beq.n	800cbf2 <USBD_CDC_DataIn+0x8e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cba4:	78fa      	ldrb	r2, [r7, #3]
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	440b      	add	r3, r1
 800cbb2:	3318      	adds	r3, #24
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	78fa      	ldrb	r2, [r7, #3]
 800cbb8:	68f9      	ldr	r1, [r7, #12]
 800cbba:	0152      	lsls	r2, r2, #5
 800cbbc:	440a      	add	r2, r1
 800cbbe:	3238      	adds	r2, #56	; 0x38
 800cbc0:	6812      	ldr	r2, [r2, #0]
 800cbc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbc6:	fb02 f201 	mul.w	r2, r2, r1
 800cbca:	1a9b      	subs	r3, r3, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d110      	bne.n	800cbf2 <USBD_CDC_DataIn+0x8e>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cbd0:	78fa      	ldrb	r2, [r7, #3]
 800cbd2:	6879      	ldr	r1, [r7, #4]
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4413      	add	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	440b      	add	r3, r1
 800cbde:	3318      	adds	r3, #24
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cbe4:	78f9      	ldrb	r1, [r7, #3]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	2200      	movs	r2, #0
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f008 febd 	bl	801596a <USBD_LL_Transmit>
 800cbf0:	e015      	b.n	800cc1e <USBD_CDC_DataIn+0xba>
  }
  else
  {
    hcdc->TxState = 0U;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00b      	beq.n	800cc1e <USBD_CDC_DataIn+0xba>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	68ba      	ldr	r2, [r7, #8]
 800cc10:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cc1a:	78fa      	ldrb	r2, [r7, #3]
 800cc1c:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	460b      	mov	r3, r1
 800cc32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e015      	b.n	800cc76 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f008 fecd 	bl	80159ee <USBD_LL_GetRxDataSize>
 800cc54:	4602      	mov	r2, r0
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cc70:	4611      	mov	r1, r2
 800cc72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b084      	sub	sp, #16
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc94:	2303      	movs	r3, #3
 800cc96:	e01b      	b.n	800ccd0 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d015      	beq.n	800ccce <USBD_CDC_EP0_RxReady+0x50>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cca8:	2bff      	cmp	r3, #255	; 0xff
 800ccaa:	d010      	beq.n	800ccce <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ccba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ccc2:	b292      	uxth	r2, r2
 800ccc4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	22ff      	movs	r2, #255	; 0xff
 800ccca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2243      	movs	r2, #67	; 0x43
 800cce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cce6:	4b03      	ldr	r3, [pc, #12]	; (800ccf4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	200000d8 	.word	0x200000d8

0800ccf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2243      	movs	r2, #67	; 0x43
 800cd04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cd06:	4b03      	ldr	r3, [pc, #12]	; (800cd14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	20000094 	.word	0x20000094

0800cd18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2243      	movs	r2, #67	; 0x43
 800cd24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cd26:	4b03      	ldr	r3, [pc, #12]	; (800cd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	2000011c 	.word	0x2000011c

0800cd38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	220a      	movs	r2, #10
 800cd44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd46:	4b03      	ldr	r3, [pc, #12]	; (800cd54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr
 800cd54:	20000050 	.word	0x20000050

0800cd58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e004      	b.n	800cd76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	370c      	adds	r7, #12
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b087      	sub	sp, #28
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	60f8      	str	r0, [r7, #12]
 800cd8a:	60b9      	str	r1, [r7, #8]
 800cd8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d101      	bne.n	800cda0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd9c:	2303      	movs	r3, #3
 800cd9e:	e008      	b.n	800cdb2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	371c      	adds	r7, #28
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b085      	sub	sp, #20
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e004      	b.n	800cde4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdfe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ce00:	2301      	movs	r3, #1
 800ce02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e01a      	b.n	800ce48 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d114      	bne.n	800ce46 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ce3a:	2181      	movs	r1, #129	; 0x81
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f008 fd94 	bl	801596a <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	e016      	b.n	800ce9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	7c1b      	ldrb	r3, [r3, #16]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d109      	bne.n	800ce8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce80:	2101      	movs	r1, #1
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f008 fd92 	bl	80159ac <USBD_LL_PrepareReceive>
 800ce88:	e007      	b.n	800ce9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce90:	2340      	movs	r3, #64	; 0x40
 800ce92:	2101      	movs	r1, #1
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f008 fd89 	bl	80159ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e01f      	b.n	800cefc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d003      	beq.n	800cee2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	79fa      	ldrb	r2, [r7, #7]
 800ceee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f008 fbf5 	bl	80156e0 <USBD_LL_Init>
 800cef6:	4603      	mov	r3, r0
 800cef8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e016      	b.n	800cf4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	683a      	ldr	r2, [r7, #0]
 800cf20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	f107 020e 	add.w	r2, r7, #14
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	4798      	blx	r3
 800cf40:	4602      	mov	r2, r0
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cf48:	2300      	movs	r3, #0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b082      	sub	sp, #8
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f008 fc22 	bl	80157a4 <USBD_LL_Start>
 800cf60:	4603      	mov	r3, r0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b083      	sub	sp, #12
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d009      	beq.n	800cfae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	4798      	blx	r3
 800cfaa:	4603      	mov	r3, r0
 800cfac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d007      	beq.n	800cfde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	78fa      	ldrb	r2, [r7, #3]
 800cfd8:	4611      	mov	r1, r2
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
  }

  return USBD_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 ff0f 	bl	800de1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d00e:	461a      	mov	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d01c:	f003 031f 	and.w	r3, r3, #31
 800d020:	2b01      	cmp	r3, #1
 800d022:	d00e      	beq.n	800d042 <USBD_LL_SetupStage+0x5a>
 800d024:	2b01      	cmp	r3, #1
 800d026:	d302      	bcc.n	800d02e <USBD_LL_SetupStage+0x46>
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d014      	beq.n	800d056 <USBD_LL_SetupStage+0x6e>
 800d02c:	e01d      	b.n	800d06a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f9ee 	bl	800d418 <USBD_StdDevReq>
 800d03c:	4603      	mov	r3, r0
 800d03e:	73fb      	strb	r3, [r7, #15]
      break;
 800d040:	e020      	b.n	800d084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d048:	4619      	mov	r1, r3
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fa52 	bl	800d4f4 <USBD_StdItfReq>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]
      break;
 800d054:	e016      	b.n	800d084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fa8f 	bl	800d582 <USBD_StdEPReq>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]
      break;
 800d068:	e00c      	b.n	800d084 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d074:	b2db      	uxtb	r3, r3
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f008 fbf3 	bl	8015864 <USBD_LL_StallEP>
 800d07e:	4603      	mov	r3, r0
 800d080:	73fb      	strb	r3, [r7, #15]
      break;
 800d082:	bf00      	nop
  }

  return ret;
 800d084:	7bfb      	ldrb	r3, [r7, #15]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b086      	sub	sp, #24
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	460b      	mov	r3, r1
 800d098:	607a      	str	r2, [r7, #4]
 800d09a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d09c:	7afb      	ldrb	r3, [r7, #11]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d138      	bne.n	800d114 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d0a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d14a      	bne.n	800d14a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	689a      	ldr	r2, [r3, #8]
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d913      	bls.n	800d0e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	1ad2      	subs	r2, r2, r3
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	bf28      	it	cs
 800d0da:	4613      	movcs	r3, r2
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 ff90 	bl	800e006 <USBD_CtlContinueRx>
 800d0e6:	e030      	b.n	800d14a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d10b      	bne.n	800d10c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d005      	beq.n	800d10c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 ff8b 	bl	800e028 <USBD_CtlSendStatus>
 800d112:	e01a      	b.n	800d14a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b03      	cmp	r3, #3
 800d11e:	d114      	bne.n	800d14a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d126:	699b      	ldr	r3, [r3, #24]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00e      	beq.n	800d14a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	7afa      	ldrb	r2, [r7, #11]
 800d136:	4611      	mov	r1, r2
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	4798      	blx	r3
 800d13c:	4603      	mov	r3, r0
 800d13e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d001      	beq.n	800d14a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d146:	7dfb      	ldrb	r3, [r7, #23]
 800d148:	e000      	b.n	800d14c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	460b      	mov	r3, r1
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d162:	7afb      	ldrb	r3, [r7, #11]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d16b      	bne.n	800d240 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	3314      	adds	r3, #20
 800d16c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d174:	2b02      	cmp	r3, #2
 800d176:	d156      	bne.n	800d226 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	429a      	cmp	r2, r3
 800d182:	d914      	bls.n	800d1ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	689a      	ldr	r2, [r3, #8]
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	1ad2      	subs	r2, r2, r3
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	461a      	mov	r2, r3
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 ff05 	bl	800dfaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f008 fc00 	bl	80159ac <USBD_LL_PrepareReceive>
 800d1ac:	e03b      	b.n	800d226 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	68da      	ldr	r2, [r3, #12]
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d11c      	bne.n	800d1f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d316      	bcc.n	800d1f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	685a      	ldr	r2, [r3, #4]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d20f      	bcs.n	800d1f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f000 fee6 	bl	800dfaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f008 fbdd 	bl	80159ac <USBD_LL_PrepareReceive>
 800d1f2:	e018      	b.n	800d226 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d10b      	bne.n	800d218 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d218:	2180      	movs	r1, #128	; 0x80
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f008 fb22 	bl	8015864 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f000 ff14 	bl	800e04e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d122      	bne.n	800d276 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f7ff fe9a 	bl	800cf6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d23e:	e01a      	b.n	800d276 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d246:	b2db      	uxtb	r3, r3
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d114      	bne.n	800d276 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00e      	beq.n	800d276 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d25e:	695b      	ldr	r3, [r3, #20]
 800d260:	7afa      	ldrb	r2, [r7, #11]
 800d262:	4611      	mov	r1, r2
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	4798      	blx	r3
 800d268:	4603      	mov	r3, r0
 800d26a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d26c:	7dfb      	ldrb	r3, [r7, #23]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	e000      	b.n	800d278 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3718      	adds	r7, #24
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e02f      	b.n	800d314 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00f      	beq.n	800d2de <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d009      	beq.n	800d2de <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	6852      	ldr	r2, [r2, #4]
 800d2d6:	b2d2      	uxtb	r2, r2
 800d2d8:	4611      	mov	r1, r2
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2de:	2340      	movs	r3, #64	; 0x40
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f008 fa78 	bl	80157da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2240      	movs	r2, #64	; 0x40
 800d2f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2fa:	2340      	movs	r3, #64	; 0x40
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2180      	movs	r1, #128	; 0x80
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f008 fa6a 	bl	80157da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2240      	movs	r2, #64	; 0x40
 800d310:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	460b      	mov	r3, r1
 800d326:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	78fa      	ldrb	r2, [r7, #3]
 800d32c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2204      	movs	r2, #4
 800d356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b04      	cmp	r3, #4
 800d37a:	d106      	bne.n	800d38a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d382:	b2da      	uxtb	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d101      	bne.n	800d3ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e012      	b.n	800d3d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d10b      	bne.n	800d3d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3c0:	69db      	ldr	r3, [r3, #28]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d005      	beq.n	800d3d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3cc:	69db      	ldr	r3, [r3, #28]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b087      	sub	sp, #28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d3fa:	8a3b      	ldrh	r3, [r7, #16]
 800d3fc:	021b      	lsls	r3, r3, #8
 800d3fe:	b21a      	sxth	r2, r3
 800d400:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d404:	4313      	orrs	r3, r2
 800d406:	b21b      	sxth	r3, r3
 800d408:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d40a:	89fb      	ldrh	r3, [r7, #14]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	371c      	adds	r7, #28
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d422:	2300      	movs	r3, #0
 800d424:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d42e:	2b20      	cmp	r3, #32
 800d430:	d004      	beq.n	800d43c <USBD_StdDevReq+0x24>
 800d432:	2b40      	cmp	r3, #64	; 0x40
 800d434:	d002      	beq.n	800d43c <USBD_StdDevReq+0x24>
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <USBD_StdDevReq+0x38>
 800d43a:	e050      	b.n	800d4de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	4798      	blx	r3
 800d44a:	4603      	mov	r3, r0
 800d44c:	73fb      	strb	r3, [r7, #15]
      break;
 800d44e:	e04b      	b.n	800d4e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	785b      	ldrb	r3, [r3, #1]
 800d454:	2b09      	cmp	r3, #9
 800d456:	d83c      	bhi.n	800d4d2 <USBD_StdDevReq+0xba>
 800d458:	a201      	add	r2, pc, #4	; (adr r2, 800d460 <USBD_StdDevReq+0x48>)
 800d45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45e:	bf00      	nop
 800d460:	0800d4b5 	.word	0x0800d4b5
 800d464:	0800d4c9 	.word	0x0800d4c9
 800d468:	0800d4d3 	.word	0x0800d4d3
 800d46c:	0800d4bf 	.word	0x0800d4bf
 800d470:	0800d4d3 	.word	0x0800d4d3
 800d474:	0800d493 	.word	0x0800d493
 800d478:	0800d489 	.word	0x0800d489
 800d47c:	0800d4d3 	.word	0x0800d4d3
 800d480:	0800d4ab 	.word	0x0800d4ab
 800d484:	0800d49d 	.word	0x0800d49d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d488:	6839      	ldr	r1, [r7, #0]
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f9d4 	bl	800d838 <USBD_GetDescriptor>
          break;
 800d490:	e024      	b.n	800d4dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fb39 	bl	800db0c <USBD_SetAddress>
          break;
 800d49a:	e01f      	b.n	800d4dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fb78 	bl	800db94 <USBD_SetConfig>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73fb      	strb	r3, [r7, #15]
          break;
 800d4a8:	e018      	b.n	800d4dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fc17 	bl	800dce0 <USBD_GetConfig>
          break;
 800d4b2:	e013      	b.n	800d4dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fc47 	bl	800dd4a <USBD_GetStatus>
          break;
 800d4bc:	e00e      	b.n	800d4dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fc76 	bl	800ddb2 <USBD_SetFeature>
          break;
 800d4c6:	e009      	b.n	800d4dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fc85 	bl	800ddda <USBD_ClrFeature>
          break;
 800d4d0:	e004      	b.n	800d4dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fcdc 	bl	800de92 <USBD_CtlError>
          break;
 800d4da:	bf00      	nop
      }
      break;
 800d4dc:	e004      	b.n	800d4e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d4de:	6839      	ldr	r1, [r7, #0]
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 fcd6 	bl	800de92 <USBD_CtlError>
      break;
 800d4e6:	bf00      	nop
  }

  return ret;
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop

0800d4f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d50a:	2b20      	cmp	r3, #32
 800d50c:	d003      	beq.n	800d516 <USBD_StdItfReq+0x22>
 800d50e:	2b40      	cmp	r3, #64	; 0x40
 800d510:	d001      	beq.n	800d516 <USBD_StdItfReq+0x22>
 800d512:	2b00      	cmp	r3, #0
 800d514:	d12b      	bne.n	800d56e <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	3b01      	subs	r3, #1
 800d520:	2b02      	cmp	r3, #2
 800d522:	d81d      	bhi.n	800d560 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	889b      	ldrh	r3, [r3, #4]
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d813      	bhi.n	800d556 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	4798      	blx	r3
 800d53c:	4603      	mov	r3, r0
 800d53e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	88db      	ldrh	r3, [r3, #6]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d110      	bne.n	800d56a <USBD_StdItfReq+0x76>
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10d      	bne.n	800d56a <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fd6a 	bl	800e028 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d554:	e009      	b.n	800d56a <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fc9a 	bl	800de92 <USBD_CtlError>
          break;
 800d55e:	e004      	b.n	800d56a <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fc95 	bl	800de92 <USBD_CtlError>
          break;
 800d568:	e000      	b.n	800d56c <USBD_StdItfReq+0x78>
          break;
 800d56a:	bf00      	nop
      }
      break;
 800d56c:	e004      	b.n	800d578 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fc8e 	bl	800de92 <USBD_CtlError>
      break;
 800d576:	bf00      	nop
  }

  return ret;
 800d578:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	889b      	ldrh	r3, [r3, #4]
 800d594:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d59e:	2b20      	cmp	r3, #32
 800d5a0:	d004      	beq.n	800d5ac <USBD_StdEPReq+0x2a>
 800d5a2:	2b40      	cmp	r3, #64	; 0x40
 800d5a4:	d002      	beq.n	800d5ac <USBD_StdEPReq+0x2a>
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00a      	beq.n	800d5c0 <USBD_StdEPReq+0x3e>
 800d5aa:	e13a      	b.n	800d822 <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b2:	689b      	ldr	r3, [r3, #8]
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	4798      	blx	r3
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5be:	e135      	b.n	800d82c <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	785b      	ldrb	r3, [r3, #1]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d03f      	beq.n	800d648 <USBD_StdEPReq+0xc6>
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d002      	beq.n	800d5d2 <USBD_StdEPReq+0x50>
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d07b      	beq.n	800d6c8 <USBD_StdEPReq+0x146>
 800d5d0:	e121      	b.n	800d816 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d002      	beq.n	800d5e4 <USBD_StdEPReq+0x62>
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	d015      	beq.n	800d60e <USBD_StdEPReq+0x8c>
 800d5e2:	e02b      	b.n	800d63c <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00c      	beq.n	800d604 <USBD_StdEPReq+0x82>
 800d5ea:	7bbb      	ldrb	r3, [r7, #14]
 800d5ec:	2b80      	cmp	r3, #128	; 0x80
 800d5ee:	d009      	beq.n	800d604 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5f0:	7bbb      	ldrb	r3, [r7, #14]
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f008 f935 	bl	8015864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5fa:	2180      	movs	r1, #128	; 0x80
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f008 f931 	bl	8015864 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d602:	e020      	b.n	800d646 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fc43 	bl	800de92 <USBD_CtlError>
              break;
 800d60c:	e01b      	b.n	800d646 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	885b      	ldrh	r3, [r3, #2]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10e      	bne.n	800d634 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d616:	7bbb      	ldrb	r3, [r7, #14]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <USBD_StdEPReq+0xb2>
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	2b80      	cmp	r3, #128	; 0x80
 800d620:	d008      	beq.n	800d634 <USBD_StdEPReq+0xb2>
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	88db      	ldrh	r3, [r3, #6]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d104      	bne.n	800d634 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f008 f918 	bl	8015864 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 fcf7 	bl	800e028 <USBD_CtlSendStatus>

              break;
 800d63a:	e004      	b.n	800d646 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fc27 	bl	800de92 <USBD_CtlError>
              break;
 800d644:	bf00      	nop
          }
          break;
 800d646:	e0eb      	b.n	800d820 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b02      	cmp	r3, #2
 800d652:	d002      	beq.n	800d65a <USBD_StdEPReq+0xd8>
 800d654:	2b03      	cmp	r3, #3
 800d656:	d015      	beq.n	800d684 <USBD_StdEPReq+0x102>
 800d658:	e02f      	b.n	800d6ba <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d65a:	7bbb      	ldrb	r3, [r7, #14]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00c      	beq.n	800d67a <USBD_StdEPReq+0xf8>
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	2b80      	cmp	r3, #128	; 0x80
 800d664:	d009      	beq.n	800d67a <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d666:	7bbb      	ldrb	r3, [r7, #14]
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f008 f8fa 	bl	8015864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d670:	2180      	movs	r1, #128	; 0x80
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f008 f8f6 	bl	8015864 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d678:	e025      	b.n	800d6c6 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fc08 	bl	800de92 <USBD_CtlError>
              break;
 800d682:	e020      	b.n	800d6c6 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	885b      	ldrh	r3, [r3, #2]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d11b      	bne.n	800d6c4 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
 800d68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d692:	2b00      	cmp	r3, #0
 800d694:	d004      	beq.n	800d6a0 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d696:	7bbb      	ldrb	r3, [r7, #14]
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f008 f901 	bl	80158a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fcc1 	bl	800e028 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	4798      	blx	r3
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d6b8:	e004      	b.n	800d6c4 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fbe8 	bl	800de92 <USBD_CtlError>
              break;
 800d6c2:	e000      	b.n	800d6c6 <USBD_StdEPReq+0x144>
              break;
 800d6c4:	bf00      	nop
          }
          break;
 800d6c6:	e0ab      	b.n	800d820 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d002      	beq.n	800d6da <USBD_StdEPReq+0x158>
 800d6d4:	2b03      	cmp	r3, #3
 800d6d6:	d032      	beq.n	800d73e <USBD_StdEPReq+0x1bc>
 800d6d8:	e097      	b.n	800d80a <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6da:	7bbb      	ldrb	r3, [r7, #14]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d007      	beq.n	800d6f0 <USBD_StdEPReq+0x16e>
 800d6e0:	7bbb      	ldrb	r3, [r7, #14]
 800d6e2:	2b80      	cmp	r3, #128	; 0x80
 800d6e4:	d004      	beq.n	800d6f0 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fbd2 	bl	800de92 <USBD_CtlError>
                break;
 800d6ee:	e091      	b.n	800d814 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	da0b      	bge.n	800d710 <USBD_StdEPReq+0x18e>
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6fe:	4613      	mov	r3, r2
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	3310      	adds	r3, #16
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	4413      	add	r3, r2
 800d70c:	3304      	adds	r3, #4
 800d70e:	e00b      	b.n	800d728 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	4413      	add	r3, r2
 800d726:	3304      	adds	r3, #4
 800d728:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2202      	movs	r2, #2
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fc1c 	bl	800df74 <USBD_CtlSendData>
              break;
 800d73c:	e06a      	b.n	800d814 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d73e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d742:	2b00      	cmp	r3, #0
 800d744:	da11      	bge.n	800d76a <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d746:	7bbb      	ldrb	r3, [r7, #14]
 800d748:	f003 020f 	and.w	r2, r3, #15
 800d74c:	6879      	ldr	r1, [r7, #4]
 800d74e:	4613      	mov	r3, r2
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	440b      	add	r3, r1
 800d758:	3324      	adds	r3, #36	; 0x24
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d117      	bne.n	800d790 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fb95 	bl	800de92 <USBD_CtlError>
                  break;
 800d768:	e054      	b.n	800d814 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d76a:	7bbb      	ldrb	r3, [r7, #14]
 800d76c:	f003 020f 	and.w	r2, r3, #15
 800d770:	6879      	ldr	r1, [r7, #4]
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	440b      	add	r3, r1
 800d77c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d104      	bne.n	800d790 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fb82 	bl	800de92 <USBD_CtlError>
                  break;
 800d78e:	e041      	b.n	800d814 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d794:	2b00      	cmp	r3, #0
 800d796:	da0b      	bge.n	800d7b0 <USBD_StdEPReq+0x22e>
 800d798:	7bbb      	ldrb	r3, [r7, #14]
 800d79a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d79e:	4613      	mov	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	3310      	adds	r3, #16
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	e00b      	b.n	800d7c8 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4413      	add	r3, r2
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d002      	beq.n	800d7d6 <USBD_StdEPReq+0x254>
 800d7d0:	7bbb      	ldrb	r3, [r7, #14]
 800d7d2:	2b80      	cmp	r3, #128	; 0x80
 800d7d4:	d103      	bne.n	800d7de <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	e00e      	b.n	800d7fc <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d7de:	7bbb      	ldrb	r3, [r7, #14]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f008 f87c 	bl	80158e0 <USBD_LL_IsStallEP>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	e002      	b.n	800d7fc <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2202      	movs	r2, #2
 800d800:	4619      	mov	r1, r3
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fbb6 	bl	800df74 <USBD_CtlSendData>
              break;
 800d808:	e004      	b.n	800d814 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fb40 	bl	800de92 <USBD_CtlError>
              break;
 800d812:	bf00      	nop
          }
          break;
 800d814:	e004      	b.n	800d820 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 800d816:	6839      	ldr	r1, [r7, #0]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fb3a 	bl	800de92 <USBD_CtlError>
          break;
 800d81e:	bf00      	nop
      }
      break;
 800d820:	e004      	b.n	800d82c <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fb34 	bl	800de92 <USBD_CtlError>
      break;
 800d82a:	bf00      	nop
  }

  return ret;
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
	...

0800d838 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d842:	2300      	movs	r3, #0
 800d844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d84a:	2300      	movs	r3, #0
 800d84c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	885b      	ldrh	r3, [r3, #2]
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	b29b      	uxth	r3, r3
 800d856:	3b01      	subs	r3, #1
 800d858:	2b06      	cmp	r3, #6
 800d85a:	f200 8128 	bhi.w	800daae <USBD_GetDescriptor+0x276>
 800d85e:	a201      	add	r2, pc, #4	; (adr r2, 800d864 <USBD_GetDescriptor+0x2c>)
 800d860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d864:	0800d881 	.word	0x0800d881
 800d868:	0800d899 	.word	0x0800d899
 800d86c:	0800d8d9 	.word	0x0800d8d9
 800d870:	0800daaf 	.word	0x0800daaf
 800d874:	0800daaf 	.word	0x0800daaf
 800d878:	0800da4f 	.word	0x0800da4f
 800d87c:	0800da7b 	.word	0x0800da7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	7c12      	ldrb	r2, [r2, #16]
 800d88c:	f107 0108 	add.w	r1, r7, #8
 800d890:	4610      	mov	r0, r2
 800d892:	4798      	blx	r3
 800d894:	60f8      	str	r0, [r7, #12]
      break;
 800d896:	e112      	b.n	800dabe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7c1b      	ldrb	r3, [r3, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10d      	bne.n	800d8bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a8:	f107 0208 	add.w	r2, r7, #8
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4798      	blx	r3
 800d8b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d8ba:	e100      	b.n	800dabe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	f107 0208 	add.w	r2, r7, #8
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	4798      	blx	r3
 800d8cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	701a      	strb	r2, [r3, #0]
      break;
 800d8d6:	e0f2      	b.n	800dabe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	885b      	ldrh	r3, [r3, #2]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b05      	cmp	r3, #5
 800d8e0:	f200 80ac 	bhi.w	800da3c <USBD_GetDescriptor+0x204>
 800d8e4:	a201      	add	r2, pc, #4	; (adr r2, 800d8ec <USBD_GetDescriptor+0xb4>)
 800d8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ea:	bf00      	nop
 800d8ec:	0800d905 	.word	0x0800d905
 800d8f0:	0800d939 	.word	0x0800d939
 800d8f4:	0800d96d 	.word	0x0800d96d
 800d8f8:	0800d9a1 	.word	0x0800d9a1
 800d8fc:	0800d9d5 	.word	0x0800d9d5
 800d900:	0800da09 	.word	0x0800da09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00b      	beq.n	800d928 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	7c12      	ldrb	r2, [r2, #16]
 800d91c:	f107 0108 	add.w	r1, r7, #8
 800d920:	4610      	mov	r0, r2
 800d922:	4798      	blx	r3
 800d924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d926:	e091      	b.n	800da4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fab1 	bl	800de92 <USBD_CtlError>
            err++;
 800d930:	7afb      	ldrb	r3, [r7, #11]
 800d932:	3301      	adds	r3, #1
 800d934:	72fb      	strb	r3, [r7, #11]
          break;
 800d936:	e089      	b.n	800da4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00b      	beq.n	800d95c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	7c12      	ldrb	r2, [r2, #16]
 800d950:	f107 0108 	add.w	r1, r7, #8
 800d954:	4610      	mov	r0, r2
 800d956:	4798      	blx	r3
 800d958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d95a:	e077      	b.n	800da4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fa97 	bl	800de92 <USBD_CtlError>
            err++;
 800d964:	7afb      	ldrb	r3, [r7, #11]
 800d966:	3301      	adds	r3, #1
 800d968:	72fb      	strb	r3, [r7, #11]
          break;
 800d96a:	e06f      	b.n	800da4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	7c12      	ldrb	r2, [r2, #16]
 800d984:	f107 0108 	add.w	r1, r7, #8
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
 800d98c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d98e:	e05d      	b.n	800da4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d990:	6839      	ldr	r1, [r7, #0]
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 fa7d 	bl	800de92 <USBD_CtlError>
            err++;
 800d998:	7afb      	ldrb	r3, [r7, #11]
 800d99a:	3301      	adds	r3, #1
 800d99c:	72fb      	strb	r3, [r7, #11]
          break;
 800d99e:	e055      	b.n	800da4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	7c12      	ldrb	r2, [r2, #16]
 800d9b8:	f107 0108 	add.w	r1, r7, #8
 800d9bc:	4610      	mov	r0, r2
 800d9be:	4798      	blx	r3
 800d9c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9c2:	e043      	b.n	800da4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fa63 	bl	800de92 <USBD_CtlError>
            err++;
 800d9cc:	7afb      	ldrb	r3, [r7, #11]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9d2:	e03b      	b.n	800da4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	7c12      	ldrb	r2, [r2, #16]
 800d9ec:	f107 0108 	add.w	r1, r7, #8
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4798      	blx	r3
 800d9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9f6:	e029      	b.n	800da4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fa49 	bl	800de92 <USBD_CtlError>
            err++;
 800da00:	7afb      	ldrb	r3, [r7, #11]
 800da02:	3301      	adds	r3, #1
 800da04:	72fb      	strb	r3, [r7, #11]
          break;
 800da06:	e021      	b.n	800da4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	7c12      	ldrb	r2, [r2, #16]
 800da20:	f107 0108 	add.w	r1, r7, #8
 800da24:	4610      	mov	r0, r2
 800da26:	4798      	blx	r3
 800da28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da2a:	e00f      	b.n	800da4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800da2c:	6839      	ldr	r1, [r7, #0]
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fa2f 	bl	800de92 <USBD_CtlError>
            err++;
 800da34:	7afb      	ldrb	r3, [r7, #11]
 800da36:	3301      	adds	r3, #1
 800da38:	72fb      	strb	r3, [r7, #11]
          break;
 800da3a:	e007      	b.n	800da4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da3c:	6839      	ldr	r1, [r7, #0]
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fa27 	bl	800de92 <USBD_CtlError>
          err++;
 800da44:	7afb      	ldrb	r3, [r7, #11]
 800da46:	3301      	adds	r3, #1
 800da48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da4a:	bf00      	nop
      }
      break;
 800da4c:	e037      	b.n	800dabe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7c1b      	ldrb	r3, [r3, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d109      	bne.n	800da6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da5e:	f107 0208 	add.w	r2, r7, #8
 800da62:	4610      	mov	r0, r2
 800da64:	4798      	blx	r3
 800da66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da68:	e029      	b.n	800dabe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fa10 	bl	800de92 <USBD_CtlError>
        err++;
 800da72:	7afb      	ldrb	r3, [r7, #11]
 800da74:	3301      	adds	r3, #1
 800da76:	72fb      	strb	r3, [r7, #11]
      break;
 800da78:	e021      	b.n	800dabe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	7c1b      	ldrb	r3, [r3, #16]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10d      	bne.n	800da9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	f107 0208 	add.w	r2, r7, #8
 800da8e:	4610      	mov	r0, r2
 800da90:	4798      	blx	r3
 800da92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	3301      	adds	r3, #1
 800da98:	2207      	movs	r2, #7
 800da9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da9c:	e00f      	b.n	800dabe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f9f6 	bl	800de92 <USBD_CtlError>
        err++;
 800daa6:	7afb      	ldrb	r3, [r7, #11]
 800daa8:	3301      	adds	r3, #1
 800daaa:	72fb      	strb	r3, [r7, #11]
      break;
 800daac:	e007      	b.n	800dabe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f9ee 	bl	800de92 <USBD_CtlError>
      err++;
 800dab6:	7afb      	ldrb	r3, [r7, #11]
 800dab8:	3301      	adds	r3, #1
 800daba:	72fb      	strb	r3, [r7, #11]
      break;
 800dabc:	bf00      	nop
  }

  if (err != 0U)
 800dabe:	7afb      	ldrb	r3, [r7, #11]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d11e      	bne.n	800db02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	88db      	ldrh	r3, [r3, #6]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d016      	beq.n	800dafa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dacc:	893b      	ldrh	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00e      	beq.n	800daf0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	88da      	ldrh	r2, [r3, #6]
 800dad6:	893b      	ldrh	r3, [r7, #8]
 800dad8:	4293      	cmp	r3, r2
 800dada:	bf28      	it	cs
 800dadc:	4613      	movcs	r3, r2
 800dade:	b29b      	uxth	r3, r3
 800dae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dae2:	893b      	ldrh	r3, [r7, #8]
 800dae4:	461a      	mov	r2, r3
 800dae6:	68f9      	ldr	r1, [r7, #12]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fa43 	bl	800df74 <USBD_CtlSendData>
 800daee:	e009      	b.n	800db04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f9cd 	bl	800de92 <USBD_CtlError>
 800daf8:	e004      	b.n	800db04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fa94 	bl	800e028 <USBD_CtlSendStatus>
 800db00:	e000      	b.n	800db04 <USBD_GetDescriptor+0x2cc>
    return;
 800db02:	bf00      	nop
  }
}
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop

0800db0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	889b      	ldrh	r3, [r3, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d131      	bne.n	800db82 <USBD_SetAddress+0x76>
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	88db      	ldrh	r3, [r3, #6]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d12d      	bne.n	800db82 <USBD_SetAddress+0x76>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	885b      	ldrh	r3, [r3, #2]
 800db2a:	2b7f      	cmp	r3, #127	; 0x7f
 800db2c:	d829      	bhi.n	800db82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	885b      	ldrh	r3, [r3, #2]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b03      	cmp	r3, #3
 800db44:	d104      	bne.n	800db50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f9a2 	bl	800de92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db4e:	e01c      	b.n	800db8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7bfa      	ldrb	r2, [r7, #15]
 800db54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db58:	7bfb      	ldrb	r3, [r7, #15]
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f007 fee5 	bl	801592c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fa60 	bl	800e028 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d004      	beq.n	800db78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2202      	movs	r2, #2
 800db72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db76:	e008      	b.n	800db8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db80:	e003      	b.n	800db8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f984 	bl	800de92 <USBD_CtlError>
  }
}
 800db8a:	bf00      	nop
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	885b      	ldrh	r3, [r3, #2]
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	4b4c      	ldr	r3, [pc, #304]	; (800dcdc <USBD_SetConfig+0x148>)
 800dbaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbac:	4b4b      	ldr	r3, [pc, #300]	; (800dcdc <USBD_SetConfig+0x148>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d905      	bls.n	800dbc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 f96b 	bl	800de92 <USBD_CtlError>
    return USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	e088      	b.n	800dcd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d002      	beq.n	800dbd2 <USBD_SetConfig+0x3e>
 800dbcc:	2b03      	cmp	r3, #3
 800dbce:	d025      	beq.n	800dc1c <USBD_SetConfig+0x88>
 800dbd0:	e071      	b.n	800dcb6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dbd2:	4b42      	ldr	r3, [pc, #264]	; (800dcdc <USBD_SetConfig+0x148>)
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d01c      	beq.n	800dc14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dbda:	4b40      	ldr	r3, [pc, #256]	; (800dcdc <USBD_SetConfig+0x148>)
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbe4:	4b3d      	ldr	r3, [pc, #244]	; (800dcdc <USBD_SetConfig+0x148>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7ff f9c8 	bl	800cf80 <USBD_SetClassConfig>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d004      	beq.n	800dc04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dbfa:	6839      	ldr	r1, [r7, #0]
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 f948 	bl	800de92 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc02:	e065      	b.n	800dcd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fa0f 	bl	800e028 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2203      	movs	r2, #3
 800dc0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dc12:	e05d      	b.n	800dcd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fa07 	bl	800e028 <USBD_CtlSendStatus>
      break;
 800dc1a:	e059      	b.n	800dcd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc1c:	4b2f      	ldr	r3, [pc, #188]	; (800dcdc <USBD_SetConfig+0x148>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d112      	bne.n	800dc4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2202      	movs	r2, #2
 800dc28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dc2c:	4b2b      	ldr	r3, [pc, #172]	; (800dcdc <USBD_SetConfig+0x148>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc36:	4b29      	ldr	r3, [pc, #164]	; (800dcdc <USBD_SetConfig+0x148>)
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff f9bb 	bl	800cfb8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f9f0 	bl	800e028 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc48:	e042      	b.n	800dcd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc4a:	4b24      	ldr	r3, [pc, #144]	; (800dcdc <USBD_SetConfig+0x148>)
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d02a      	beq.n	800dcae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff f9a9 	bl	800cfb8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc66:	4b1d      	ldr	r3, [pc, #116]	; (800dcdc <USBD_SetConfig+0x148>)
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc70:	4b1a      	ldr	r3, [pc, #104]	; (800dcdc <USBD_SetConfig+0x148>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	4619      	mov	r1, r3
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff f982 	bl	800cf80 <USBD_SetClassConfig>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00f      	beq.n	800dca6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dc86:	6839      	ldr	r1, [r7, #0]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 f902 	bl	800de92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff f98e 	bl	800cfb8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dca4:	e014      	b.n	800dcd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f9be 	bl	800e028 <USBD_CtlSendStatus>
      break;
 800dcac:	e010      	b.n	800dcd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f9ba 	bl	800e028 <USBD_CtlSendStatus>
      break;
 800dcb4:	e00c      	b.n	800dcd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f8ea 	bl	800de92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dcbe:	4b07      	ldr	r3, [pc, #28]	; (800dcdc <USBD_SetConfig+0x148>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7ff f977 	bl	800cfb8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dcca:	2303      	movs	r3, #3
 800dccc:	73fb      	strb	r3, [r7, #15]
      break;
 800dcce:	bf00      	nop
  }

  return ret;
 800dcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	200003ce 	.word	0x200003ce

0800dce0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	88db      	ldrh	r3, [r3, #6]
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d004      	beq.n	800dcfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f8cc 	bl	800de92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dcfa:	e022      	b.n	800dd42 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	db17      	blt.n	800dd38 <USBD_GetConfig+0x58>
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	dd02      	ble.n	800dd12 <USBD_GetConfig+0x32>
 800dd0c:	2b03      	cmp	r3, #3
 800dd0e:	d00b      	beq.n	800dd28 <USBD_GetConfig+0x48>
 800dd10:	e012      	b.n	800dd38 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	3308      	adds	r3, #8
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f927 	bl	800df74 <USBD_CtlSendData>
        break;
 800dd26:	e00c      	b.n	800dd42 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f91f 	bl	800df74 <USBD_CtlSendData>
        break;
 800dd36:	e004      	b.n	800dd42 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f8a9 	bl	800de92 <USBD_CtlError>
        break;
 800dd40:	bf00      	nop
}
 800dd42:	bf00      	nop
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d81e      	bhi.n	800dda0 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	88db      	ldrh	r3, [r3, #6]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d004      	beq.n	800dd74 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 f890 	bl	800de92 <USBD_CtlError>
        break;
 800dd72:	e01a      	b.n	800ddaa <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f043 0202 	orr.w	r2, r3, #2
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	330c      	adds	r3, #12
 800dd94:	2202      	movs	r2, #2
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 f8eb 	bl	800df74 <USBD_CtlSendData>
      break;
 800dd9e:	e004      	b.n	800ddaa <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dda0:	6839      	ldr	r1, [r7, #0]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f875 	bl	800de92 <USBD_CtlError>
      break;
 800dda8:	bf00      	nop
  }
}
 800ddaa:	bf00      	nop
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	885b      	ldrh	r3, [r3, #2]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d106      	bne.n	800ddd2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f92b 	bl	800e028 <USBD_CtlSendStatus>
  }
}
 800ddd2:	bf00      	nop
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	3b01      	subs	r3, #1
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d80b      	bhi.n	800de0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	885b      	ldrh	r3, [r3, #2]
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d10c      	bne.n	800de14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f910 	bl	800e028 <USBD_CtlSendStatus>
      }
      break;
 800de08:	e004      	b.n	800de14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f840 	bl	800de92 <USBD_CtlError>
      break;
 800de12:	e000      	b.n	800de16 <USBD_ClrFeature+0x3c>
      break;
 800de14:	bf00      	nop
  }
}
 800de16:	bf00      	nop
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b084      	sub	sp, #16
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	781a      	ldrb	r2, [r3, #0]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	3301      	adds	r3, #1
 800de38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	781a      	ldrb	r2, [r3, #0]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3301      	adds	r3, #1
 800de46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f7ff fac7 	bl	800d3dc <SWAPBYTE>
 800de4e:	4603      	mov	r3, r0
 800de50:	461a      	mov	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	3301      	adds	r3, #1
 800de5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	3301      	adds	r3, #1
 800de60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f7ff faba 	bl	800d3dc <SWAPBYTE>
 800de68:	4603      	mov	r3, r0
 800de6a:	461a      	mov	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	3301      	adds	r3, #1
 800de74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3301      	adds	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7ff faad 	bl	800d3dc <SWAPBYTE>
 800de82:	4603      	mov	r3, r0
 800de84:	461a      	mov	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	80da      	strh	r2, [r3, #6]
}
 800de8a:	bf00      	nop
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de9c:	2180      	movs	r1, #128	; 0x80
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f007 fce0 	bl	8015864 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dea4:	2100      	movs	r1, #0
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f007 fcdc 	bl	8015864 <USBD_LL_StallEP>
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b086      	sub	sp, #24
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dec0:	2300      	movs	r3, #0
 800dec2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d036      	beq.n	800df38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dece:	6938      	ldr	r0, [r7, #16]
 800ded0:	f000 f836 	bl	800df40 <USBD_GetLen>
 800ded4:	4603      	mov	r3, r0
 800ded6:	3301      	adds	r3, #1
 800ded8:	b29b      	uxth	r3, r3
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	b29a      	uxth	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	68ba      	ldr	r2, [r7, #8]
 800dee6:	4413      	add	r3, r2
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	7812      	ldrb	r2, [r2, #0]
 800deec:	701a      	strb	r2, [r3, #0]
  idx++;
 800deee:	7dfb      	ldrb	r3, [r7, #23]
 800def0:	3301      	adds	r3, #1
 800def2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800def4:	7dfb      	ldrb	r3, [r7, #23]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	4413      	add	r3, r2
 800defa:	2203      	movs	r2, #3
 800defc:	701a      	strb	r2, [r3, #0]
  idx++;
 800defe:	7dfb      	ldrb	r3, [r7, #23]
 800df00:	3301      	adds	r3, #1
 800df02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df04:	e013      	b.n	800df2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df06:	7dfb      	ldrb	r3, [r7, #23]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	4413      	add	r3, r2
 800df0c:	693a      	ldr	r2, [r7, #16]
 800df0e:	7812      	ldrb	r2, [r2, #0]
 800df10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	3301      	adds	r3, #1
 800df16:	613b      	str	r3, [r7, #16]
    idx++;
 800df18:	7dfb      	ldrb	r3, [r7, #23]
 800df1a:	3301      	adds	r3, #1
 800df1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	4413      	add	r3, r2
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]
    idx++;
 800df28:	7dfb      	ldrb	r3, [r7, #23]
 800df2a:	3301      	adds	r3, #1
 800df2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1e7      	bne.n	800df06 <USBD_GetString+0x52>
 800df36:	e000      	b.n	800df3a <USBD_GetString+0x86>
    return;
 800df38:	bf00      	nop
  }
}
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df48:	2300      	movs	r3, #0
 800df4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df50:	e005      	b.n	800df5e <USBD_GetLen+0x1e>
  {
    len++;
 800df52:	7bfb      	ldrb	r3, [r7, #15]
 800df54:	3301      	adds	r3, #1
 800df56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	3301      	adds	r3, #1
 800df5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1f5      	bne.n	800df52 <USBD_GetLen+0x12>
  }

  return len;
 800df66:	7bfb      	ldrb	r3, [r7, #15]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3714      	adds	r7, #20
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2202      	movs	r2, #2
 800df84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	2100      	movs	r1, #0
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f007 fce5 	bl	801596a <USBD_LL_Transmit>

  return USBD_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	60f8      	str	r0, [r7, #12]
 800dfb2:	60b9      	str	r1, [r7, #8]
 800dfb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	2100      	movs	r1, #0
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f007 fcd4 	bl	801596a <USBD_LL_Transmit>

  return USBD_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2203      	movs	r2, #3
 800dfdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	2100      	movs	r1, #0
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f007 fcd8 	bl	80159ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	2100      	movs	r1, #0
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f007 fcc7 	bl	80159ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2204      	movs	r2, #4
 800e034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e038:	2300      	movs	r3, #0
 800e03a:	2200      	movs	r2, #0
 800e03c:	2100      	movs	r1, #0
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f007 fc93 	bl	801596a <USBD_LL_Transmit>

  return USBD_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2205      	movs	r2, #5
 800e05a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e05e:	2300      	movs	r3, #0
 800e060:	2200      	movs	r2, #0
 800e062:	2100      	movs	r1, #0
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f007 fca1 	bl	80159ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <SHCI_C2_THREAD_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_THREAD_Init( void )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e07a:	1d3b      	adds	r3, r7, #4
 800e07c:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_THREAD_INIT,
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2200      	movs	r2, #0
 800e082:	2100      	movs	r1, #0
 800e084:	f64f 4067 	movw	r0, #64615	; 0xfc67
 800e088:	f000 f938 	bl	800e2fc <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	330b      	adds	r3, #11
 800e090:	78db      	ldrb	r3, [r3, #3]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <SHCI_C2_FLASH_StoreData>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_FLASH_StoreData( SHCI_C2_FLASH_Ip_t Ip )
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b088      	sub	sp, #32
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e0a4:	f107 030c 	add.w	r3, r7, #12
 800e0a8:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = Ip;
 800e0aa:	79fb      	ldrb	r3, [r7, #7]
 800e0ac:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_STORE_DATA,
 800e0ae:	f107 020c 	add.w	r2, r7, #12
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	f64f 406b 	movw	r0, #64619	; 0xfc6b
 800e0ba:	f000 f91f 	bl	800e2fc <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	330b      	adds	r3, #11
 800e0c2:	78db      	ldrb	r3, [r3, #3]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b08b      	sub	sp, #44	; 0x2c
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e0f4:	4b4a      	ldr	r3, [pc, #296]	; (800e220 <SHCI_GetWirelessFwInfo+0x154>)
 800e0f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0fc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e106:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a44      	ldr	r2, [pc, #272]	; (800e224 <SHCI_GetWirelessFwInfo+0x158>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d10f      	bne.n	800e138 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	699b      	ldr	r3, [r3, #24]
 800e122:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	69db      	ldr	r3, [r3, #28]
 800e128:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	617b      	str	r3, [r7, #20]
 800e136:	e01a      	b.n	800e16e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */

    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e140:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800e144:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	699b      	ldr	r3, [r3, #24]
 800e15c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e170:	0e1b      	lsrs	r3, r3, #24
 800e172:	b2da      	uxtb	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	0c1b      	lsrs	r3, r3, #16
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e184:	0a1b      	lsrs	r3, r3, #8
 800e186:	b2da      	uxtb	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	091b      	lsrs	r3, r3, #4
 800e190:	b2db      	uxtb	r3, r3
 800e192:	f003 030f 	and.w	r3, r3, #15
 800e196:	b2da      	uxtb	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	f003 030f 	and.w	r3, r3, #15
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1aa:	6a3b      	ldr	r3, [r7, #32]
 800e1ac:	0e1b      	lsrs	r3, r3, #24
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	0c1b      	lsrs	r3, r3, #16
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	0a1b      	lsrs	r3, r3, #8
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	0e1b      	lsrs	r3, r3, #24
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	0c1b      	lsrs	r3, r3, #16
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	0a1b      	lsrs	r3, r3, #8
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	0e1b      	lsrs	r3, r3, #24
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	0c1b      	lsrs	r3, r3, #16
 800e204:	b2da      	uxtb	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	372c      	adds	r7, #44	; 0x2c
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	58004000 	.word	0x58004000
 800e224:	a94656b9 	.word	0xa94656b9

0800e228 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	4a08      	ldr	r2, [pc, #32]	; (800e258 <shci_init+0x30>)
 800e238:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e23a:	4a08      	ldr	r2, [pc, #32]	; (800e25c <shci_init+0x34>)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e240:	4806      	ldr	r0, [pc, #24]	; (800e25c <shci_init+0x34>)
 800e242:	f000 f911 	bl	800e468 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 f894 	bl	800e378 <TlInit>

  return;
 800e250:	bf00      	nop
}
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	200003f0 	.word	0x200003f0
 800e25c:	200003d0 	.word	0x200003d0

0800e260 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e266:	4822      	ldr	r0, [pc, #136]	; (800e2f0 <shci_user_evt_proc+0x90>)
 800e268:	f001 fce4 	bl	800fc34 <LST_is_empty>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d12b      	bne.n	800e2ca <shci_user_evt_proc+0x6a>
 800e272:	4b20      	ldr	r3, [pc, #128]	; (800e2f4 <shci_user_evt_proc+0x94>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d027      	beq.n	800e2ca <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e27a:	f107 030c 	add.w	r3, r7, #12
 800e27e:	4619      	mov	r1, r3
 800e280:	481b      	ldr	r0, [pc, #108]	; (800e2f0 <shci_user_evt_proc+0x90>)
 800e282:	f001 fd5e 	bl	800fd42 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e286:	4b1c      	ldr	r3, [pc, #112]	; (800e2f8 <shci_user_evt_proc+0x98>)
 800e288:	69db      	ldr	r3, [r3, #28]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00c      	beq.n	800e2a8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e292:	2301      	movs	r3, #1
 800e294:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e296:	4b18      	ldr	r3, [pc, #96]	; (800e2f8 <shci_user_evt_proc+0x98>)
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	1d3a      	adds	r2, r7, #4
 800e29c:	4610      	mov	r0, r2
 800e29e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e2a0:	793a      	ldrb	r2, [r7, #4]
 800e2a2:	4b14      	ldr	r3, [pc, #80]	; (800e2f4 <shci_user_evt_proc+0x94>)
 800e2a4:	701a      	strb	r2, [r3, #0]
 800e2a6:	e002      	b.n	800e2ae <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e2a8:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <shci_user_evt_proc+0x94>)
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e2ae:	4b11      	ldr	r3, [pc, #68]	; (800e2f4 <shci_user_evt_proc+0x94>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d004      	beq.n	800e2c0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f000 fa95 	bl	800e7e8 <TL_MM_EvtDone>
 800e2be:	e004      	b.n	800e2ca <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	480a      	ldr	r0, [pc, #40]	; (800e2f0 <shci_user_evt_proc+0x90>)
 800e2c6:	f001 fcd5 	bl	800fc74 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e2ca:	4809      	ldr	r0, [pc, #36]	; (800e2f0 <shci_user_evt_proc+0x90>)
 800e2cc:	f001 fcb2 	bl	800fc34 <LST_is_empty>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d107      	bne.n	800e2e6 <shci_user_evt_proc+0x86>
 800e2d6:	4b07      	ldr	r3, [pc, #28]	; (800e2f4 <shci_user_evt_proc+0x94>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d003      	beq.n	800e2e6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e2de:	4804      	ldr	r0, [pc, #16]	; (800e2f0 <shci_user_evt_proc+0x90>)
 800e2e0:	f7f3 fd12 	bl	8001d08 <shci_notify_asynch_evt>
  }


  return;
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop
}
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	200002e8 	.word	0x200002e8
 800e2f4:	200002f8 	.word	0x200002f8
 800e2f8:	200003d0 	.word	0x200003d0

0800e2fc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	60ba      	str	r2, [r7, #8]
 800e304:	607b      	str	r3, [r7, #4]
 800e306:	4603      	mov	r3, r0
 800e308:	81fb      	strh	r3, [r7, #14]
 800e30a:	460b      	mov	r3, r1
 800e30c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e30e:	2000      	movs	r0, #0
 800e310:	f000 f864 	bl	800e3dc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e314:	4b16      	ldr	r3, [pc, #88]	; (800e370 <shci_send+0x74>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	89fa      	ldrh	r2, [r7, #14]
 800e31a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e31e:	4b14      	ldr	r3, [pc, #80]	; (800e370 <shci_send+0x74>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	7b7a      	ldrb	r2, [r7, #13]
 800e324:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e326:	4b12      	ldr	r3, [pc, #72]	; (800e370 <shci_send+0x74>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	330c      	adds	r3, #12
 800e32c:	7b7a      	ldrb	r2, [r7, #13]
 800e32e:	68b9      	ldr	r1, [r7, #8]
 800e330:	4618      	mov	r0, r3
 800e332:	f008 fc7d 	bl	8016c30 <memcpy>

  shciContext.io.Send(0,0);
 800e336:	4b0f      	ldr	r3, [pc, #60]	; (800e374 <shci_send+0x78>)
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	2100      	movs	r1, #0
 800e33c:	2000      	movs	r0, #0
 800e33e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e340:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e344:	f7f3 fd00 	bl	8001d48 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f103 0008 	add.w	r0, r3, #8
 800e34e:	4b08      	ldr	r3, [pc, #32]	; (800e370 <shci_send+0x74>)
 800e350:	6819      	ldr	r1, [r3, #0]
 800e352:	4b07      	ldr	r3, [pc, #28]	; (800e370 <shci_send+0x74>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	789b      	ldrb	r3, [r3, #2]
 800e358:	3303      	adds	r3, #3
 800e35a:	461a      	mov	r2, r3
 800e35c:	f008 fc68 	bl	8016c30 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e360:	2001      	movs	r0, #1
 800e362:	f000 f83b 	bl	800e3dc <Cmd_SetStatus>

  return;
 800e366:	bf00      	nop
}
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	200002f4 	.word	0x200002f4
 800e374:	200003d0 	.word	0x200003d0

0800e378 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e380:	4a10      	ldr	r2, [pc, #64]	; (800e3c4 <TlInit+0x4c>)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e386:	4810      	ldr	r0, [pc, #64]	; (800e3c8 <TlInit+0x50>)
 800e388:	f001 fc44 	bl	800fc14 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e38c:	2001      	movs	r0, #1
 800e38e:	f000 f825 	bl	800e3dc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e392:	4b0e      	ldr	r3, [pc, #56]	; (800e3cc <TlInit+0x54>)
 800e394:	2201      	movs	r2, #1
 800e396:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e398:	4b0d      	ldr	r3, [pc, #52]	; (800e3d0 <TlInit+0x58>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00c      	beq.n	800e3ba <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e3a4:	4b0b      	ldr	r3, [pc, #44]	; (800e3d4 <TlInit+0x5c>)
 800e3a6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e3a8:	4b0b      	ldr	r3, [pc, #44]	; (800e3d8 <TlInit+0x60>)
 800e3aa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e3ac:	4b08      	ldr	r3, [pc, #32]	; (800e3d0 <TlInit+0x58>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f107 020c 	add.w	r2, r7, #12
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4798      	blx	r3
  }

  return;
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
}
 800e3bc:	3718      	adds	r7, #24
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200002f4 	.word	0x200002f4
 800e3c8:	200002e8 	.word	0x200002e8
 800e3cc:	200002f8 	.word	0x200002f8
 800e3d0:	200003d0 	.word	0x200003d0
 800e3d4:	0800e42d 	.word	0x0800e42d
 800e3d8:	0800e445 	.word	0x0800e445

0800e3dc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e3e6:	79fb      	ldrb	r3, [r7, #7]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10b      	bne.n	800e404 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e3ec:	4b0d      	ldr	r3, [pc, #52]	; (800e424 <Cmd_SetStatus+0x48>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d003      	beq.n	800e3fc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e3f4:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <Cmd_SetStatus+0x48>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e3fc:	4b0a      	ldr	r3, [pc, #40]	; (800e428 <Cmd_SetStatus+0x4c>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e402:	e00b      	b.n	800e41c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e404:	4b08      	ldr	r3, [pc, #32]	; (800e428 <Cmd_SetStatus+0x4c>)
 800e406:	2201      	movs	r2, #1
 800e408:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e40a:	4b06      	ldr	r3, [pc, #24]	; (800e424 <Cmd_SetStatus+0x48>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d004      	beq.n	800e41c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e412:	4b04      	ldr	r3, [pc, #16]	; (800e424 <Cmd_SetStatus+0x48>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2001      	movs	r0, #1
 800e418:	4798      	blx	r3
  return;
 800e41a:	bf00      	nop
 800e41c:	bf00      	nop
}
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	200003f0 	.word	0x200003f0
 800e428:	200002f0 	.word	0x200002f0

0800e42c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e434:	2000      	movs	r0, #0
 800e436:	f7f3 fc77 	bl	8001d28 <shci_cmd_resp_release>

  return;
 800e43a:	bf00      	nop
}
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
	...

0800e444 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e44c:	6879      	ldr	r1, [r7, #4]
 800e44e:	4805      	ldr	r0, [pc, #20]	; (800e464 <TlUserEvtReceived+0x20>)
 800e450:	f001 fc34 	bl	800fcbc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e454:	4803      	ldr	r0, [pc, #12]	; (800e464 <TlUserEvtReceived+0x20>)
 800e456:	f7f3 fc57 	bl	8001d08 <shci_notify_asynch_evt>

  return;
 800e45a:	bf00      	nop
}
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	200002e8 	.word	0x200002e8

0800e468 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a05      	ldr	r2, [pc, #20]	; (800e488 <shci_register_io_bus+0x20>)
 800e474:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4a04      	ldr	r2, [pc, #16]	; (800e48c <shci_register_io_bus+0x24>)
 800e47a:	611a      	str	r2, [r3, #16]

  return;
 800e47c:	bf00      	nop
}
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	0800e585 	.word	0x0800e585
 800e48c:	0800e5d9 	.word	0x0800e5d9

0800e490 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e494:	f006 fcee 	bl	8014e74 <HW_IPCC_Enable>

  return;
 800e498:	bf00      	nop
}
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <TL_Init>:


void TL_Init( void )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e4a0:	4b10      	ldr	r3, [pc, #64]	; (800e4e4 <TL_Init+0x48>)
 800e4a2:	4a11      	ldr	r2, [pc, #68]	; (800e4e8 <TL_Init+0x4c>)
 800e4a4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e4a6:	4b0f      	ldr	r3, [pc, #60]	; (800e4e4 <TL_Init+0x48>)
 800e4a8:	4a10      	ldr	r2, [pc, #64]	; (800e4ec <TL_Init+0x50>)
 800e4aa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e4ac:	4b0d      	ldr	r3, [pc, #52]	; (800e4e4 <TL_Init+0x48>)
 800e4ae:	4a10      	ldr	r2, [pc, #64]	; (800e4f0 <TL_Init+0x54>)
 800e4b0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e4b2:	4b0c      	ldr	r3, [pc, #48]	; (800e4e4 <TL_Init+0x48>)
 800e4b4:	4a0f      	ldr	r2, [pc, #60]	; (800e4f4 <TL_Init+0x58>)
 800e4b6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800e4b8:	4b0a      	ldr	r3, [pc, #40]	; (800e4e4 <TL_Init+0x48>)
 800e4ba:	4a0f      	ldr	r2, [pc, #60]	; (800e4f8 <TL_Init+0x5c>)
 800e4bc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e4be:	4b09      	ldr	r3, [pc, #36]	; (800e4e4 <TL_Init+0x48>)
 800e4c0:	4a0e      	ldr	r2, [pc, #56]	; (800e4fc <TL_Init+0x60>)
 800e4c2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e4c4:	4b07      	ldr	r3, [pc, #28]	; (800e4e4 <TL_Init+0x48>)
 800e4c6:	4a0e      	ldr	r2, [pc, #56]	; (800e500 <TL_Init+0x64>)
 800e4c8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e4ca:	4b06      	ldr	r3, [pc, #24]	; (800e4e4 <TL_Init+0x48>)
 800e4cc:	4a0d      	ldr	r2, [pc, #52]	; (800e504 <TL_Init+0x68>)
 800e4ce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e4d0:	4b04      	ldr	r3, [pc, #16]	; (800e4e4 <TL_Init+0x48>)
 800e4d2:	4a0d      	ldr	r2, [pc, #52]	; (800e508 <TL_Init+0x6c>)
 800e4d4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e4d6:	4b03      	ldr	r3, [pc, #12]	; (800e4e4 <TL_Init+0x48>)
 800e4d8:	4a0c      	ldr	r2, [pc, #48]	; (800e50c <TL_Init+0x70>)
 800e4da:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e4dc:	f006 fcde 	bl	8014e9c <HW_IPCC_Init>

  return;
 800e4e0:	bf00      	nop
}
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	20030000 	.word	0x20030000
 800e4e8:	20030028 	.word	0x20030028
 800e4ec:	20030048 	.word	0x20030048
 800e4f0:	20030058 	.word	0x20030058
 800e4f4:	20030064 	.word	0x20030064
 800e4f8:	2003006c 	.word	0x2003006c
 800e4fc:	20030074 	.word	0x20030074
 800e500:	2003007c 	.word	0x2003007c
 800e504:	20030098 	.word	0x20030098
 800e508:	2003009c 	.word	0x2003009c
 800e50c:	200300a8 	.word	0x200300a8

0800e510 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e516:	e01c      	b.n	800e552 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e518:	1d3b      	adds	r3, r7, #4
 800e51a:	4619      	mov	r1, r3
 800e51c:	4812      	ldr	r0, [pc, #72]	; (800e568 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e51e:	f001 fc10 	bl	800fd42 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7a5b      	ldrb	r3, [r3, #9]
 800e526:	2b0f      	cmp	r3, #15
 800e528:	d003      	beq.n	800e532 <HW_IPCC_BLE_RxEvtNot+0x22>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	7a5b      	ldrb	r3, [r3, #9]
 800e52e:	2b0e      	cmp	r3, #14
 800e530:	d105      	bne.n	800e53e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4619      	mov	r1, r3
 800e536:	2002      	movs	r0, #2
 800e538:	f000 f9ba 	bl	800e8b0 <OutputDbgTrace>
 800e53c:	e004      	b.n	800e548 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4619      	mov	r1, r3
 800e542:	2003      	movs	r0, #3
 800e544:	f000 f9b4 	bl	800e8b0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e548:	4b08      	ldr	r3, [pc, #32]	; (800e56c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	4610      	mov	r0, r2
 800e550:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e552:	4805      	ldr	r0, [pc, #20]	; (800e568 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e554:	f001 fb6e 	bl	800fc34 <LST_is_empty>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0dc      	beq.n	800e518 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e55e:	bf00      	nop
}
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	200300c4 	.word	0x200300c4
 800e56c:	200003fc 	.word	0x200003fc

0800e570 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e574:	4b02      	ldr	r3, [pc, #8]	; (800e580 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4798      	blx	r3

  return;
 800e57a:	bf00      	nop
}
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	20000400 	.word	0x20000400

0800e584 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e590:	480d      	ldr	r0, [pc, #52]	; (800e5c8 <TL_SYS_Init+0x44>)
 800e592:	f001 fb3f 	bl	800fc14 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e596:	4b0d      	ldr	r3, [pc, #52]	; (800e5cc <TL_SYS_Init+0x48>)
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	689a      	ldr	r2, [r3, #8]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	4a08      	ldr	r2, [pc, #32]	; (800e5c8 <TL_SYS_Init+0x44>)
 800e5a8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e5aa:	f006 fca5 	bl	8014ef8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a07      	ldr	r2, [pc, #28]	; (800e5d0 <TL_SYS_Init+0x4c>)
 800e5b4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	4a06      	ldr	r2, [pc, #24]	; (800e5d4 <TL_SYS_Init+0x50>)
 800e5bc:	6013      	str	r3, [r2, #0]

  return 0;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	200300cc 	.word	0x200300cc
 800e5cc:	20030000 	.word	0x20030000
 800e5d0:	20000404 	.word	0x20000404
 800e5d4:	20000408 	.word	0x20000408

0800e5d8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e5e4:	4b09      	ldr	r3, [pc, #36]	; (800e60c <TL_SYS_SendCmd+0x34>)
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2210      	movs	r2, #16
 800e5ec:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e5ee:	4b07      	ldr	r3, [pc, #28]	; (800e60c <TL_SYS_SendCmd+0x34>)
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	2004      	movs	r0, #4
 800e5f8:	f000 f95a 	bl	800e8b0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e5fc:	f006 fc86 	bl	8014f0c <HW_IPCC_SYS_SendCmd>

  return 0;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20030000 	.word	0x20030000

0800e610 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e614:	4b07      	ldr	r3, [pc, #28]	; (800e634 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e616:	68db      	ldr	r3, [r3, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4619      	mov	r1, r3
 800e61c:	2005      	movs	r0, #5
 800e61e:	f000 f947 	bl	800e8b0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e622:	4b05      	ldr	r3, [pc, #20]	; (800e638 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a03      	ldr	r2, [pc, #12]	; (800e634 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e628:	68d2      	ldr	r2, [r2, #12]
 800e62a:	6812      	ldr	r2, [r2, #0]
 800e62c:	4610      	mov	r0, r2
 800e62e:	4798      	blx	r3

  return;
 800e630:	bf00      	nop
}
 800e632:	bd80      	pop	{r7, pc}
 800e634:	20030000 	.word	0x20030000
 800e638:	20000404 	.word	0x20000404

0800e63c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e642:	e00e      	b.n	800e662 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e644:	1d3b      	adds	r3, r7, #4
 800e646:	4619      	mov	r1, r3
 800e648:	480b      	ldr	r0, [pc, #44]	; (800e678 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e64a:	f001 fb7a 	bl	800fd42 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4619      	mov	r1, r3
 800e652:	2006      	movs	r0, #6
 800e654:	f000 f92c 	bl	800e8b0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e658:	4b08      	ldr	r3, [pc, #32]	; (800e67c <HW_IPCC_SYS_EvtNot+0x40>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	4610      	mov	r0, r2
 800e660:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e662:	4805      	ldr	r0, [pc, #20]	; (800e678 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e664:	f001 fae6 	bl	800fc34 <LST_is_empty>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0ea      	beq.n	800e644 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e66e:	bf00      	nop
}
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	200300cc 	.word	0x200300cc
 800e67c:	20000408 	.word	0x20000408

0800e680 <TL_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void TL_THREAD_Init( TL_TH_Config_t *p_Config )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  MB_ThreadTable_t  * p_thread_table;

  p_thread_table = TL_RefTable.p_thread_table;
 800e688:	4b0a      	ldr	r3, [pc, #40]	; (800e6b4 <TL_THREAD_Init+0x34>)
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	60fb      	str	r3, [r7, #12]

  p_thread_table->clicmdrsp_buffer = p_Config->p_ThreadCliRspBuffer;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	605a      	str	r2, [r3, #4]
  p_thread_table->otcmdrsp_buffer = p_Config->p_ThreadOtCmdRspBuffer;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	609a      	str	r2, [r3, #8]
  p_thread_table->notack_buffer = p_Config->p_ThreadNotAckBuffer;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	689a      	ldr	r2, [r3, #8]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	601a      	str	r2, [r3, #0]

  HW_IPCC_THREAD_Init();
 800e6a6:	f006 fc57 	bl	8014f58 <HW_IPCC_THREAD_Init>

  return;
 800e6aa:	bf00      	nop
}
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20030000 	.word	0x20030000

0800e6b8 <TL_OT_SendCmd>:

void TL_OT_SendCmd( void )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->otcmdrsp_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800e6bc:	4b04      	ldr	r3, [pc, #16]	; (800e6d0 <TL_OT_SendCmd+0x18>)
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	2208      	movs	r2, #8
 800e6c4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_OT_SendCmd();
 800e6c6:	f006 fc55 	bl	8014f74 <HW_IPCC_OT_SendCmd>

  return;
 800e6ca:	bf00      	nop
}
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	20030000 	.word	0x20030000

0800e6d4 <TL_CLI_SendCmd>:

void TL_CLI_SendCmd( void )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800e6d8:	4b04      	ldr	r3, [pc, #16]	; (800e6ec <TL_CLI_SendCmd+0x18>)
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	220a      	movs	r2, #10
 800e6e0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_CLI_SendCmd();
 800e6e2:	f006 fc55 	bl	8014f90 <HW_IPCC_CLI_SendCmd>

  return;
 800e6e6:	bf00      	nop
}
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20030000 	.word	0x20030000

0800e6f0 <TL_THREAD_SendAck>:

void TL_THREAD_SendAck ( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800e6f4:	4b04      	ldr	r3, [pc, #16]	; (800e708 <TL_THREAD_SendAck+0x18>)
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	220d      	movs	r2, #13
 800e6fc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_SendAck();
 800e6fe:	f006 fc51 	bl	8014fa4 <HW_IPCC_THREAD_SendAck>

  return;
 800e702:	bf00      	nop
}
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20030000 	.word	0x20030000

0800e70c <TL_THREAD_CliSendAck>:

void TL_THREAD_CliSendAck ( void )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_thread_table->notack_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800e710:	4b04      	ldr	r3, [pc, #16]	; (800e724 <TL_THREAD_CliSendAck+0x18>)
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	220d      	movs	r2, #13
 800e718:	721a      	strb	r2, [r3, #8]

  HW_IPCC_THREAD_CliSendAck();
 800e71a:	f006 fc51 	bl	8014fc0 <HW_IPCC_THREAD_CliSendAck>

  return;
 800e71e:	bf00      	nop
}
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	20030000 	.word	0x20030000

0800e728 <HW_IPCC_OT_CmdEvtNot>:

void HW_IPCC_OT_CmdEvtNot(void)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	af00      	add	r7, sp, #0
  TL_OT_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->otcmdrsp_buffer) );
 800e72c:	4b03      	ldr	r3, [pc, #12]	; (800e73c <HW_IPCC_OT_CmdEvtNot+0x14>)
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	4618      	mov	r0, r3
 800e734:	f006 f8e4 	bl	8014900 <TL_OT_CmdEvtReceived>

  return;
 800e738:	bf00      	nop
}
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20030000 	.word	0x20030000

0800e740 <HW_IPCC_THREAD_EvtNot>:

void HW_IPCC_THREAD_EvtNot( void )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	af00      	add	r7, sp, #0
  TL_THREAD_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->notack_buffer) );
 800e744:	4b03      	ldr	r3, [pc, #12]	; (800e754 <HW_IPCC_THREAD_EvtNot+0x14>)
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f006 f8e2 	bl	8014914 <TL_THREAD_NotReceived>

  return;
 800e750:	bf00      	nop
}
 800e752:	bd80      	pop	{r7, pc}
 800e754:	20030000 	.word	0x20030000

0800e758 <HW_IPCC_THREAD_CliEvtNot>:

void HW_IPCC_THREAD_CliEvtNot( void )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	af00      	add	r7, sp, #0
  TL_THREAD_CliNotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_thread_table->clicmdrsp_buffer) );
 800e75c:	4b03      	ldr	r3, [pc, #12]	; (800e76c <HW_IPCC_THREAD_CliEvtNot+0x14>)
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	4618      	mov	r0, r3
 800e764:	f006 f984 	bl	8014a70 <TL_THREAD_CliNotReceived>

  return;
 800e768:	bf00      	nop
}
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	20030000 	.word	0x20030000

0800e770 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e778:	4817      	ldr	r0, [pc, #92]	; (800e7d8 <TL_MM_Init+0x68>)
 800e77a:	f001 fa4b 	bl	800fc14 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e77e:	4817      	ldr	r0, [pc, #92]	; (800e7dc <TL_MM_Init+0x6c>)
 800e780:	f001 fa48 	bl	800fc14 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e784:	4b16      	ldr	r3, [pc, #88]	; (800e7e0 <TL_MM_Init+0x70>)
 800e786:	691b      	ldr	r3, [r3, #16]
 800e788:	4a16      	ldr	r2, [pc, #88]	; (800e7e4 <TL_MM_Init+0x74>)
 800e78a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e78c:	4b15      	ldr	r3, [pc, #84]	; (800e7e4 <TL_MM_Init+0x74>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	6892      	ldr	r2, [r2, #8]
 800e794:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e796:	4b13      	ldr	r3, [pc, #76]	; (800e7e4 <TL_MM_Init+0x74>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	68d2      	ldr	r2, [r2, #12]
 800e79e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e7a0:	4b10      	ldr	r3, [pc, #64]	; (800e7e4 <TL_MM_Init+0x74>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a0c      	ldr	r2, [pc, #48]	; (800e7d8 <TL_MM_Init+0x68>)
 800e7a6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e7a8:	4b0e      	ldr	r3, [pc, #56]	; (800e7e4 <TL_MM_Init+0x74>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	6812      	ldr	r2, [r2, #0]
 800e7b0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e7b2:	4b0c      	ldr	r3, [pc, #48]	; (800e7e4 <TL_MM_Init+0x74>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	6852      	ldr	r2, [r2, #4]
 800e7ba:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e7bc:	4b09      	ldr	r3, [pc, #36]	; (800e7e4 <TL_MM_Init+0x74>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	6912      	ldr	r2, [r2, #16]
 800e7c4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e7c6:	4b07      	ldr	r3, [pc, #28]	; (800e7e4 <TL_MM_Init+0x74>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	6952      	ldr	r2, [r2, #20]
 800e7ce:	619a      	str	r2, [r3, #24]

  return;
 800e7d0:	bf00      	nop
}
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	200300b4 	.word	0x200300b4
 800e7dc:	200003f4 	.word	0x200003f4
 800e7e0:	20030000 	.word	0x20030000
 800e7e4:	2000040c 	.word	0x2000040c

0800e7e8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e7f0:	6879      	ldr	r1, [r7, #4]
 800e7f2:	4807      	ldr	r0, [pc, #28]	; (800e810 <TL_MM_EvtDone+0x28>)
 800e7f4:	f001 fa62 	bl	800fcbc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	f000 f858 	bl	800e8b0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e800:	4804      	ldr	r0, [pc, #16]	; (800e814 <TL_MM_EvtDone+0x2c>)
 800e802:	f006 fc0f 	bl	8015024 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e806:	bf00      	nop
}
 800e808:	3708      	adds	r7, #8
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	200003f4 	.word	0x200003f4
 800e814:	0800e819 	.word	0x0800e819

0800e818 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e81e:	e00c      	b.n	800e83a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e820:	1d3b      	adds	r3, r7, #4
 800e822:	4619      	mov	r1, r3
 800e824:	480a      	ldr	r0, [pc, #40]	; (800e850 <SendFreeBuf+0x38>)
 800e826:	f001 fa8c 	bl	800fd42 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e82a:	4b0a      	ldr	r3, [pc, #40]	; (800e854 <SendFreeBuf+0x3c>)
 800e82c:	691b      	ldr	r3, [r3, #16]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	4611      	mov	r1, r2
 800e834:	4618      	mov	r0, r3
 800e836:	f001 fa41 	bl	800fcbc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e83a:	4805      	ldr	r0, [pc, #20]	; (800e850 <SendFreeBuf+0x38>)
 800e83c:	f001 f9fa 	bl	800fc34 <LST_is_empty>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d0ec      	beq.n	800e820 <SendFreeBuf+0x8>
  }

  return;
 800e846:	bf00      	nop
}
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	200003f4 	.word	0x200003f4
 800e854:	20030000 	.word	0x20030000

0800e858 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e85c:	4805      	ldr	r0, [pc, #20]	; (800e874 <TL_TRACES_Init+0x1c>)
 800e85e:	f001 f9d9 	bl	800fc14 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e862:	4b05      	ldr	r3, [pc, #20]	; (800e878 <TL_TRACES_Init+0x20>)
 800e864:	695b      	ldr	r3, [r3, #20]
 800e866:	4a03      	ldr	r2, [pc, #12]	; (800e874 <TL_TRACES_Init+0x1c>)
 800e868:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e86a:	f006 fc11 	bl	8015090 <HW_IPCC_TRACES_Init>

  return;
 800e86e:	bf00      	nop
}
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	200300bc 	.word	0x200300bc
 800e878:	20030000 	.word	0x20030000

0800e87c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e882:	e008      	b.n	800e896 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e884:	1d3b      	adds	r3, r7, #4
 800e886:	4619      	mov	r1, r3
 800e888:	4808      	ldr	r0, [pc, #32]	; (800e8ac <HW_IPCC_TRACES_EvtNot+0x30>)
 800e88a:	f001 fa5a 	bl	800fd42 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4618      	mov	r0, r3
 800e892:	f7f3 fa6b 	bl	8001d6c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e896:	4805      	ldr	r0, [pc, #20]	; (800e8ac <HW_IPCC_TRACES_EvtNot+0x30>)
 800e898:	f001 f9cc 	bl	800fc34 <LST_is_empty>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d0f0      	beq.n	800e884 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e8a2:	bf00      	nop
}
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	200300bc 	.word	0x200300bc

0800e8b0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	6039      	str	r1, [r7, #0]
 800e8ba:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	2b06      	cmp	r3, #6
 800e8c0:	d849      	bhi.n	800e956 <OutputDbgTrace+0xa6>
 800e8c2:	a201      	add	r2, pc, #4	; (adr r2, 800e8c8 <OutputDbgTrace+0x18>)
 800e8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c8:	0800e8e5 	.word	0x0800e8e5
 800e8cc:	0800e907 	.word	0x0800e907
 800e8d0:	0800e90d 	.word	0x0800e90d
 800e8d4:	0800e927 	.word	0x0800e927
 800e8d8:	0800e933 	.word	0x0800e933
 800e8dc:	0800e939 	.word	0x0800e939
 800e8e0:	0800e94b 	.word	0x0800e94b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	7a5b      	ldrb	r3, [r3, #9]
 800e8ec:	2b0f      	cmp	r3, #15
 800e8ee:	d004      	beq.n	800e8fa <OutputDbgTrace+0x4a>
 800e8f0:	2bff      	cmp	r3, #255	; 0xff
 800e8f2:	d004      	beq.n	800e8fe <OutputDbgTrace+0x4e>
 800e8f4:	2b0e      	cmp	r3, #14
 800e8f6:	d004      	beq.n	800e902 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e8f8:	e004      	b.n	800e904 <OutputDbgTrace+0x54>
          break;
 800e8fa:	bf00      	nop
 800e8fc:	e02c      	b.n	800e958 <OutputDbgTrace+0xa8>
          break;
 800e8fe:	bf00      	nop
 800e900:	e02a      	b.n	800e958 <OutputDbgTrace+0xa8>
          break;
 800e902:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e904:	e028      	b.n	800e958 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e90a:	e025      	b.n	800e958 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	7a5b      	ldrb	r3, [r3, #9]
 800e914:	2b0e      	cmp	r3, #14
 800e916:	d002      	beq.n	800e91e <OutputDbgTrace+0x6e>
 800e918:	2b0f      	cmp	r3, #15
 800e91a:	d002      	beq.n	800e922 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e91c:	e002      	b.n	800e924 <OutputDbgTrace+0x74>
          break;
 800e91e:	bf00      	nop
 800e920:	e01a      	b.n	800e958 <OutputDbgTrace+0xa8>
          break;
 800e922:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e924:	e018      	b.n	800e958 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	7a5b      	ldrb	r3, [r3, #9]
 800e92e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e930:	e012      	b.n	800e958 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e936:	e00f      	b.n	800e958 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	7a5b      	ldrb	r3, [r3, #9]
 800e940:	2b0e      	cmp	r3, #14
 800e942:	d000      	beq.n	800e946 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e944:	e000      	b.n	800e948 <OutputDbgTrace+0x98>
          break;
 800e946:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e948:	e006      	b.n	800e958 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	7a5b      	ldrb	r3, [r3, #9]
 800e952:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e954:	e000      	b.n	800e958 <OutputDbgTrace+0xa8>

    default:
      break;
 800e956:	bf00      	nop
  }

  return;
 800e958:	bf00      	nop
}
 800e95a:	3714      	adds	r7, #20
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <otCoapHeaderInit>:
extern otCoapRequestHandler defaultCoapRequestHandlerCb;

#if OPENTHREAD_ENABLE_APPLICATION_COAP

void otCoapHeaderInit(otCoapHeader *aHeader, otCoapType aType, otCoapCode aCode)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
 800e970:	4613      	mov	r3, r2
 800e972:	70bb      	strb	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800e974:	f005 ffde 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800e978:	f005 ff7a 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800e97c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_INIT;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	f062 0260 	orn	r2, r2, #96	; 0x60
 800e986:	701a      	strb	r2, [r3, #0]
 800e988:	2200      	movs	r2, #0
 800e98a:	705a      	strb	r2, [r3, #1]
 800e98c:	2200      	movs	r2, #0
 800e98e:	709a      	strb	r2, [r3, #2]
 800e990:	2200      	movs	r2, #0
 800e992:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f042 0203 	orr.w	r2, r2, #3
 800e99c:	711a      	strb	r2, [r3, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	715a      	strb	r2, [r3, #5]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	719a      	strb	r2, [r3, #6]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = aType;
 800e9b0:	78fa      	ldrb	r2, [r7, #3]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aCode;
 800e9b6:	78ba      	ldrb	r2, [r7, #2]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800e9bc:	f005 ff7c 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800e9c0:	f005 ff62 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800e9c4:	60f8      	str	r0, [r7, #12]
}
 800e9c6:	bf00      	nop
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <otCoapHeaderSetToken>:

void otCoapHeaderSetToken(otCoapHeader *aHeader, const uint8_t *aToken, uint8_t aTokenLength)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b086      	sub	sp, #24
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	60f8      	str	r0, [r7, #12]
 800e9d6:	60b9      	str	r1, [r7, #8]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	71fb      	strb	r3, [r7, #7]
    Pre_OtCmdProcessing();
 800e9dc:	f005 ffaa 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800e9e0:	f005 ff46 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800e9e4:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_TOKEN;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800e9ee:	701a      	strb	r2, [r3, #0]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	705a      	strb	r2, [r3, #1]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	709a      	strb	r2, [r3, #2]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f042 0203 	orr.w	r2, r2, #3
 800ea04:	711a      	strb	r2, [r3, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	715a      	strb	r2, [r3, #5]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	719a      	strb	r2, [r3, #6]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aToken;
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (otCoapCode) aTokenLength;
 800ea1e:	79fa      	ldrb	r2, [r7, #7]
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800ea24:	f005 ff48 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ea28:	f005 ff2e 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ea2c:	6178      	str	r0, [r7, #20]
}
 800ea2e:	bf00      	nop
 800ea30:	3718      	adds	r7, #24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <otCoapHeaderGenerateToken>:

void otCoapHeaderGenerateToken(otCoapHeader *aHeader, uint8_t aTokenLength)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b084      	sub	sp, #16
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800ea42:	f005 ff77 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ea46:	f005 ff13 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ea4a:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GENERATE_TOKEN;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f062 025e 	orn	r2, r2, #94	; 0x5e
 800ea54:	701a      	strb	r2, [r3, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	705a      	strb	r2, [r3, #1]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	709a      	strb	r2, [r3, #2]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f042 0202 	orr.w	r2, r2, #2
 800ea6a:	711a      	strb	r2, [r3, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	715a      	strb	r2, [r3, #5]
 800ea70:	2200      	movs	r2, #0
 800ea72:	719a      	strb	r2, [r3, #6]
 800ea74:	2200      	movs	r2, #0
 800ea76:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aTokenLength;
 800ea7e:	78fa      	ldrb	r2, [r7, #3]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800ea84:	f005 ff18 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ea88:	f005 fefe 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ea8c:	60f8      	str	r0, [r7, #12]
}
 800ea8e:	bf00      	nop
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <otCoapHeaderAppendContentFormatOption>:

otError otCoapHeaderAppendContentFormatOption(otCoapHeader *aHeader, otCoapOptionContentFormat aContentFormat)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b084      	sub	sp, #16
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800eaa2:	f005 ff47 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800eaa6:	f005 fee3 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800eaaa:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_CONTENT_FORMAT_OPTION;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f062 025d 	orn	r2, r2, #93	; 0x5d
 800eab4:	701a      	strb	r2, [r3, #0]
 800eab6:	2200      	movs	r2, #0
 800eab8:	705a      	strb	r2, [r3, #1]
 800eaba:	2200      	movs	r2, #0
 800eabc:	709a      	strb	r2, [r3, #2]
 800eabe:	2200      	movs	r2, #0
 800eac0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f042 0202 	orr.w	r2, r2, #2
 800eaca:	711a      	strb	r2, [r3, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	715a      	strb	r2, [r3, #5]
 800ead0:	2200      	movs	r2, #0
 800ead2:	719a      	strb	r2, [r3, #6]
 800ead4:	2200      	movs	r2, #0
 800ead6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aContentFormat;
 800eade:	78fa      	ldrb	r2, [r7, #3]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800eae4:	f005 fee8 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eae8:	f005 fece 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eaec:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	b2db      	uxtb	r3, r3
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <otCoapHeaderAppendUriPathOptions>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderAppendUriPathOptions(otCoapHeader *aHeader, const char *aUriPath)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800eb06:	f005 ff15 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800eb0a:	f005 feb1 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800eb0e:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_APPEND_URI_PATH_OPTIONS;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f062 0250 	orn	r2, r2, #80	; 0x50
 800eb18:	701a      	strb	r2, [r3, #0]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	705a      	strb	r2, [r3, #1]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	709a      	strb	r2, [r3, #2]
 800eb22:	2200      	movs	r2, #0
 800eb24:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f042 0202 	orr.w	r2, r2, #2
 800eb2e:	711a      	strb	r2, [r3, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	715a      	strb	r2, [r3, #5]
 800eb34:	2200      	movs	r2, #0
 800eb36:	719a      	strb	r2, [r3, #6]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aUriPath;
 800eb42:	683a      	ldr	r2, [r7, #0]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800eb48:	f005 feb6 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eb4c:	f005 fe9c 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eb50:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	689b      	ldr	r3, [r3, #8]
 800eb56:	b2db      	uxtb	r3, r3
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <otCoapHeaderSetPayloadMarker>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError) p_ot_req->Data[0];
}

otError otCoapHeaderSetPayloadMarker(otCoapHeader *aHeader)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800eb68:	f005 fee4 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800eb6c:	f005 fe80 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800eb70:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_PAYLOAD_MARKER;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f062 024d 	orn	r2, r2, #77	; 0x4d
 800eb7a:	701a      	strb	r2, [r3, #0]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	705a      	strb	r2, [r3, #1]
 800eb80:	2200      	movs	r2, #0
 800eb82:	709a      	strb	r2, [r3, #2]
 800eb84:	2200      	movs	r2, #0
 800eb86:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f042 0201 	orr.w	r2, r2, #1
 800eb90:	711a      	strb	r2, [r3, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	715a      	strb	r2, [r3, #5]
 800eb96:	2200      	movs	r2, #0
 800eb98:	719a      	strb	r2, [r3, #6]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800eba4:	f005 fe88 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eba8:	f005 fe6e 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ebac:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	b2db      	uxtb	r3, r3
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3710      	adds	r7, #16
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <otCoapHeaderSetMessageId>:

void otCoapHeaderSetMessageId(otCoapHeader *aHeader, uint16_t aMessageId)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800ebc8:	f005 feb4 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ebcc:	f005 fe50 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ebd0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_SET_MESSAGE_ID;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f062 0256 	orn	r2, r2, #86	; 0x56
 800ebda:	701a      	strb	r2, [r3, #0]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	705a      	strb	r2, [r3, #1]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	709a      	strb	r2, [r3, #2]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f042 0202 	orr.w	r2, r2, #2
 800ebf0:	711a      	strb	r2, [r3, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	715a      	strb	r2, [r3, #5]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	719a      	strb	r2, [r3, #6]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint16_t ) aMessageId;
 800ec04:	887a      	ldrh	r2, [r7, #2]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800ec0a:	f005 fe55 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ec0e:	f005 fe3b 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ec12:	60f8      	str	r0, [r7, #12]
}
 800ec14:	bf00      	nop
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <otCoapHeaderGetType>:

otCoapType otCoapHeaderGetType(const otCoapHeader *aHeader)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ec24:	f005 fe86 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ec28:	f005 fe22 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ec2c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TYPE;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f062 0261 	orn	r2, r2, #97	; 0x61
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	705a      	strb	r2, [r3, #1]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	709a      	strb	r2, [r3, #2]
 800ec40:	2200      	movs	r2, #0
 800ec42:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f042 0201 	orr.w	r2, r2, #1
 800ec4c:	711a      	strb	r2, [r3, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	715a      	strb	r2, [r3, #5]
 800ec52:	2200      	movs	r2, #0
 800ec54:	719a      	strb	r2, [r3, #6]
 800ec56:	2200      	movs	r2, #0
 800ec58:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ec60:	f005 fe2a 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ec64:	f005 fe10 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ec68:	60f8      	str	r0, [r7, #12]
    return (otCoapType)p_ot_req->Data[0];
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	b2db      	uxtb	r3, r3
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3710      	adds	r7, #16
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <otCoapHeaderGetCode>:

otCoapCode otCoapHeaderGetCode(const otCoapHeader *aHeader)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ec80:	f005 fe58 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ec84:	f005 fdf4 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ec88:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_CODE;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f062 024c 	orn	r2, r2, #76	; 0x4c
 800ec92:	701a      	strb	r2, [r3, #0]
 800ec94:	2200      	movs	r2, #0
 800ec96:	705a      	strb	r2, [r3, #1]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	709a      	strb	r2, [r3, #2]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f042 0201 	orr.w	r2, r2, #1
 800eca8:	711a      	strb	r2, [r3, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	715a      	strb	r2, [r3, #5]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	719a      	strb	r2, [r3, #6]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ecbc:	f005 fdfc 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ecc0:	f005 fde2 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ecc4:	60f8      	str	r0, [r7, #12]
    return (otCoapCode)p_ot_req->Data[0];
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	b2db      	uxtb	r3, r3
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3710      	adds	r7, #16
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <otCoapHeaderGetMessageId>:

uint16_t otCoapHeaderGetMessageId(const otCoapHeader *aHeader)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ecdc:	f005 fe2a 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ece0:	f005 fdc6 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ece4:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_MESSAGE_ID;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f062 0255 	orn	r2, r2, #85	; 0x55
 800ecee:	701a      	strb	r2, [r3, #0]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	705a      	strb	r2, [r3, #1]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	709a      	strb	r2, [r3, #2]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f042 0201 	orr.w	r2, r2, #1
 800ed04:	711a      	strb	r2, [r3, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	715a      	strb	r2, [r3, #5]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	719a      	strb	r2, [r3, #6]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ed18:	f005 fdce 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ed1c:	f005 fdb4 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ed20:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	b29b      	uxth	r3, r3
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <otCoapHeaderGetTokenLength>:

uint8_t otCoapHeaderGetTokenLength(const otCoapHeader *aHeader)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ed38:	f005 fdfc 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ed3c:	f005 fd98 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ed40:	60f8      	str	r0, [r7, #12]

   p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN_LENGTH;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2200      	movs	r2, #0
 800ed46:	f062 0254 	orn	r2, r2, #84	; 0x54
 800ed4a:	701a      	strb	r2, [r3, #0]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	705a      	strb	r2, [r3, #1]
 800ed50:	2200      	movs	r2, #0
 800ed52:	709a      	strb	r2, [r3, #2]
 800ed54:	2200      	movs	r2, #0
 800ed56:	70da      	strb	r2, [r3, #3]

   p_ot_req->Size=1;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f042 0201 	orr.w	r2, r2, #1
 800ed60:	711a      	strb	r2, [r3, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	715a      	strb	r2, [r3, #5]
 800ed66:	2200      	movs	r2, #0
 800ed68:	719a      	strb	r2, [r3, #6]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	71da      	strb	r2, [r3, #7]
   p_ot_req->Data[0] = (uint32_t) aHeader;
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ed74:	f005 fda0 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ed78:	f005 fd86 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ed7c:	60f8      	str	r0, [r7, #12]
   return (uint8_t)p_ot_req->Data[0];
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	b2db      	uxtb	r3, r3
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <otCoapHeaderGetToken>:

const uint8_t *otCoapHeaderGetToken(const otCoapHeader *aHeader)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800ed94:	f005 fdce 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ed98:	f005 fd6a 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ed9c:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_HEADER_GET_TOKEN;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f062 0253 	orn	r2, r2, #83	; 0x53
 800eda6:	701a      	strb	r2, [r3, #0]
 800eda8:	2200      	movs	r2, #0
 800edaa:	705a      	strb	r2, [r3, #1]
 800edac:	2200      	movs	r2, #0
 800edae:	709a      	strb	r2, [r3, #2]
 800edb0:	2200      	movs	r2, #0
 800edb2:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f042 0201 	orr.w	r2, r2, #1
 800edbc:	711a      	strb	r2, [r3, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	715a      	strb	r2, [r3, #5]
 800edc2:	2200      	movs	r2, #0
 800edc4:	719a      	strb	r2, [r3, #6]
 800edc6:	2200      	movs	r2, #0
 800edc8:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800edd0:	f005 fd72 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800edd4:	f005 fd58 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800edd8:	60f8      	str	r0, [r7, #12]
    return (uint8_t *)p_ot_req->Data[0];
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	689b      	ldr	r3, [r3, #8]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <otCoapNewMessage>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otCoapOption *)p_ot_req->Data[0];
}

otMessage *otCoapNewMessage(otInstance *aInstance, const otCoapHeader *aHeader)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b084      	sub	sp, #16
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800edf0:	f005 fda0 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800edf4:	f005 fd3c 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800edf8:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_NEW_MESSAGE;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f062 0259 	orn	r2, r2, #89	; 0x59
 800ee02:	701a      	strb	r2, [r3, #0]
 800ee04:	2200      	movs	r2, #0
 800ee06:	705a      	strb	r2, [r3, #1]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	709a      	strb	r2, [r3, #2]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f042 0201 	orr.w	r2, r2, #1
 800ee18:	711a      	strb	r2, [r3, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	715a      	strb	r2, [r3, #5]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	719a      	strb	r2, [r3, #6]
 800ee22:	2200      	movs	r2, #0
 800ee24:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aHeader;
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ee2c:	f005 fd44 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ee30:	f005 fd2a 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ee34:	60f8      	str	r0, [r7, #12]
    return (otMessage *)p_ot_req->Data[0];
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	689b      	ldr	r3, [r3, #8]

}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <otCoapSendRequest>:

otError otCoapSendRequest(otInstance *aInstance,otMessage *aMessage, const otMessageInfo *aMessageInfo,
                              otCoapResponseHandler aHandler, void *aContext)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b086      	sub	sp, #24
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	607a      	str	r2, [r7, #4]
 800ee4e:	603b      	str	r3, [r7, #0]
    Pre_OtCmdProcessing();
 800ee50:	f005 fd70 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ee54:	f005 fd0c 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ee58:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_REQUEST;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f062 0258 	orn	r2, r2, #88	; 0x58
 800ee62:	701a      	strb	r2, [r3, #0]
 800ee64:	2200      	movs	r2, #0
 800ee66:	705a      	strb	r2, [r3, #1]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	709a      	strb	r2, [r3, #2]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f042 0203 	orr.w	r2, r2, #3
 800ee78:	711a      	strb	r2, [r3, #4]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	715a      	strb	r2, [r3, #5]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	719a      	strb	r2, [r3, #6]
 800ee82:	2200      	movs	r2, #0
 800ee84:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800ee86:	68ba      	ldr	r2, [r7, #8]
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aHandler;
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aContext;
 800ee98:	6a3a      	ldr	r2, [r7, #32]
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800ee9e:	f005 fd0b 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800eea2:	f005 fcf1 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800eea6:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	b2db      	uxtb	r3, r3
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3718      	adds	r7, #24
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <otCoapStart>:

otError otCoapStart(otInstance *aInstance, uint16_t aPort)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b084      	sub	sp, #16
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
 800eebe:	460b      	mov	r3, r1
 800eec0:	807b      	strh	r3, [r7, #2]
    Pre_OtCmdProcessing();
 800eec2:	f005 fd37 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800eec6:	f005 fcd3 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800eeca:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_START;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	f062 024b 	orn	r2, r2, #75	; 0x4b
 800eed4:	701a      	strb	r2, [r3, #0]
 800eed6:	2200      	movs	r2, #0
 800eed8:	705a      	strb	r2, [r3, #1]
 800eeda:	2200      	movs	r2, #0
 800eedc:	709a      	strb	r2, [r3, #2]
 800eede:	2200      	movs	r2, #0
 800eee0:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f042 0201 	orr.w	r2, r2, #1
 800eeea:	711a      	strb	r2, [r3, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	715a      	strb	r2, [r3, #5]
 800eef0:	2200      	movs	r2, #0
 800eef2:	719a      	strb	r2, [r3, #6]
 800eef4:	2200      	movs	r2, #0
 800eef6:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint16_t) aPort;
 800eef8:	887a      	ldrh	r2, [r7, #2]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800eefe:	f005 fcdb 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ef02:	f005 fcc1 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ef06:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	b2db      	uxtb	r3, r3
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <otCoapAddResource>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

otError otCoapAddResource(otInstance *aInstance, otCoapResource *aResource)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b084      	sub	sp, #16
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	6039      	str	r1, [r7, #0]
    Pre_OtCmdProcessing();
 800ef20:	f005 fd08 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ef24:	f005 fca4 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ef28:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_ADD_RESSOURCE;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f062 0249 	orn	r2, r2, #73	; 0x49
 800ef32:	701a      	strb	r2, [r3, #0]
 800ef34:	2200      	movs	r2, #0
 800ef36:	705a      	strb	r2, [r3, #1]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	709a      	strb	r2, [r3, #2]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f042 0201 	orr.w	r2, r2, #1
 800ef48:	711a      	strb	r2, [r3, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	715a      	strb	r2, [r3, #5]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	719a      	strb	r2, [r3, #6]
 800ef52:	2200      	movs	r2, #0
 800ef54:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aResource;
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800ef5c:	f005 fcac 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800ef60:	f005 fc92 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800ef64:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	b2db      	uxtb	r3, r3
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <otCoapSendResponse>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otCoapSendResponse(otInstance *aInstance, otMessage *aMessage, const otMessageInfo *aMessageInfo)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800ef80:	f005 fcd8 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800ef84:	f005 fc74 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800ef88:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_COAP_SEND_RESPONSE;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f062 0257 	orn	r2, r2, #87	; 0x57
 800ef92:	701a      	strb	r2, [r3, #0]
 800ef94:	2200      	movs	r2, #0
 800ef96:	705a      	strb	r2, [r3, #1]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	709a      	strb	r2, [r3, #2]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=2;
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f042 0202 	orr.w	r2, r2, #2
 800efa8:	711a      	strb	r2, [r3, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	715a      	strb	r2, [r3, #5]
 800efae:	2200      	movs	r2, #0
 800efb0:	719a      	strb	r2, [r3, #6]
 800efb2:	2200      	movs	r2, #0
 800efb4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aMessageInfo;
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	60da      	str	r2, [r3, #12]

    Ot_Cmd_Transfer();
 800efc2:	f005 fc79 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800efc6:	f005 fc5f 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800efca:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	b2db      	uxtb	r3, r3
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <otInstanceInitSingle>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otInstance *)p_ot_req->Data[0];
}
#else
otInstance *otInstanceInitSingle(void)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
    Pre_OtCmdProcessing();
 800efe0:	f005 fca8 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800efe4:	f005 fc44 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800efe8:	6078      	str	r0, [r7, #4]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_INIT_SINGLE;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	f062 026b 	orn	r2, r2, #107	; 0x6b
 800eff2:	701a      	strb	r2, [r3, #0]
 800eff4:	2200      	movs	r2, #0
 800eff6:	705a      	strb	r2, [r3, #1]
 800eff8:	2200      	movs	r2, #0
 800effa:	709a      	strb	r2, [r3, #2]
 800effc:	2200      	movs	r2, #0
 800effe:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	711a      	strb	r2, [r3, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	715a      	strb	r2, [r3, #5]
 800f00a:	2200      	movs	r2, #0
 800f00c:	719a      	strb	r2, [r3, #6]
 800f00e:	2200      	movs	r2, #0
 800f010:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800f012:	f005 fc51 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f016:	f005 fc37 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f01a:	6078      	str	r0, [r7, #4]
    return (otInstance *)p_ot_req->Data[0];
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	689b      	ldr	r3, [r3, #8]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <otInstanceFinalize>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (bool)p_ot_req->Data[0];
}

void otInstanceFinalize(otInstance *aInstance)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800f030:	f005 fc80 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f034:	f005 fc1c 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f038:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_FINALIZE;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f062 0269 	orn	r2, r2, #105	; 0x69
 800f042:	701a      	strb	r2, [r3, #0]
 800f044:	2200      	movs	r2, #0
 800f046:	705a      	strb	r2, [r3, #1]
 800f048:	2200      	movs	r2, #0
 800f04a:	709a      	strb	r2, [r3, #2]
 800f04c:	2200      	movs	r2, #0
 800f04e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	711a      	strb	r2, [r3, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	715a      	strb	r2, [r3, #5]
 800f05a:	2200      	movs	r2, #0
 800f05c:	719a      	strb	r2, [r3, #6]
 800f05e:	2200      	movs	r2, #0
 800f060:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800f062:	f005 fc29 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f066:	f005 fc0f 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f06a:	60f8      	str	r0, [r7, #12]
}
 800f06c:	bf00      	nop
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <otSetStateChangedCallback>:

OTAPI otError OTCALL otSetStateChangedCallback(otInstance *aInstance, otStateChangedCallback aCallback,
                                               void *aContext)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
    Pre_OtCmdProcessing();
 800f080:	f005 fc58 	bl	8014934 <Pre_OtCmdProcessing>
    /* Store the callback function */
    otStateChangedCb = aCallback;
 800f084:	4a15      	ldr	r2, [pc, #84]	; (800f0dc <otSetStateChangedCallback+0x68>)
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	6013      	str	r3, [r2, #0]
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f08a:	f005 fbf1 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f08e:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_SET_STATE_CHANGED_CALLBACK;
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	2200      	movs	r2, #0
 800f094:	f062 0268 	orn	r2, r2, #104	; 0x68
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	2200      	movs	r2, #0
 800f09c:	705a      	strb	r2, [r3, #1]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	709a      	strb	r2, [r3, #2]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f042 0201 	orr.w	r2, r2, #1
 800f0ae:	711a      	strb	r2, [r3, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	715a      	strb	r2, [r3, #5]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	719a      	strb	r2, [r3, #6]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t)aContext;
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f0c2:	f005 fbf9 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f0c6:	f005 fbdf 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f0ca:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	689b      	ldr	r3, [r3, #8]
 800f0d0:	b2db      	uxtb	r3, r3
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	20000410 	.word	0x20000410

0800f0e0 <otInstanceErasePersistentInfo>:

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
}

otError otInstanceErasePersistentInfo(otInstance *aInstance)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800f0e8:	f005 fc24 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f0ec:	f005 fbc0 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f0f0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_INSTANCE_ERASE_PERSISTENT_INFO;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f062 0264 	orn	r2, r2, #100	; 0x64
 800f0fa:	701a      	strb	r2, [r3, #0]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	705a      	strb	r2, [r3, #1]
 800f100:	2200      	movs	r2, #0
 800f102:	709a      	strb	r2, [r3, #2]
 800f104:	2200      	movs	r2, #0
 800f106:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=0;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	711a      	strb	r2, [r3, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	715a      	strb	r2, [r3, #5]
 800f112:	2200      	movs	r2, #0
 800f114:	719a      	strb	r2, [r3, #6]
 800f116:	2200      	movs	r2, #0
 800f118:	71da      	strb	r2, [r3, #7]

    Ot_Cmd_Transfer();
 800f11a:	f005 fbcd 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f11e:	f005 fbb3 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f122:	60f8      	str	r0, [r7, #12]
    return (otError)p_ot_req->Data[0];
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	b2db      	uxtb	r3, r3
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <otIp6SetEnabled>:
extern otIp6SlaacIidCreate aIidCreateCb;
extern otIp6ReceiveCallback otIp6ReceiveCb;


OTAPI otError OTCALL otIp6SetEnabled(otInstance *aInstance, bool aEnabled)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b084      	sub	sp, #16
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
 800f13a:	460b      	mov	r3, r1
 800f13c:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800f13e:	f005 fbf9 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f142:	f005 fb95 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f146:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_SET_ENABLED;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800f150:	701a      	strb	r2, [r3, #0]
 800f152:	2200      	movs	r2, #0
 800f154:	705a      	strb	r2, [r3, #1]
 800f156:	2200      	movs	r2, #0
 800f158:	709a      	strb	r2, [r3, #2]
 800f15a:	2200      	movs	r2, #0
 800f15c:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	f042 0201 	orr.w	r2, r2, #1
 800f166:	711a      	strb	r2, [r3, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	715a      	strb	r2, [r3, #5]
 800f16c:	2200      	movs	r2, #0
 800f16e:	719a      	strb	r2, [r3, #6]
 800f170:	2200      	movs	r2, #0
 800f172:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800f174:	78fa      	ldrb	r2, [r7, #3]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800f17a:	f005 fb9d 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f17e:	f005 fb83 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f182:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	b2db      	uxtb	r3, r3
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <otIp6IsEnabled>:

OTAPI bool OTCALL otIp6IsEnabled(otInstance *aInstance)
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b084      	sub	sp, #16
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800f19a:	f005 fbcb 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f19e:	f005 fb67 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f1a2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_IS_ENABLED;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800f1ac:	701a      	strb	r2, [r3, #0]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	705a      	strb	r2, [r3, #1]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	709a      	strb	r2, [r3, #2]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	711a      	strb	r2, [r3, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	715a      	strb	r2, [r3, #5]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	719a      	strb	r2, [r3, #6]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800f1cc:	f005 fb74 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f1d0:	f005 fb5a 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f1d4:	60f8      	str	r0, [r7, #12]
  return (bool)p_ot_req->Data[0];
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	689b      	ldr	r3, [r3, #8]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	bf14      	ite	ne
 800f1de:	2301      	movne	r3, #1
 800f1e0:	2300      	moveq	r3, #0
 800f1e2:	b2db      	uxtb	r3, r3
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <otIp6GetUnicastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otNetifAddress *OTCALL otIp6GetUnicastAddresses(otInstance *aInstance)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800f1f4:	f005 fb9e 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f1f8:	f005 fb3a 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f1fc:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_UNICAST_ADDRESSES;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 800f206:	701a      	strb	r2, [r3, #0]
 800f208:	2200      	movs	r2, #0
 800f20a:	705a      	strb	r2, [r3, #1]
 800f20c:	2200      	movs	r2, #0
 800f20e:	709a      	strb	r2, [r3, #2]
 800f210:	2200      	movs	r2, #0
 800f212:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2200      	movs	r2, #0
 800f218:	711a      	strb	r2, [r3, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	715a      	strb	r2, [r3, #5]
 800f21e:	2200      	movs	r2, #0
 800f220:	719a      	strb	r2, [r3, #6]
 800f222:	2200      	movs	r2, #0
 800f224:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800f226:	f005 fb47 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f22a:	f005 fb2d 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f22e:	60f8      	str	r0, [r7, #12]
  return (otNetifAddress *)p_ot_req->Data[0];
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	689b      	ldr	r3, [r3, #8]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3710      	adds	r7, #16
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <otIp6GetMulticastAddresses>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otNetifMulticastAddress *otIp6GetMulticastAddresses(otInstance *aInstance)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800f244:	f005 fb76 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f248:	f005 fb12 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f24c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_GET_MULTICAST_ADDRESSES;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 800f256:	701a      	strb	r2, [r3, #0]
 800f258:	2200      	movs	r2, #0
 800f25a:	705a      	strb	r2, [r3, #1]
 800f25c:	2200      	movs	r2, #0
 800f25e:	709a      	strb	r2, [r3, #2]
 800f260:	2200      	movs	r2, #0
 800f262:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	711a      	strb	r2, [r3, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	715a      	strb	r2, [r3, #5]
 800f26e:	2200      	movs	r2, #0
 800f270:	719a      	strb	r2, [r3, #6]
 800f272:	2200      	movs	r2, #0
 800f274:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800f276:	f005 fb1f 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f27a:	f005 fb05 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f27e:	60f8      	str	r0, [r7, #12]
  return (otNetifMulticastAddress *)p_ot_req->Data[0];
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	689b      	ldr	r3, [r3, #8]
}
 800f284:	4618      	mov	r0, r3
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <otIp6AddressFromString>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (bool)p_ot_req->Data[0];
}

OTAPI otError OTCALL otIp6AddressFromString(const char *aString, otIp6Address *aAddress)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800f296:	f005 fb4d 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f29a:	f005 fae9 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f29e:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_IP6_ADDRESS_FROM_STRING;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	705a      	strb	r2, [r3, #1]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	709a      	strb	r2, [r3, #2]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=2;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f042 0202 	orr.w	r2, r2, #2
 800f2be:	711a      	strb	r2, [r3, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	715a      	strb	r2, [r3, #5]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	719a      	strb	r2, [r3, #6]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aString;
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	609a      	str	r2, [r3, #8]
  p_ot_req->Data[1] = (uint32_t) aAddress;
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	60da      	str	r2, [r3, #12]

  Ot_Cmd_Transfer();
 800f2d8:	f005 faee 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f2dc:	f005 fad4 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f2e0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	b2db      	uxtb	r3, r3
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <otLinkSetChannel>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint8_t)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetChannel(otInstance *aInstance, uint8_t aChannel)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800f2fc:	f005 fb1a 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f300:	f005 fab6 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f304:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_CHANNEL;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2200      	movs	r2, #0
 800f30a:	f042 0208 	orr.w	r2, r2, #8
 800f30e:	701a      	strb	r2, [r3, #0]
 800f310:	2200      	movs	r2, #0
 800f312:	705a      	strb	r2, [r3, #1]
 800f314:	2200      	movs	r2, #0
 800f316:	709a      	strb	r2, [r3, #2]
 800f318:	2200      	movs	r2, #0
 800f31a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2200      	movs	r2, #0
 800f320:	f042 0201 	orr.w	r2, r2, #1
 800f324:	711a      	strb	r2, [r3, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	715a      	strb	r2, [r3, #5]
 800f32a:	2200      	movs	r2, #0
 800f32c:	719a      	strb	r2, [r3, #6]
 800f32e:	2200      	movs	r2, #0
 800f330:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aChannel;
 800f332:	78fa      	ldrb	r2, [r7, #3]
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800f338:	f005 fabe 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f33c:	f005 faa4 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f340:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	b2db      	uxtb	r3, r3
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3710      	adds	r7, #16
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <otLinkSetPanId>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otPanId)p_ot_req->Data[0];
}

OTAPI otError OTCALL otLinkSetPanId(otInstance *aInstance, otPanId aPanId)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	460b      	mov	r3, r1
 800f35a:	807b      	strh	r3, [r7, #2]
  Pre_OtCmdProcessing();
 800f35c:	f005 faea 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f360:	f005 fa86 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f364:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_LINK_SET_PANID;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2200      	movs	r2, #0
 800f36a:	f042 020f 	orr.w	r2, r2, #15
 800f36e:	701a      	strb	r2, [r3, #0]
 800f370:	2200      	movs	r2, #0
 800f372:	705a      	strb	r2, [r3, #1]
 800f374:	2200      	movs	r2, #0
 800f376:	709a      	strb	r2, [r3, #2]
 800f378:	2200      	movs	r2, #0
 800f37a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2200      	movs	r2, #0
 800f380:	f042 0201 	orr.w	r2, r2, #1
 800f384:	711a      	strb	r2, [r3, #4]
 800f386:	2200      	movs	r2, #0
 800f388:	715a      	strb	r2, [r3, #5]
 800f38a:	2200      	movs	r2, #0
 800f38c:	719a      	strb	r2, [r3, #6]
 800f38e:	2200      	movs	r2, #0
 800f390:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aPanId;
 800f392:	887a      	ldrh	r2, [r7, #2]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800f398:	f005 fa8e 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f39c:	f005 fa74 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f3a0:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	b2db      	uxtb	r3, r3
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <otMessageFree>:
#include "thread.h"
#include "message.h"


void otMessageFree(otMessage *aMessage)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800f3b8:	f005 fabc 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f3bc:	f005 fa58 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f3c0:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_FREE;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f062 0246 	orn	r2, r2, #70	; 0x46
 800f3ca:	701a      	strb	r2, [r3, #0]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	705a      	strb	r2, [r3, #1]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	709a      	strb	r2, [r3, #2]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f042 0201 	orr.w	r2, r2, #1
 800f3e0:	711a      	strb	r2, [r3, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	715a      	strb	r2, [r3, #5]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	719a      	strb	r2, [r3, #6]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f3f4:	f005 fa60 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f3f8:	f005 fa46 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f3fc:	60f8      	str	r0, [r7, #12]
}
 800f3fe:	bf00      	nop
 800f400:	3710      	adds	r7, #16
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <otMessageGetOffset>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (otError)p_ot_req->Data[0];
}

uint16_t otMessageGetOffset(otMessage *aMessage)
{
 800f406:	b580      	push	{r7, lr}
 800f408:	b084      	sub	sp, #16
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
    Pre_OtCmdProcessing();
 800f40e:	f005 fa91 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f412:	f005 fa2d 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f416:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_GET_OFFSET;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	f062 0243 	orn	r2, r2, #67	; 0x43
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	2200      	movs	r2, #0
 800f424:	705a      	strb	r2, [r3, #1]
 800f426:	2200      	movs	r2, #0
 800f428:	709a      	strb	r2, [r3, #2]
 800f42a:	2200      	movs	r2, #0
 800f42c:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	f042 0201 	orr.w	r2, r2, #1
 800f436:	711a      	strb	r2, [r3, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	715a      	strb	r2, [r3, #5]
 800f43c:	2200      	movs	r2, #0
 800f43e:	719a      	strb	r2, [r3, #6]
 800f440:	2200      	movs	r2, #0
 800f442:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f44a:	f005 fa35 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f44e:	f005 fa1b 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f452:	60f8      	str	r0, [r7, #12]
    return (uint16_t)p_ot_req->Data[0];
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	b29b      	uxth	r3, r3
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3710      	adds	r7, #16
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <otMessageAppend>:
    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
    return (int8_t)p_ot_req->Data[0];
}

otError otMessageAppend(otMessage *aMessage, const void *aBuf, uint16_t aLength)
{
 800f462:	b580      	push	{r7, lr}
 800f464:	b086      	sub	sp, #24
 800f466:	af00      	add	r7, sp, #0
 800f468:	60f8      	str	r0, [r7, #12]
 800f46a:	60b9      	str	r1, [r7, #8]
 800f46c:	4613      	mov	r3, r2
 800f46e:	80fb      	strh	r3, [r7, #6]
    Pre_OtCmdProcessing();
 800f470:	f005 fa60 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f474:	f005 f9fc 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f478:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_APPEND;
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f062 023e 	orn	r2, r2, #62	; 0x3e
 800f482:	701a      	strb	r2, [r3, #0]
 800f484:	2200      	movs	r2, #0
 800f486:	705a      	strb	r2, [r3, #1]
 800f488:	2200      	movs	r2, #0
 800f48a:	709a      	strb	r2, [r3, #2]
 800f48c:	2200      	movs	r2, #0
 800f48e:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=3;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	2200      	movs	r2, #0
 800f494:	f042 0203 	orr.w	r2, r2, #3
 800f498:	711a      	strb	r2, [r3, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	715a      	strb	r2, [r3, #5]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	719a      	strb	r2, [r3, #6]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aBuf;
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aLength;
 800f4b2:	88fa      	ldrh	r2, [r7, #6]
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	611a      	str	r2, [r3, #16]

    Ot_Cmd_Transfer();
 800f4b8:	f005 f9fe 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f4bc:	f005 f9e4 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f4c0:	6178      	str	r0, [r7, #20]
    return (otError)p_ot_req->Data[0];
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	b2db      	uxtb	r3, r3
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3718      	adds	r7, #24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <otMessageRead>:

int otMessageRead(otMessage *aMessage, uint16_t aOffset, void *aBuf, uint16_t aLength)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b086      	sub	sp, #24
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	607a      	str	r2, [r7, #4]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	460b      	mov	r3, r1
 800f4de:	817b      	strh	r3, [r7, #10]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	813b      	strh	r3, [r7, #8]
    Pre_OtCmdProcessing();
 800f4e4:	f005 fa26 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f4e8:	f005 f9c2 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f4ec:	6178      	str	r0, [r7, #20]

    p_ot_req->ID = MSG_M4TOM0_OT_MESSAGE_READ;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f062 023d 	orn	r2, r2, #61	; 0x3d
 800f4f6:	701a      	strb	r2, [r3, #0]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	705a      	strb	r2, [r3, #1]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	709a      	strb	r2, [r3, #2]
 800f500:	2200      	movs	r2, #0
 800f502:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=4;
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	2200      	movs	r2, #0
 800f508:	f042 0204 	orr.w	r2, r2, #4
 800f50c:	711a      	strb	r2, [r3, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	715a      	strb	r2, [r3, #5]
 800f512:	2200      	movs	r2, #0
 800f514:	719a      	strb	r2, [r3, #6]
 800f516:	2200      	movs	r2, #0
 800f518:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aMessage;
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	609a      	str	r2, [r3, #8]
    p_ot_req->Data[1] = (uint32_t) aOffset;
 800f520:	897a      	ldrh	r2, [r7, #10]
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	60da      	str	r2, [r3, #12]
    p_ot_req->Data[2] = (uint32_t) aBuf;
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	611a      	str	r2, [r3, #16]
    p_ot_req->Data[3] = (uint32_t) aLength;
 800f52c:	893a      	ldrh	r2, [r7, #8]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	615a      	str	r2, [r3, #20]

    Ot_Cmd_Transfer();
 800f532:	f005 f9c1 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f536:	f005 f9a7 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f53a:	6178      	str	r0, [r7, #20]
    return (int)p_ot_req->Data[0];
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	689b      	ldr	r3, [r3, #8]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3718      	adds	r7, #24
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <OpenThread_CallBack_Processing>:
  * @param  None
  * @retval None
  */

HAL_StatusTypeDef OpenThread_CallBack_Processing(void)
{
 800f548:	b5b0      	push	{r4, r5, r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800f54e:	2300      	movs	r3, #0
 800f550:	71fb      	strb	r3, [r7, #7]


    /* Get pointer on received event buffer from M0 */
    Thread_OT_Cmd_Request_t* p_notification = THREAD_Get_NotificationPayloadBuffer();
 800f552:	f005 f9a5 	bl	80148a0 <THREAD_Get_NotificationPayloadBuffer>
 800f556:	6038      	str	r0, [r7, #0]

    switch(p_notification->ID)
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	3b01      	subs	r3, #1
 800f55e:	2b17      	cmp	r3, #23
 800f560:	f200 81c3 	bhi.w	800f8ea <OpenThread_CallBack_Processing+0x3a2>
 800f564:	a201      	add	r2, pc, #4	; (adr r2, 800f56c <OpenThread_CallBack_Processing+0x24>)
 800f566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f56a:	bf00      	nop
 800f56c:	0800f5cd 	.word	0x0800f5cd
 800f570:	0800f5e9 	.word	0x0800f5e9
 800f574:	0800f64d 	.word	0x0800f64d
 800f578:	0800f695 	.word	0x0800f695
 800f57c:	0800f6a1 	.word	0x0800f6a1
 800f580:	0800f6bf 	.word	0x0800f6bf
 800f584:	0800f6dd 	.word	0x0800f6dd
 800f588:	0800f6fb 	.word	0x0800f6fb
 800f58c:	0800f719 	.word	0x0800f719
 800f590:	0800f737 	.word	0x0800f737
 800f594:	0800f759 	.word	0x0800f759
 800f598:	0800f777 	.word	0x0800f777
 800f59c:	0800f8eb 	.word	0x0800f8eb
 800f5a0:	0800f79d 	.word	0x0800f79d
 800f5a4:	0800f7d1 	.word	0x0800f7d1
 800f5a8:	0800f7f9 	.word	0x0800f7f9
 800f5ac:	0800f817 	.word	0x0800f817
 800f5b0:	0800f885 	.word	0x0800f885
 800f5b4:	0800f8ad 	.word	0x0800f8ad
 800f5b8:	0800f8eb 	.word	0x0800f8eb
 800f5bc:	0800f8cb 	.word	0x0800f8cb
 800f5c0:	0800f8eb 	.word	0x0800f8eb
 800f5c4:	0800f8eb 	.word	0x0800f8eb
 800f5c8:	0800f625 	.word	0x0800f625
    {
    case MSG_M0TOM4_NOTIFY_STATE_CHANGE:
        if (otStateChangedCb != NULL)
 800f5cc:	4b9b      	ldr	r3, [pc, #620]	; (800f83c <OpenThread_CallBack_Processing+0x2f4>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f000 818d 	beq.w	800f8f0 <OpenThread_CallBack_Processing+0x3a8>
        {
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800f5d6:	4b99      	ldr	r3, [pc, #612]	; (800f83c <OpenThread_CallBack_Processing+0x2f4>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	683a      	ldr	r2, [r7, #0]
 800f5dc:	6890      	ldr	r0, [r2, #8]
                    (void*) p_notification->Data[1]);
 800f5de:	683a      	ldr	r2, [r7, #0]
 800f5e0:	68d2      	ldr	r2, [r2, #12]
            otStateChangedCb((uint32_t) p_notification->Data[0],
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	4798      	blx	r3
        }
        break;
 800f5e6:	e183      	b.n	800f8f0 <OpenThread_CallBack_Processing+0x3a8>
    case MSG_M0TOM4_COAP_REQUEST_HANDLER:
        mySTCoapContext = (STCoapSpecificRequestContextType * ) p_notification->Data[0];
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	4b94      	ldr	r3, [pc, #592]	; (800f840 <OpenThread_CallBack_Processing+0x2f8>)
 800f5f0:	601a      	str	r2, [r3, #0]
        coapRequestHandlerCb = mySTCoapContext->mHandler;
 800f5f2:	4b93      	ldr	r3, [pc, #588]	; (800f840 <OpenThread_CallBack_Processing+0x2f8>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	4a92      	ldr	r2, [pc, #584]	; (800f844 <OpenThread_CallBack_Processing+0x2fc>)
 800f5fa:	6013      	str	r3, [r2, #0]
        if (coapRequestHandlerCb != NULL)
 800f5fc:	4b91      	ldr	r3, [pc, #580]	; (800f844 <OpenThread_CallBack_Processing+0x2fc>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	f000 8177 	beq.w	800f8f4 <OpenThread_CallBack_Processing+0x3ac>
        {
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f606:	4b8f      	ldr	r3, [pc, #572]	; (800f844 <OpenThread_CallBack_Processing+0x2fc>)
 800f608:	681c      	ldr	r4, [r3, #0]
 800f60a:	4b8d      	ldr	r3, [pc, #564]	; (800f840 <OpenThread_CallBack_Processing+0x2f8>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6818      	ldr	r0, [r3, #0]
                                (otCoapHeader *) p_notification->Data[1],
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	68db      	ldr	r3, [r3, #12]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f614:	4619      	mov	r1, r3
                                (otMessage *) p_notification->Data[2],
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	691b      	ldr	r3, [r3, #16]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f61a:	461a      	mov	r2, r3
                                (otMessageInfo *) p_notification->Data[3]);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	695b      	ldr	r3, [r3, #20]
            coapRequestHandlerCb(mySTCoapContext->mContext,
 800f620:	47a0      	blx	r4
        }
        break;
 800f622:	e167      	b.n	800f8f4 <OpenThread_CallBack_Processing+0x3ac>
    case MSG_M0TOM4_DEFAULT_COAP_REQUEST_HANDLER:
        if (defaultCoapRequestHandlerCb != NULL)
 800f624:	4b88      	ldr	r3, [pc, #544]	; (800f848 <OpenThread_CallBack_Processing+0x300>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f000 8165 	beq.w	800f8f8 <OpenThread_CallBack_Processing+0x3b0>
        {
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f62e:	4b86      	ldr	r3, [pc, #536]	; (800f848 <OpenThread_CallBack_Processing+0x300>)
 800f630:	681c      	ldr	r4, [r3, #0]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	4618      	mov	r0, r3
                    (otCoapHeader *) p_notification->Data[1],
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	68db      	ldr	r3, [r3, #12]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f63c:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	691b      	ldr	r3, [r3, #16]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f642:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3]);
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	695b      	ldr	r3, [r3, #20]
            defaultCoapRequestHandlerCb((void *) p_notification->Data[0],
 800f648:	47a0      	blx	r4
        }
        break;
 800f64a:	e155      	b.n	800f8f8 <OpenThread_CallBack_Processing+0x3b0>
    case MSG_M0TOM4_COAP_RESPONSE_HANDLER: 
        mySTCoapResponseContext = (STCoapSpecificResponseContextType * ) p_notification->Data[0];
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	461a      	mov	r2, r3
 800f652:	4b7e      	ldr	r3, [pc, #504]	; (800f84c <OpenThread_CallBack_Processing+0x304>)
 800f654:	601a      	str	r2, [r3, #0]
        coapResponseHandlerCb = mySTCoapResponseContext->mHandler;
 800f656:	4b7d      	ldr	r3, [pc, #500]	; (800f84c <OpenThread_CallBack_Processing+0x304>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	4a7c      	ldr	r2, [pc, #496]	; (800f850 <OpenThread_CallBack_Processing+0x308>)
 800f65e:	6013      	str	r3, [r2, #0]
        if (coapResponseHandlerCb != NULL)
 800f660:	4b7b      	ldr	r3, [pc, #492]	; (800f850 <OpenThread_CallBack_Processing+0x308>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 8149 	beq.w	800f8fc <OpenThread_CallBack_Processing+0x3b4>
        {
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f66a:	4b79      	ldr	r3, [pc, #484]	; (800f850 <OpenThread_CallBack_Processing+0x308>)
 800f66c:	681c      	ldr	r4, [r3, #0]
 800f66e:	4b77      	ldr	r3, [pc, #476]	; (800f84c <OpenThread_CallBack_Processing+0x304>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	6818      	ldr	r0, [r3, #0]
                    (otCoapHeader *) p_notification->Data[1],
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	68db      	ldr	r3, [r3, #12]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f678:	4619      	mov	r1, r3
                    (otMessage *) p_notification->Data[2],
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	691b      	ldr	r3, [r3, #16]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f67e:	461a      	mov	r2, r3
                    (otMessageInfo *) p_notification->Data[3],
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	695b      	ldr	r3, [r3, #20]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f684:	461d      	mov	r5, r3
                    (otError) p_notification->Data[4]);
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	699b      	ldr	r3, [r3, #24]
            coapResponseHandlerCb(mySTCoapResponseContext->mContext,
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	462b      	mov	r3, r5
 800f690:	47a0      	blx	r4
        }
        break;
 800f692:	e133      	b.n	800f8fc <OpenThread_CallBack_Processing+0x3b4>
    case MSG_M0TOM4_NOTIFY_STACK_RESET:
        /* Store Thread NVM data in Flash*/
        SHCI_C2_FLASH_StoreData(THREAD_IP);
 800f694:	2001      	movs	r0, #1
 800f696:	f7fe fd00 	bl	800e09a <SHCI_C2_FLASH_StoreData>
        /* Perform an NVIC Reset in order to reinitalize the device */
        HAL_NVIC_SystemReset();
 800f69a:	f7f6 fb58 	bl	8005d4e <HAL_NVIC_SystemReset>
        break;
 800f69e:	e14c      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
    case MSG_M0TOM4_IP6_RECEIVE:
        if (otIp6ReceiveCb != NULL)
 800f6a0:	4b6c      	ldr	r3, [pc, #432]	; (800f854 <OpenThread_CallBack_Processing+0x30c>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 812b 	beq.w	800f900 <OpenThread_CallBack_Processing+0x3b8>
        {
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800f6aa:	4b6a      	ldr	r3, [pc, #424]	; (800f854 <OpenThread_CallBack_Processing+0x30c>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	6892      	ldr	r2, [r2, #8]
 800f6b2:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f6b4:	683a      	ldr	r2, [r7, #0]
 800f6b6:	68d2      	ldr	r2, [r2, #12]
            otIp6ReceiveCb((otMessage*) p_notification->Data[0],
 800f6b8:	4611      	mov	r1, r2
 800f6ba:	4798      	blx	r3
        }
        break;
 800f6bc:	e120      	b.n	800f900 <OpenThread_CallBack_Processing+0x3b8>
    case MSG_M0TOM4_IP6_SLAAC_IID_CREATE:
        if (aIidCreateCb != NULL)
 800f6be:	4b66      	ldr	r3, [pc, #408]	; (800f858 <OpenThread_CallBack_Processing+0x310>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	f000 811e 	beq.w	800f904 <OpenThread_CallBack_Processing+0x3bc>
        {
            /* Not passing otInstance as first parameter, because created on M0, passing NULL instead */
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800f6c8:	4b63      	ldr	r3, [pc, #396]	; (800f858 <OpenThread_CallBack_Processing+0x310>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	6892      	ldr	r2, [r2, #8]
 800f6d0:	4611      	mov	r1, r2
                    (void*) p_notification->Data[1]);
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	68d2      	ldr	r2, [r2, #12]
            aIidCreateCb(NULL, (otNetifAddress*) p_notification->Data[0],
 800f6d6:	2000      	movs	r0, #0
 800f6d8:	4798      	blx	r3
        }
        break;
 800f6da:	e113      	b.n	800f904 <OpenThread_CallBack_Processing+0x3bc>
    case MSG_M0TOM4_HANDLE_ACTIVE_SCAN_RESULT:
        if (otHandleActiveScanResultCb != NULL)
 800f6dc:	4b5f      	ldr	r3, [pc, #380]	; (800f85c <OpenThread_CallBack_Processing+0x314>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f000 8111 	beq.w	800f908 <OpenThread_CallBack_Processing+0x3c0>
        {
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800f6e6:	4b5d      	ldr	r3, [pc, #372]	; (800f85c <OpenThread_CallBack_Processing+0x314>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	683a      	ldr	r2, [r7, #0]
 800f6ec:	6892      	ldr	r2, [r2, #8]
 800f6ee:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	68d2      	ldr	r2, [r2, #12]
            otHandleActiveScanResultCb((otActiveScanResult*) p_notification->Data[0],
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	4798      	blx	r3
        }
        break;
 800f6f8:	e106      	b.n	800f908 <OpenThread_CallBack_Processing+0x3c0>
    case MSG_M0TOM4_HANDLE_ENERGY_SCAN_RESULT:
        if (otHandleEnergyScanResultCb != NULL)
 800f6fa:	4b59      	ldr	r3, [pc, #356]	; (800f860 <OpenThread_CallBack_Processing+0x318>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f000 8104 	beq.w	800f90c <OpenThread_CallBack_Processing+0x3c4>
        {
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800f704:	4b56      	ldr	r3, [pc, #344]	; (800f860 <OpenThread_CallBack_Processing+0x318>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	6892      	ldr	r2, [r2, #8]
 800f70c:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f70e:	683a      	ldr	r2, [r7, #0]
 800f710:	68d2      	ldr	r2, [r2, #12]
            otHandleEnergyScanResultCb((otEnergyScanResult*) p_notification->Data[0],
 800f712:	4611      	mov	r1, r2
 800f714:	4798      	blx	r3
        }
        break;
 800f716:	e0f9      	b.n	800f90c <OpenThread_CallBack_Processing+0x3c4>
    case MSG_M0TOM4_HANDLE_LINK_PCAP:
        if (otLinkPcapCb != NULL)
 800f718:	4b52      	ldr	r3, [pc, #328]	; (800f864 <OpenThread_CallBack_Processing+0x31c>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 80f7 	beq.w	800f910 <OpenThread_CallBack_Processing+0x3c8>
        {
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800f722:	4b50      	ldr	r3, [pc, #320]	; (800f864 <OpenThread_CallBack_Processing+0x31c>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	683a      	ldr	r2, [r7, #0]
 800f728:	6892      	ldr	r2, [r2, #8]
 800f72a:	4610      	mov	r0, r2
                    (void*) p_notification->Data[1]);
 800f72c:	683a      	ldr	r2, [r7, #0]
 800f72e:	68d2      	ldr	r2, [r2, #12]
            otLinkPcapCb((otRadioFrame*) p_notification->Data[0],
 800f730:	4611      	mov	r1, r2
 800f732:	4798      	blx	r3
        }
        break;
 800f734:	e0ec      	b.n	800f910 <OpenThread_CallBack_Processing+0x3c8>
    case MSG_M0TOM4_RECEIVE_DIAGNOSTIC_GET_CALLBACK:
        if (otReceiveDiagnosticGetCb != NULL)
 800f736:	4b4c      	ldr	r3, [pc, #304]	; (800f868 <OpenThread_CallBack_Processing+0x320>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	f000 80ea 	beq.w	800f914 <OpenThread_CallBack_Processing+0x3cc>
        {
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800f740:	4b49      	ldr	r3, [pc, #292]	; (800f868 <OpenThread_CallBack_Processing+0x320>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	6892      	ldr	r2, [r2, #8]
 800f748:	4610      	mov	r0, r2
                    (otMessageInfo*) p_notification->Data[1],
 800f74a:	683a      	ldr	r2, [r7, #0]
 800f74c:	68d2      	ldr	r2, [r2, #12]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800f74e:	4611      	mov	r1, r2
                    (void*) p_notification->Data[2]);
 800f750:	683a      	ldr	r2, [r7, #0]
 800f752:	6912      	ldr	r2, [r2, #16]
            otReceiveDiagnosticGetCb((otMessage*) p_notification->Data[0],
 800f754:	4798      	blx	r3
        }
        break;
 800f756:	e0dd      	b.n	800f914 <OpenThread_CallBack_Processing+0x3cc>
#if OPENTHREAD_FTD
    case MSG_M0TOM4_THREAD_FTD_CHILD_TABLE_CALLBACK:
        if (otThreadChildTableCallbackCb != NULL)
 800f758:	4b44      	ldr	r3, [pc, #272]	; (800f86c <OpenThread_CallBack_Processing+0x324>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f000 80db 	beq.w	800f918 <OpenThread_CallBack_Processing+0x3d0>
        {
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800f762:	4b42      	ldr	r3, [pc, #264]	; (800f86c <OpenThread_CallBack_Processing+0x324>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	6892      	ldr	r2, [r2, #8]
 800f76a:	b2d0      	uxtb	r0, r2
                    (const otChildInfo *) p_notification->Data[1]);
 800f76c:	683a      	ldr	r2, [r7, #0]
 800f76e:	68d2      	ldr	r2, [r2, #12]
            otThreadChildTableCallbackCb((otThreadChildTableEvent) p_notification->Data[0],
 800f770:	4611      	mov	r1, r2
 800f772:	4798      	blx	r3
        }
        break;
 800f774:	e0d0      	b.n	800f918 <OpenThread_CallBack_Processing+0x3d0>
#endif
    case MSG_M0TOM4_COMMISSIONER_ENERGY_REPORT_CALLBACK:
        if (otCommissionerEnergyReportCb != NULL)
 800f776:	4b3e      	ldr	r3, [pc, #248]	; (800f870 <OpenThread_CallBack_Processing+0x328>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 80ce 	beq.w	800f91c <OpenThread_CallBack_Processing+0x3d4>
        {
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f780:	4b3b      	ldr	r3, [pc, #236]	; (800f870 <OpenThread_CallBack_Processing+0x328>)
 800f782:	681c      	ldr	r4, [r3, #0]
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	6898      	ldr	r0, [r3, #8]
                    (uint8_t*) p_notification->Data[1],
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	68db      	ldr	r3, [r3, #12]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f78c:	4619      	mov	r1, r3
                    (uint8_t) p_notification->Data[2],
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	691b      	ldr	r3, [r3, #16]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f792:	b2da      	uxtb	r2, r3
                    (void*) p_notification->Data[3]);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	695b      	ldr	r3, [r3, #20]
            otCommissionerEnergyReportCb((uint32_t) p_notification->Data[0],
 800f798:	47a0      	blx	r4
        }
        break;
 800f79a:	e0bf      	b.n	800f91c <OpenThread_CallBack_Processing+0x3d4>
    case MSG_M0TOM4_DNS_RESPONSE_HANDLER:
        if (otDnsResponseHandlerCb != NULL)
 800f79c:	4b35      	ldr	r3, [pc, #212]	; (800f874 <OpenThread_CallBack_Processing+0x32c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 80bd 	beq.w	800f920 <OpenThread_CallBack_Processing+0x3d8>
        {
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f7a6:	4b33      	ldr	r3, [pc, #204]	; (800f874 <OpenThread_CallBack_Processing+0x32c>)
 800f7a8:	681c      	ldr	r4, [r3, #0]
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	4618      	mov	r0, r3
                    (char*) p_notification->Data[1],
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	68db      	ldr	r3, [r3, #12]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f7b4:	4619      	mov	r1, r3
                    (otIp6Address*) p_notification->Data[2],
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	691b      	ldr	r3, [r3, #16]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f7ba:	461d      	mov	r5, r3
                    (uint32_t) p_notification->Data[3],
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	695a      	ldr	r2, [r3, #20]
                    (otError) p_notification->Data[4]);
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	699b      	ldr	r3, [r3, #24]
            otDnsResponseHandlerCb((void*) p_notification->Data[0],
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	462a      	mov	r2, r5
 800f7cc:	47a0      	blx	r4
        }
        break;
 800f7ce:	e0a7      	b.n	800f920 <OpenThread_CallBack_Processing+0x3d8>
    case MSG_M0TOM4_ICMP6_RECEIVE_CALLBACK:
        if (otIcmp6ReceiveCb != NULL)
 800f7d0:	4b29      	ldr	r3, [pc, #164]	; (800f878 <OpenThread_CallBack_Processing+0x330>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f000 80a5 	beq.w	800f924 <OpenThread_CallBack_Processing+0x3dc>
        {
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7da:	4b27      	ldr	r3, [pc, #156]	; (800f878 <OpenThread_CallBack_Processing+0x330>)
 800f7dc:	681c      	ldr	r4, [r3, #0]
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	4618      	mov	r0, r3
                    (otMessage*) p_notification->Data[1],
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	68db      	ldr	r3, [r3, #12]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7e8:	4619      	mov	r1, r3
                    (otMessageInfo*) p_notification->Data[2],
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	691b      	ldr	r3, [r3, #16]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7ee:	461a      	mov	r2, r3
                    (otIcmp6Header*) p_notification->Data[3]);
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	695b      	ldr	r3, [r3, #20]
            otIcmp6ReceiveCb((void*) p_notification->Data[0],
 800f7f4:	47a0      	blx	r4
        }
        break;
 800f7f6:	e095      	b.n	800f924 <OpenThread_CallBack_Processing+0x3dc>
    case MSG_M0TOM4_JOINER_CALLBACK:
        if (otJoinerCb != NULL)
 800f7f8:	4b20      	ldr	r3, [pc, #128]	; (800f87c <OpenThread_CallBack_Processing+0x334>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 8093 	beq.w	800f928 <OpenThread_CallBack_Processing+0x3e0>
        {
            otJoinerCb((otError) p_notification->Data[0],
 800f802:	4b1e      	ldr	r3, [pc, #120]	; (800f87c <OpenThread_CallBack_Processing+0x334>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	683a      	ldr	r2, [r7, #0]
 800f808:	6892      	ldr	r2, [r2, #8]
 800f80a:	b2d0      	uxtb	r0, r2
                    (void*) p_notification->Data[1]);
 800f80c:	683a      	ldr	r2, [r7, #0]
 800f80e:	68d2      	ldr	r2, [r2, #12]
            otJoinerCb((otError) p_notification->Data[0],
 800f810:	4611      	mov	r1, r2
 800f812:	4798      	blx	r3
        }
        break;
 800f814:	e088      	b.n	800f928 <OpenThread_CallBack_Processing+0x3e0>
    case MSG_M0TOM4_LINK_RAW_RECEIVE_DONE:
        if (otLinkRawReceiveDoneCb != NULL)
 800f816:	4b1a      	ldr	r3, [pc, #104]	; (800f880 <OpenThread_CallBack_Processing+0x338>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 8086 	beq.w	800f92c <OpenThread_CallBack_Processing+0x3e4>
        {
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800f820:	4b17      	ldr	r3, [pc, #92]	; (800f880 <OpenThread_CallBack_Processing+0x338>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	683a      	ldr	r2, [r7, #0]
 800f826:	6892      	ldr	r2, [r2, #8]
 800f828:	4610      	mov	r0, r2
                    (otRadioFrame*) p_notification->Data[1],
 800f82a:	683a      	ldr	r2, [r7, #0]
 800f82c:	68d2      	ldr	r2, [r2, #12]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800f82e:	4611      	mov	r1, r2
                    (otError) p_notification->Data[2]);
 800f830:	683a      	ldr	r2, [r7, #0]
 800f832:	6912      	ldr	r2, [r2, #16]
            otLinkRawReceiveDoneCb((otInstance*) p_notification->Data[0],
 800f834:	b2d2      	uxtb	r2, r2
 800f836:	4798      	blx	r3
        }
        break;
 800f838:	e078      	b.n	800f92c <OpenThread_CallBack_Processing+0x3e4>
 800f83a:	bf00      	nop
 800f83c:	20000410 	.word	0x20000410
 800f840:	200050e8 	.word	0x200050e8
 800f844:	20000450 	.word	0x20000450
 800f848:	20000454 	.word	0x20000454
 800f84c:	200050e4 	.word	0x200050e4
 800f850:	20000458 	.word	0x20000458
 800f854:	20000418 	.word	0x20000418
 800f858:	20000414 	.word	0x20000414
 800f85c:	2000041c 	.word	0x2000041c
 800f860:	20000420 	.word	0x20000420
 800f864:	20000424 	.word	0x20000424
 800f868:	20000428 	.word	0x20000428
 800f86c:	2000042c 	.word	0x2000042c
 800f870:	20000430 	.word	0x20000430
 800f874:	20000434 	.word	0x20000434
 800f878:	20000438 	.word	0x20000438
 800f87c:	2000043c 	.word	0x2000043c
 800f880:	20000440 	.word	0x20000440
    case MSG_M0TOM4_LINK_RAW_TRANSMIT_DONE:
        if (otLinkRawTransmitDoneCb != NULL)
 800f884:	4b30      	ldr	r3, [pc, #192]	; (800f948 <OpenThread_CallBack_Processing+0x400>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d051      	beq.n	800f930 <OpenThread_CallBack_Processing+0x3e8>
        {
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f88c:	4b2e      	ldr	r3, [pc, #184]	; (800f948 <OpenThread_CallBack_Processing+0x400>)
 800f88e:	681c      	ldr	r4, [r3, #0]
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	689b      	ldr	r3, [r3, #8]
 800f894:	4618      	mov	r0, r3
                    (otRadioFrame*) p_notification->Data[1],
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	68db      	ldr	r3, [r3, #12]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f89a:	4619      	mov	r1, r3
                    (otRadioFrame*) p_notification->Data[2],
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	691b      	ldr	r3, [r3, #16]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f8a0:	461a      	mov	r2, r3
                    (otError) p_notification->Data[3]);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	695b      	ldr	r3, [r3, #20]
            otLinkRawTransmitDoneCb((otInstance*) p_notification->Data[0],
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	47a0      	blx	r4
        }
        break;
 800f8aa:	e041      	b.n	800f930 <OpenThread_CallBack_Processing+0x3e8>
    case MSG_M0TOM4_LINK_RAW_ENERGY_SCAN_DONE:
        if (otLinkRawEnergyScanDoneCb != NULL)
 800f8ac:	4b27      	ldr	r3, [pc, #156]	; (800f94c <OpenThread_CallBack_Processing+0x404>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d03f      	beq.n	800f934 <OpenThread_CallBack_Processing+0x3ec>
        {
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800f8b4:	4b25      	ldr	r3, [pc, #148]	; (800f94c <OpenThread_CallBack_Processing+0x404>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	683a      	ldr	r2, [r7, #0]
 800f8ba:	6892      	ldr	r2, [r2, #8]
 800f8bc:	4610      	mov	r0, r2
                    (int8_t) p_notification->Data[1]);
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	68d2      	ldr	r2, [r2, #12]
            otLinkRawEnergyScanDoneCb((otInstance*) p_notification->Data[0],
 800f8c2:	b252      	sxtb	r2, r2
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	4798      	blx	r3
        }
        break;
 800f8c8:	e034      	b.n	800f934 <OpenThread_CallBack_Processing+0x3ec>
    case MSG_M0TOM4_UDP_RECEIVE:
        if (otUdpReceiveCb != NULL)
 800f8ca:	4b21      	ldr	r3, [pc, #132]	; (800f950 <OpenThread_CallBack_Processing+0x408>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d032      	beq.n	800f938 <OpenThread_CallBack_Processing+0x3f0>
        {
            otUdpReceiveCb((void*) p_notification->Data[0],
 800f8d2:	4b1f      	ldr	r3, [pc, #124]	; (800f950 <OpenThread_CallBack_Processing+0x408>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	683a      	ldr	r2, [r7, #0]
 800f8d8:	6892      	ldr	r2, [r2, #8]
 800f8da:	4610      	mov	r0, r2
                    (otMessage*) p_notification->Data[1],
 800f8dc:	683a      	ldr	r2, [r7, #0]
 800f8de:	68d2      	ldr	r2, [r2, #12]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800f8e0:	4611      	mov	r1, r2
                    (otMessageInfo*) p_notification->Data[2]);
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	6912      	ldr	r2, [r2, #16]
            otUdpReceiveCb((void*) p_notification->Data[0],
 800f8e6:	4798      	blx	r3
        }
        break;
 800f8e8:	e026      	b.n	800f938 <OpenThread_CallBack_Processing+0x3f0>
                    (void *) p_notification->Data[1]);
        }
        break;
#endif
    default:
        status = HAL_ERROR;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	71fb      	strb	r3, [r7, #7]
        break;
 800f8ee:	e024      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8f0:	bf00      	nop
 800f8f2:	e022      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8f4:	bf00      	nop
 800f8f6:	e020      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8f8:	bf00      	nop
 800f8fa:	e01e      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f8fc:	bf00      	nop
 800f8fe:	e01c      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f900:	bf00      	nop
 800f902:	e01a      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f904:	bf00      	nop
 800f906:	e018      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f908:	bf00      	nop
 800f90a:	e016      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f90c:	bf00      	nop
 800f90e:	e014      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f910:	bf00      	nop
 800f912:	e012      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f914:	bf00      	nop
 800f916:	e010      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f918:	bf00      	nop
 800f91a:	e00e      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f91c:	bf00      	nop
 800f91e:	e00c      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f920:	bf00      	nop
 800f922:	e00a      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f924:	bf00      	nop
 800f926:	e008      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f928:	bf00      	nop
 800f92a:	e006      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f92c:	bf00      	nop
 800f92e:	e004      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f930:	bf00      	nop
 800f932:	e002      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f934:	bf00      	nop
 800f936:	e000      	b.n	800f93a <OpenThread_CallBack_Processing+0x3f2>
        break;
 800f938:	bf00      	nop
    }

    TL_THREAD_SendAck();
 800f93a:	f7fe fed9 	bl	800e6f0 <TL_THREAD_SendAck>
    return status;
 800f93e:	79fb      	ldrb	r3, [r7, #7]

}
 800f940:	4618      	mov	r0, r3
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bdb0      	pop	{r4, r5, r7, pc}
 800f948:	20000444 	.word	0x20000444
 800f94c:	20000448 	.word	0x20000448
 800f950:	2000044c 	.word	0x2000044c

0800f954 <otPlatRadioSetTransmitPower>:
 * @retval OT_ERROR_NONE             Successfully set the transmit power.
 * @retval OT_ERROR_NOT_IMPLEMENTED  Transmit power configuration via dBm is not implemented.
 *
 */
otError otPlatRadioSetTransmitPower(otInstance *aInstance, int8_t aPower)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	460b      	mov	r3, r1
 800f95e:	70fb      	strb	r3, [r7, #3]
    Pre_OtCmdProcessing();
 800f960:	f004 ffe8 	bl	8014934 <Pre_OtCmdProcessing>
    /* prepare buffer */
    Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f964:	f004 ff84 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f968:	60f8      	str	r0, [r7, #12]

    p_ot_req->ID = MSG_M4TOM0_OT_RADIO_SET_TRANSMIT_POWER;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2200      	movs	r2, #0
 800f96e:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 800f972:	701a      	strb	r2, [r3, #0]
 800f974:	2200      	movs	r2, #0
 800f976:	f042 0201 	orr.w	r2, r2, #1
 800f97a:	705a      	strb	r2, [r3, #1]
 800f97c:	2200      	movs	r2, #0
 800f97e:	709a      	strb	r2, [r3, #2]
 800f980:	2200      	movs	r2, #0
 800f982:	70da      	strb	r2, [r3, #3]

    p_ot_req->Size=1;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2200      	movs	r2, #0
 800f988:	f042 0201 	orr.w	r2, r2, #1
 800f98c:	711a      	strb	r2, [r3, #4]
 800f98e:	2200      	movs	r2, #0
 800f990:	715a      	strb	r2, [r3, #5]
 800f992:	2200      	movs	r2, #0
 800f994:	719a      	strb	r2, [r3, #6]
 800f996:	2200      	movs	r2, #0
 800f998:	71da      	strb	r2, [r3, #7]
    p_ot_req->Data[0] = (uint32_t) aPower;
 800f99a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	609a      	str	r2, [r3, #8]

    Ot_Cmd_Transfer();
 800f9a2:	f004 ff89 	bl	80148b8 <Ot_Cmd_Transfer>

    p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800f9a6:	f004 ff6f 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800f9aa:	60f8      	str	r0, [r7, #12]
    return (otError) p_ot_req->Data[0];
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	b2db      	uxtb	r3, r3
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <otThreadSetEnabled>:
extern otHandleActiveScanResult otHandleActiveScanResultCb;
extern otReceiveDiagnosticGetCallback otReceiveDiagnosticGetCb;


OTAPI otError OTCALL otThreadSetEnabled(otInstance *aInstance, bool aEnabled)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	70fb      	strb	r3, [r7, #3]
  Pre_OtCmdProcessing();
 800f9c6:	f004 ffb5 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800f9ca:	f004 ff51 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800f9ce:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_ENABLED;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 800f9d8:	701a      	strb	r2, [r3, #0]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	705a      	strb	r2, [r3, #1]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	709a      	strb	r2, [r3, #2]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f042 0201 	orr.w	r2, r2, #1
 800f9ee:	711a      	strb	r2, [r3, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	715a      	strb	r2, [r3, #5]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	719a      	strb	r2, [r3, #6]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aEnabled;
 800f9fc:	78fa      	ldrb	r2, [r7, #3]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800fa02:	f004 ff59 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fa06:	f004 ff3f 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fa0a:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	b2db      	uxtb	r3, r3
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <otThreadSetChildTimeout>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI void OTCALL otThreadSetChildTimeout(otInstance *aInstance, uint32_t aTimeout)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800fa24:	f004 ff86 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fa28:	f004 ff22 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800fa2c:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_CHILD_TIMEOUT;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800fa36:	701a      	strb	r2, [r3, #0]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	705a      	strb	r2, [r3, #1]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	709a      	strb	r2, [r3, #2]
 800fa40:	2200      	movs	r2, #0
 800fa42:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f042 0201 	orr.w	r2, r2, #1
 800fa4c:	711a      	strb	r2, [r3, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	715a      	strb	r2, [r3, #5]
 800fa52:	2200      	movs	r2, #0
 800fa54:	719a      	strb	r2, [r3, #6]
 800fa56:	2200      	movs	r2, #0
 800fa58:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t)aTimeout;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	683a      	ldr	r2, [r7, #0]
 800fa5e:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800fa60:	f004 ff2a 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fa64:	f004 ff10 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fa68:	60f8      	str	r0, [r7, #12]
}
 800fa6a:	bf00      	nop
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <otThreadGetMeshLocalEid>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI const otIp6Address *OTCALL otThreadGetMeshLocalEid(otInstance *aInstance)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b084      	sub	sp, #16
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800fa7a:	f004 ff5b 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fa7e:	f004 fef7 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800fa82:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_MESH_LOCAL_EID;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2200      	movs	r2, #0
 800fa88:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 800fa8c:	701a      	strb	r2, [r3, #0]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	705a      	strb	r2, [r3, #1]
 800fa92:	2200      	movs	r2, #0
 800fa94:	709a      	strb	r2, [r3, #2]
 800fa96:	2200      	movs	r2, #0
 800fa98:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	711a      	strb	r2, [r3, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	715a      	strb	r2, [r3, #5]
 800faa4:	2200      	movs	r2, #0
 800faa6:	719a      	strb	r2, [r3, #6]
 800faa8:	2200      	movs	r2, #0
 800faaa:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800faac:	f004 ff04 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fab0:	f004 feea 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fab4:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	689b      	ldr	r3, [r3, #8]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <otThreadGetLinkLocalIp6Address>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

const otIp6Address *otThreadGetLinkLocalIp6Address(otInstance *aInstance)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b084      	sub	sp, #16
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800faca:	f004 ff33 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800face:	f004 fecf 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800fad2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_LINK_LOCAL_IP6_ADDRESS;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 800fadc:	701a      	strb	r2, [r3, #0]
 800fade:	2200      	movs	r2, #0
 800fae0:	705a      	strb	r2, [r3, #1]
 800fae2:	2200      	movs	r2, #0
 800fae4:	709a      	strb	r2, [r3, #2]
 800fae6:	2200      	movs	r2, #0
 800fae8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2200      	movs	r2, #0
 800faee:	711a      	strb	r2, [r3, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	715a      	strb	r2, [r3, #5]
 800faf4:	2200      	movs	r2, #0
 800faf6:	719a      	strb	r2, [r3, #6]
 800faf8:	2200      	movs	r2, #0
 800fafa:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800fafc:	f004 fedc 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fb00:	f004 fec2 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fb04:	60f8      	str	r0, [r7, #12]
  return (otIp6Address *)p_ot_req->Data[0];
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	689b      	ldr	r3, [r3, #8]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3710      	adds	r7, #16
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <otThreadSetNetworkName>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (char *)p_ot_req->Data[0];
}

OTAPI otError OTCALL otThreadSetNetworkName(otInstance *aInstance, const char *aNetworkName)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b084      	sub	sp, #16
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
 800fb1a:	6039      	str	r1, [r7, #0]
  Pre_OtCmdProcessing();
 800fb1c:	f004 ff0a 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fb20:	f004 fea6 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800fb24:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_SET_NETWORK_NAME;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f042 0256 	orr.w	r2, r2, #86	; 0x56
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	2200      	movs	r2, #0
 800fb32:	705a      	strb	r2, [r3, #1]
 800fb34:	2200      	movs	r2, #0
 800fb36:	709a      	strb	r2, [r3, #2]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=1;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f042 0201 	orr.w	r2, r2, #1
 800fb44:	711a      	strb	r2, [r3, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	715a      	strb	r2, [r3, #5]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	719a      	strb	r2, [r3, #6]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	71da      	strb	r2, [r3, #7]
  p_ot_req->Data[0] = (uint32_t) aNetworkName;
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	609a      	str	r2, [r3, #8]

  Ot_Cmd_Transfer();
 800fb58:	f004 feae 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fb5c:	f004 fe94 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fb60:	60f8      	str	r0, [r7, #12]
  return (otError)p_ot_req->Data[0];
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	b2db      	uxtb	r3, r3
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <otThreadGetDeviceRole>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (otError)p_ot_req->Data[0];
}

OTAPI otDeviceRole OTCALL otThreadGetDeviceRole(otInstance *aInstance)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800fb78:	f004 fedc 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fb7c:	f004 fe78 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800fb80:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_DEVICE_ROLE;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f042 025e 	orr.w	r2, r2, #94	; 0x5e
 800fb8a:	701a      	strb	r2, [r3, #0]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	705a      	strb	r2, [r3, #1]
 800fb90:	2200      	movs	r2, #0
 800fb92:	709a      	strb	r2, [r3, #2]
 800fb94:	2200      	movs	r2, #0
 800fb96:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	711a      	strb	r2, [r3, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	715a      	strb	r2, [r3, #5]
 800fba2:	2200      	movs	r2, #0
 800fba4:	719a      	strb	r2, [r3, #6]
 800fba6:	2200      	movs	r2, #0
 800fba8:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800fbaa:	f004 fe85 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fbae:	f004 fe6b 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fbb2:	60f8      	str	r0, [r7, #12]
  return (otDeviceRole)p_ot_req->Data[0];
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	b2db      	uxtb	r3, r3
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <otThreadGetRloc16>:
  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
  return (uint32_t)p_ot_req->Data[0];
}

OTAPI uint16_t OTCALL otThreadGetRloc16(otInstance *aInstance)
{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b084      	sub	sp, #16
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
  Pre_OtCmdProcessing();
 800fbca:	f004 feb3 	bl	8014934 <Pre_OtCmdProcessing>
  /* prepare buffer */
  Thread_OT_Cmd_Request_t* p_ot_req = THREAD_Get_OTCmdPayloadBuffer();
 800fbce:	f004 fe4f 	bl	8014870 <THREAD_Get_OTCmdPayloadBuffer>
 800fbd2:	60f8      	str	r0, [r7, #12]

  p_ot_req->ID = MSG_M4TOM0_OT_THREAD_GET_RLOC_16;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fbdc:	701a      	strb	r2, [r3, #0]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	705a      	strb	r2, [r3, #1]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	709a      	strb	r2, [r3, #2]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	70da      	strb	r2, [r3, #3]

  p_ot_req->Size=0;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2200      	movs	r2, #0
 800fbee:	711a      	strb	r2, [r3, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	715a      	strb	r2, [r3, #5]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	719a      	strb	r2, [r3, #6]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	71da      	strb	r2, [r3, #7]

  Ot_Cmd_Transfer();
 800fbfc:	f004 fe5c 	bl	80148b8 <Ot_Cmd_Transfer>

  p_ot_req = THREAD_Get_OTCmdRspPayloadBuffer();
 800fc00:	f004 fe42 	bl	8014888 <THREAD_Get_OTCmdRspPayloadBuffer>
 800fc04:	60f8      	str	r0, [r7, #12]
  return (uint16_t)p_ot_req->Data[0];
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	b29b      	uxth	r3, r3
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	605a      	str	r2, [r3, #4]
}
 800fc28:	bf00      	nop
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b087      	sub	sp, #28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc3c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc40:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc46:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d102      	bne.n	800fc58 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800fc52:	2301      	movs	r3, #1
 800fc54:	75fb      	strb	r3, [r7, #23]
 800fc56:	e001      	b.n	800fc5c <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800fc58:	2300      	movs	r3, #0
 800fc5a:	75fb      	strb	r3, [r7, #23]
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	371c      	adds	r7, #28
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b087      	sub	sp, #28
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc7e:	f3ef 8310 	mrs	r3, PRIMASK
 800fc82:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc84:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc88:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	683a      	ldr	r2, [r7, #0]
 800fca4:	605a      	str	r2, [r3, #4]
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fcb0:	bf00      	nop
 800fcb2:	371c      	adds	r7, #28
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b087      	sub	sp, #28
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcc6:	f3ef 8310 	mrs	r3, PRIMASK
 800fcca:	60fb      	str	r3, [r7, #12]
  return(result);
 800fccc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fcce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fcd0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	683a      	ldr	r2, [r7, #0]
 800fce4:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	683a      	ldr	r2, [r7, #0]
 800fcec:	601a      	str	r2, [r3, #0]
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fcf8:	bf00      	nop
 800fcfa:	371c      	adds	r7, #28
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b087      	sub	sp, #28
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd0c:	f3ef 8310 	mrs	r3, PRIMASK
 800fd10:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd16:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	6812      	ldr	r2, [r2, #0]
 800fd20:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	6852      	ldr	r2, [r2, #4]
 800fd2a:	605a      	str	r2, [r3, #4]
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fd36:	bf00      	nop
 800fd38:	371c      	adds	r7, #28
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr

0800fd42 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800fd42:	b580      	push	{r7, lr}
 800fd44:	b086      	sub	sp, #24
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	6078      	str	r0, [r7, #4]
 800fd4a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd4c:	f3ef 8310 	mrs	r3, PRIMASK
 800fd50:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd52:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fd54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd56:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7ff ffcd 	bl	800fd04 <LST_remove_node>
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fd74:	bf00      	nop
 800fd76:	3718      	adds	r7, #24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fd7c:	b480      	push	{r7}
 800fd7e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fd80:	bf00      	nop
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr
	...

0800fd8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fd8c:	b480      	push	{r7}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd92:	f3ef 8305 	mrs	r3, IPSR
 800fd96:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10f      	bne.n	800fdbe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd9e:	f3ef 8310 	mrs	r3, PRIMASK
 800fda2:	607b      	str	r3, [r7, #4]
  return(result);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d105      	bne.n	800fdb6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fdaa:	f3ef 8311 	mrs	r3, BASEPRI
 800fdae:	603b      	str	r3, [r7, #0]
  return(result);
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d007      	beq.n	800fdc6 <osKernelInitialize+0x3a>
 800fdb6:	4b0e      	ldr	r3, [pc, #56]	; (800fdf0 <osKernelInitialize+0x64>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b02      	cmp	r3, #2
 800fdbc:	d103      	bne.n	800fdc6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fdbe:	f06f 0305 	mvn.w	r3, #5
 800fdc2:	60fb      	str	r3, [r7, #12]
 800fdc4:	e00c      	b.n	800fde0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fdc6:	4b0a      	ldr	r3, [pc, #40]	; (800fdf0 <osKernelInitialize+0x64>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d105      	bne.n	800fdda <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fdce:	4b08      	ldr	r3, [pc, #32]	; (800fdf0 <osKernelInitialize+0x64>)
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	60fb      	str	r3, [r7, #12]
 800fdd8:	e002      	b.n	800fde0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fdda:	f04f 33ff 	mov.w	r3, #4294967295
 800fdde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fde0:	68fb      	ldr	r3, [r7, #12]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3714      	adds	r7, #20
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	2000045c 	.word	0x2000045c

0800fdf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdfa:	f3ef 8305 	mrs	r3, IPSR
 800fdfe:	60bb      	str	r3, [r7, #8]
  return(result);
 800fe00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10f      	bne.n	800fe26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe06:	f3ef 8310 	mrs	r3, PRIMASK
 800fe0a:	607b      	str	r3, [r7, #4]
  return(result);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d105      	bne.n	800fe1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe12:	f3ef 8311 	mrs	r3, BASEPRI
 800fe16:	603b      	str	r3, [r7, #0]
  return(result);
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d007      	beq.n	800fe2e <osKernelStart+0x3a>
 800fe1e:	4b0f      	ldr	r3, [pc, #60]	; (800fe5c <osKernelStart+0x68>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b02      	cmp	r3, #2
 800fe24:	d103      	bne.n	800fe2e <osKernelStart+0x3a>
    stat = osErrorISR;
 800fe26:	f06f 0305 	mvn.w	r3, #5
 800fe2a:	60fb      	str	r3, [r7, #12]
 800fe2c:	e010      	b.n	800fe50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fe2e:	4b0b      	ldr	r3, [pc, #44]	; (800fe5c <osKernelStart+0x68>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d109      	bne.n	800fe4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fe36:	f7ff ffa1 	bl	800fd7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fe3a:	4b08      	ldr	r3, [pc, #32]	; (800fe5c <osKernelStart+0x68>)
 800fe3c:	2202      	movs	r2, #2
 800fe3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fe40:	f002 f944 	bl	80120cc <vTaskStartScheduler>
      stat = osOK;
 800fe44:	2300      	movs	r3, #0
 800fe46:	60fb      	str	r3, [r7, #12]
 800fe48:	e002      	b.n	800fe50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800fe4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fe50:	68fb      	ldr	r3, [r7, #12]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	2000045c 	.word	0x2000045c

0800fe60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b090      	sub	sp, #64	; 0x40
 800fe64:	af04      	add	r7, sp, #16
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe70:	f3ef 8305 	mrs	r3, IPSR
 800fe74:	61fb      	str	r3, [r7, #28]
  return(result);
 800fe76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f040 8090 	bne.w	800ff9e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe7e:	f3ef 8310 	mrs	r3, PRIMASK
 800fe82:	61bb      	str	r3, [r7, #24]
  return(result);
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d105      	bne.n	800fe96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe8a:	f3ef 8311 	mrs	r3, BASEPRI
 800fe8e:	617b      	str	r3, [r7, #20]
  return(result);
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d003      	beq.n	800fe9e <osThreadNew+0x3e>
 800fe96:	4b44      	ldr	r3, [pc, #272]	; (800ffa8 <osThreadNew+0x148>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	d07f      	beq.n	800ff9e <osThreadNew+0x13e>
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d07c      	beq.n	800ff9e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800fea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fea8:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800feaa:	2318      	movs	r3, #24
 800feac:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800feae:	2300      	movs	r3, #0
 800feb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800feb2:	f04f 33ff 	mov.w	r3, #4294967295
 800feb6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d045      	beq.n	800ff4a <osThreadNew+0xea>
      if (attr->name != NULL) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d002      	beq.n	800fecc <osThreadNew+0x6c>
        name = attr->name;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	699b      	ldr	r3, [r3, #24]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	699b      	ldr	r3, [r3, #24]
 800fed8:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d008      	beq.n	800fef2 <osThreadNew+0x92>
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	2b38      	cmp	r3, #56	; 0x38
 800fee4:	d805      	bhi.n	800fef2 <osThreadNew+0x92>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <osThreadNew+0x96>
        return (NULL);
 800fef2:	2300      	movs	r3, #0
 800fef4:	e054      	b.n	800ffa0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	695b      	ldr	r3, [r3, #20]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d003      	beq.n	800ff06 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	695b      	ldr	r3, [r3, #20]
 800ff02:	089b      	lsrs	r3, r3, #2
 800ff04:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00e      	beq.n	800ff2c <osThreadNew+0xcc>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	2b5b      	cmp	r3, #91	; 0x5b
 800ff14:	d90a      	bls.n	800ff2c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d006      	beq.n	800ff2c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	695b      	ldr	r3, [r3, #20]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d002      	beq.n	800ff2c <osThreadNew+0xcc>
        mem = 1;
 800ff26:	2301      	movs	r3, #1
 800ff28:	623b      	str	r3, [r7, #32]
 800ff2a:	e010      	b.n	800ff4e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	689b      	ldr	r3, [r3, #8]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d10c      	bne.n	800ff4e <osThreadNew+0xee>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d108      	bne.n	800ff4e <osThreadNew+0xee>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	691b      	ldr	r3, [r3, #16]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d104      	bne.n	800ff4e <osThreadNew+0xee>
          mem = 0;
 800ff44:	2300      	movs	r3, #0
 800ff46:	623b      	str	r3, [r7, #32]
 800ff48:	e001      	b.n	800ff4e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ff4e:	6a3b      	ldr	r3, [r7, #32]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d110      	bne.n	800ff76 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ff5c:	9202      	str	r2, [sp, #8]
 800ff5e:	9301      	str	r3, [sp, #4]
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f001 fedc 	bl	8011d28 <xTaskCreateStatic>
 800ff70:	4603      	mov	r3, r0
 800ff72:	613b      	str	r3, [r7, #16]
 800ff74:	e013      	b.n	800ff9e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ff76:	6a3b      	ldr	r3, [r7, #32]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d110      	bne.n	800ff9e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ff7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	f107 0310 	add.w	r3, r7, #16
 800ff84:	9301      	str	r3, [sp, #4]
 800ff86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff88:	9300      	str	r3, [sp, #0]
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f001 ff24 	bl	8011ddc <xTaskCreate>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d001      	beq.n	800ff9e <osThreadNew+0x13e>
          hTask = NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ff9e:	693b      	ldr	r3, [r7, #16]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3730      	adds	r7, #48	; 0x30
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	2000045c 	.word	0x2000045c

0800ffac <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b08a      	sub	sp, #40	; 0x28
 800ffb0:	af02      	add	r7, sp, #8
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d002      	beq.n	800ffc6 <osThreadFlagsSet+0x1a>
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	da03      	bge.n	800ffce <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ffc6:	f06f 0303 	mvn.w	r3, #3
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	e046      	b.n	801005c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800ffce:	f04f 33ff 	mov.w	r3, #4294967295
 800ffd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffd4:	f3ef 8305 	mrs	r3, IPSR
 800ffd8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ffda:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d10f      	bne.n	8010000 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffe0:	f3ef 8310 	mrs	r3, PRIMASK
 800ffe4:	617b      	str	r3, [r7, #20]
  return(result);
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d105      	bne.n	800fff8 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffec:	f3ef 8311 	mrs	r3, BASEPRI
 800fff0:	613b      	str	r3, [r7, #16]
  return(result);
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d024      	beq.n	8010042 <osThreadFlagsSet+0x96>
 800fff8:	4b1b      	ldr	r3, [pc, #108]	; (8010068 <osThreadFlagsSet+0xbc>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d120      	bne.n	8010042 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8010000:	2300      	movs	r3, #0
 8010002:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8010004:	f107 0308 	add.w	r3, r7, #8
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	2300      	movs	r3, #0
 801000c:	2201      	movs	r2, #1
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	69f8      	ldr	r0, [r7, #28]
 8010012:	f002 ff97 	bl	8012f44 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8010016:	f107 020c 	add.w	r2, r7, #12
 801001a:	2300      	movs	r3, #0
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	4613      	mov	r3, r2
 8010020:	2200      	movs	r2, #0
 8010022:	2100      	movs	r1, #0
 8010024:	69f8      	ldr	r0, [r7, #28]
 8010026:	f002 ff8d 	bl	8012f44 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d015      	beq.n	801005c <osThreadFlagsSet+0xb0>
 8010030:	4b0e      	ldr	r3, [pc, #56]	; (801006c <osThreadFlagsSet+0xc0>)
 8010032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010036:	601a      	str	r2, [r3, #0]
 8010038:	f3bf 8f4f 	dsb	sy
 801003c:	f3bf 8f6f 	isb	sy
 8010040:	e00c      	b.n	801005c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8010042:	2300      	movs	r3, #0
 8010044:	2201      	movs	r2, #1
 8010046:	6839      	ldr	r1, [r7, #0]
 8010048:	69f8      	ldr	r0, [r7, #28]
 801004a:	f002 fec5 	bl	8012dd8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801004e:	f107 030c 	add.w	r3, r7, #12
 8010052:	2200      	movs	r2, #0
 8010054:	2100      	movs	r1, #0
 8010056:	69f8      	ldr	r0, [r7, #28]
 8010058:	f002 febe 	bl	8012dd8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801005c:	68fb      	ldr	r3, [r7, #12]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3720      	adds	r7, #32
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	2000045c 	.word	0x2000045c
 801006c:	e000ed04 	.word	0xe000ed04

08010070 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8010070:	b580      	push	{r7, lr}
 8010072:	b08e      	sub	sp, #56	; 0x38
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801007c:	f3ef 8305 	mrs	r3, IPSR
 8010080:	61fb      	str	r3, [r7, #28]
  return(result);
 8010082:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8010084:	2b00      	cmp	r3, #0
 8010086:	d10f      	bne.n	80100a8 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010088:	f3ef 8310 	mrs	r3, PRIMASK
 801008c:	61bb      	str	r3, [r7, #24]
  return(result);
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d105      	bne.n	80100a0 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010094:	f3ef 8311 	mrs	r3, BASEPRI
 8010098:	617b      	str	r3, [r7, #20]
  return(result);
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d007      	beq.n	80100b0 <osThreadFlagsWait+0x40>
 80100a0:	4b3c      	ldr	r3, [pc, #240]	; (8010194 <osThreadFlagsWait+0x124>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d103      	bne.n	80100b0 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80100a8:	f06f 0305 	mvn.w	r3, #5
 80100ac:	637b      	str	r3, [r7, #52]	; 0x34
 80100ae:	e06b      	b.n	8010188 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	da03      	bge.n	80100be <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80100b6:	f06f 0303 	mvn.w	r3, #3
 80100ba:	637b      	str	r3, [r7, #52]	; 0x34
 80100bc:	e064      	b.n	8010188 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	f003 0302 	and.w	r3, r3, #2
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <osThreadFlagsWait+0x5e>
      clear = 0U;
 80100c8:	2300      	movs	r3, #0
 80100ca:	633b      	str	r3, [r7, #48]	; 0x30
 80100cc:	e001      	b.n	80100d2 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80100d2:	2300      	movs	r3, #0
 80100d4:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80100da:	f002 f93d 	bl	8012358 <xTaskGetTickCount>
 80100de:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80100e0:	f107 0210 	add.w	r2, r7, #16
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100e8:	2000      	movs	r0, #0
 80100ea:	f002 fe1b 	bl	8012d24 <xTaskNotifyWait>
 80100ee:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80100f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d137      	bne.n	8010166 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80100f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	4013      	ands	r3, r2
 80100fc:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010102:	4313      	orrs	r3, r2
 8010104:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00c      	beq.n	801012a <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010114:	4013      	ands	r3, r2
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	429a      	cmp	r2, r3
 801011a:	d032      	beq.n	8010182 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d10f      	bne.n	8010142 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8010122:	f06f 0302 	mvn.w	r3, #2
 8010126:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8010128:	e02e      	b.n	8010188 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	4013      	ands	r3, r2
 8010130:	2b00      	cmp	r3, #0
 8010132:	d128      	bne.n	8010186 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d103      	bne.n	8010142 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801013a:	f06f 0302 	mvn.w	r3, #2
 801013e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8010140:	e022      	b.n	8010188 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8010142:	f002 f909 	bl	8012358 <xTaskGetTickCount>
 8010146:	4602      	mov	r2, r0
 8010148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 801014e:	6a3a      	ldr	r2, [r7, #32]
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	429a      	cmp	r2, r3
 8010154:	d902      	bls.n	801015c <osThreadFlagsWait+0xec>
          tout  = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	62fb      	str	r3, [r7, #44]	; 0x2c
 801015a:	e00e      	b.n	801017a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 801015c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010164:	e009      	b.n	801017a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d103      	bne.n	8010174 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 801016c:	f06f 0302 	mvn.w	r3, #2
 8010170:	637b      	str	r3, [r7, #52]	; 0x34
 8010172:	e002      	b.n	801017a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8010174:	f06f 0301 	mvn.w	r3, #1
 8010178:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1af      	bne.n	80100e0 <osThreadFlagsWait+0x70>
 8010180:	e002      	b.n	8010188 <osThreadFlagsWait+0x118>
            break;
 8010182:	bf00      	nop
 8010184:	e000      	b.n	8010188 <osThreadFlagsWait+0x118>
            break;
 8010186:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8010188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801018a:	4618      	mov	r0, r3
 801018c:	3738      	adds	r7, #56	; 0x38
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	2000045c 	.word	0x2000045c

08010198 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101a0:	f3ef 8305 	mrs	r3, IPSR
 80101a4:	613b      	str	r3, [r7, #16]
  return(result);
 80101a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d10f      	bne.n	80101cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101ac:	f3ef 8310 	mrs	r3, PRIMASK
 80101b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d105      	bne.n	80101c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101b8:	f3ef 8311 	mrs	r3, BASEPRI
 80101bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d007      	beq.n	80101d4 <osDelay+0x3c>
 80101c4:	4b0a      	ldr	r3, [pc, #40]	; (80101f0 <osDelay+0x58>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2b02      	cmp	r3, #2
 80101ca:	d103      	bne.n	80101d4 <osDelay+0x3c>
    stat = osErrorISR;
 80101cc:	f06f 0305 	mvn.w	r3, #5
 80101d0:	617b      	str	r3, [r7, #20]
 80101d2:	e007      	b.n	80101e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80101d4:	2300      	movs	r3, #0
 80101d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d002      	beq.n	80101e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f001 ff40 	bl	8012064 <vTaskDelay>
    }
  }

  return (stat);
 80101e4:	697b      	ldr	r3, [r7, #20]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3718      	adds	r7, #24
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	2000045c 	.word	0x2000045c

080101f4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b08a      	sub	sp, #40	; 0x28
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80101fc:	2300      	movs	r3, #0
 80101fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010200:	f3ef 8305 	mrs	r3, IPSR
 8010204:	613b      	str	r3, [r7, #16]
  return(result);
 8010206:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8010208:	2b00      	cmp	r3, #0
 801020a:	f040 8085 	bne.w	8010318 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801020e:	f3ef 8310 	mrs	r3, PRIMASK
 8010212:	60fb      	str	r3, [r7, #12]
  return(result);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d105      	bne.n	8010226 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801021a:	f3ef 8311 	mrs	r3, BASEPRI
 801021e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d003      	beq.n	801022e <osMutexNew+0x3a>
 8010226:	4b3f      	ldr	r3, [pc, #252]	; (8010324 <osMutexNew+0x130>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b02      	cmp	r3, #2
 801022c:	d074      	beq.n	8010318 <osMutexNew+0x124>
    if (attr != NULL) {
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d003      	beq.n	801023c <osMutexNew+0x48>
      type = attr->attr_bits;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	623b      	str	r3, [r7, #32]
 801023a:	e001      	b.n	8010240 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801023c:	2300      	movs	r3, #0
 801023e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010240:	6a3b      	ldr	r3, [r7, #32]
 8010242:	f003 0301 	and.w	r3, r3, #1
 8010246:	2b00      	cmp	r3, #0
 8010248:	d002      	beq.n	8010250 <osMutexNew+0x5c>
      rmtx = 1U;
 801024a:	2301      	movs	r3, #1
 801024c:	61fb      	str	r3, [r7, #28]
 801024e:	e001      	b.n	8010254 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010250:	2300      	movs	r3, #0
 8010252:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010254:	6a3b      	ldr	r3, [r7, #32]
 8010256:	f003 0308 	and.w	r3, r3, #8
 801025a:	2b00      	cmp	r3, #0
 801025c:	d15c      	bne.n	8010318 <osMutexNew+0x124>
      mem = -1;
 801025e:	f04f 33ff 	mov.w	r3, #4294967295
 8010262:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d015      	beq.n	8010296 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d006      	beq.n	8010280 <osMutexNew+0x8c>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	2b4f      	cmp	r3, #79	; 0x4f
 8010278:	d902      	bls.n	8010280 <osMutexNew+0x8c>
          mem = 1;
 801027a:	2301      	movs	r3, #1
 801027c:	61bb      	str	r3, [r7, #24]
 801027e:	e00c      	b.n	801029a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d108      	bne.n	801029a <osMutexNew+0xa6>
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d104      	bne.n	801029a <osMutexNew+0xa6>
            mem = 0;
 8010290:	2300      	movs	r3, #0
 8010292:	61bb      	str	r3, [r7, #24]
 8010294:	e001      	b.n	801029a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8010296:	2300      	movs	r3, #0
 8010298:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	2b01      	cmp	r3, #1
 801029e:	d112      	bne.n	80102c6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d007      	beq.n	80102b6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	4619      	mov	r1, r3
 80102ac:	2004      	movs	r0, #4
 80102ae:	f000 fe08 	bl	8010ec2 <xQueueCreateMutexStatic>
 80102b2:	6278      	str	r0, [r7, #36]	; 0x24
 80102b4:	e016      	b.n	80102e4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	4619      	mov	r1, r3
 80102bc:	2001      	movs	r0, #1
 80102be:	f000 fe00 	bl	8010ec2 <xQueueCreateMutexStatic>
 80102c2:	6278      	str	r0, [r7, #36]	; 0x24
 80102c4:	e00e      	b.n	80102e4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d10b      	bne.n	80102e4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d004      	beq.n	80102dc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80102d2:	2004      	movs	r0, #4
 80102d4:	f000 fddd 	bl	8010e92 <xQueueCreateMutex>
 80102d8:	6278      	str	r0, [r7, #36]	; 0x24
 80102da:	e003      	b.n	80102e4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80102dc:	2001      	movs	r0, #1
 80102de:	f000 fdd8 	bl	8010e92 <xQueueCreateMutex>
 80102e2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d00c      	beq.n	8010304 <osMutexNew+0x110>
        if (attr != NULL) {
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d003      	beq.n	80102f8 <osMutexNew+0x104>
          name = attr->name;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	617b      	str	r3, [r7, #20]
 80102f6:	e001      	b.n	80102fc <osMutexNew+0x108>
        } else {
          name = NULL;
 80102f8:	2300      	movs	r3, #0
 80102fa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80102fc:	6979      	ldr	r1, [r7, #20]
 80102fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010300:	f001 fc8c 	bl	8011c1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <osMutexNew+0x124>
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d003      	beq.n	8010318 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	f043 0301 	orr.w	r3, r3, #1
 8010316:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801031a:	4618      	mov	r0, r3
 801031c:	3728      	adds	r7, #40	; 0x28
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	2000045c 	.word	0x2000045c

08010328 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010328:	b580      	push	{r7, lr}
 801032a:	b088      	sub	sp, #32
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f023 0301 	bic.w	r3, r3, #1
 8010338:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f003 0301 	and.w	r3, r3, #1
 8010340:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010342:	2300      	movs	r3, #0
 8010344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010346:	f3ef 8305 	mrs	r3, IPSR
 801034a:	613b      	str	r3, [r7, #16]
  return(result);
 801034c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801034e:	2b00      	cmp	r3, #0
 8010350:	d10f      	bne.n	8010372 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010352:	f3ef 8310 	mrs	r3, PRIMASK
 8010356:	60fb      	str	r3, [r7, #12]
  return(result);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d105      	bne.n	801036a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801035e:	f3ef 8311 	mrs	r3, BASEPRI
 8010362:	60bb      	str	r3, [r7, #8]
  return(result);
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d007      	beq.n	801037a <osMutexAcquire+0x52>
 801036a:	4b1d      	ldr	r3, [pc, #116]	; (80103e0 <osMutexAcquire+0xb8>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d103      	bne.n	801037a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010372:	f06f 0305 	mvn.w	r3, #5
 8010376:	61fb      	str	r3, [r7, #28]
 8010378:	e02c      	b.n	80103d4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d103      	bne.n	8010388 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010380:	f06f 0303 	mvn.w	r3, #3
 8010384:	61fb      	str	r3, [r7, #28]
 8010386:	e025      	b.n	80103d4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d011      	beq.n	80103b2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	69b8      	ldr	r0, [r7, #24]
 8010392:	f000 fde4 	bl	8010f5e <xQueueTakeMutexRecursive>
 8010396:	4603      	mov	r3, r0
 8010398:	2b01      	cmp	r3, #1
 801039a:	d01b      	beq.n	80103d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d003      	beq.n	80103aa <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80103a2:	f06f 0301 	mvn.w	r3, #1
 80103a6:	61fb      	str	r3, [r7, #28]
 80103a8:	e014      	b.n	80103d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80103aa:	f06f 0302 	mvn.w	r3, #2
 80103ae:	61fb      	str	r3, [r7, #28]
 80103b0:	e010      	b.n	80103d4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	69b8      	ldr	r0, [r7, #24]
 80103b6:	f001 f961 	bl	801167c <xQueueSemaphoreTake>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d009      	beq.n	80103d4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d003      	beq.n	80103ce <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80103c6:	f06f 0301 	mvn.w	r3, #1
 80103ca:	61fb      	str	r3, [r7, #28]
 80103cc:	e002      	b.n	80103d4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80103ce:	f06f 0302 	mvn.w	r3, #2
 80103d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80103d4:	69fb      	ldr	r3, [r7, #28]
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3720      	adds	r7, #32
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	2000045c 	.word	0x2000045c

080103e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b088      	sub	sp, #32
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f023 0301 	bic.w	r3, r3, #1
 80103f2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f003 0301 	and.w	r3, r3, #1
 80103fa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80103fc:	2300      	movs	r3, #0
 80103fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010400:	f3ef 8305 	mrs	r3, IPSR
 8010404:	613b      	str	r3, [r7, #16]
  return(result);
 8010406:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10f      	bne.n	801042c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801040c:	f3ef 8310 	mrs	r3, PRIMASK
 8010410:	60fb      	str	r3, [r7, #12]
  return(result);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d105      	bne.n	8010424 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010418:	f3ef 8311 	mrs	r3, BASEPRI
 801041c:	60bb      	str	r3, [r7, #8]
  return(result);
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d007      	beq.n	8010434 <osMutexRelease+0x50>
 8010424:	4b16      	ldr	r3, [pc, #88]	; (8010480 <osMutexRelease+0x9c>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2b02      	cmp	r3, #2
 801042a:	d103      	bne.n	8010434 <osMutexRelease+0x50>
    stat = osErrorISR;
 801042c:	f06f 0305 	mvn.w	r3, #5
 8010430:	61fb      	str	r3, [r7, #28]
 8010432:	e01f      	b.n	8010474 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d103      	bne.n	8010442 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801043a:	f06f 0303 	mvn.w	r3, #3
 801043e:	61fb      	str	r3, [r7, #28]
 8010440:	e018      	b.n	8010474 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d009      	beq.n	801045c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010448:	69b8      	ldr	r0, [r7, #24]
 801044a:	f000 fd55 	bl	8010ef8 <xQueueGiveMutexRecursive>
 801044e:	4603      	mov	r3, r0
 8010450:	2b01      	cmp	r3, #1
 8010452:	d00f      	beq.n	8010474 <osMutexRelease+0x90>
        stat = osErrorResource;
 8010454:	f06f 0302 	mvn.w	r3, #2
 8010458:	61fb      	str	r3, [r7, #28]
 801045a:	e00b      	b.n	8010474 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801045c:	2300      	movs	r3, #0
 801045e:	2200      	movs	r2, #0
 8010460:	2100      	movs	r1, #0
 8010462:	69b8      	ldr	r0, [r7, #24]
 8010464:	f000 fe16 	bl	8011094 <xQueueGenericSend>
 8010468:	4603      	mov	r3, r0
 801046a:	2b01      	cmp	r3, #1
 801046c:	d002      	beq.n	8010474 <osMutexRelease+0x90>
        stat = osErrorResource;
 801046e:	f06f 0302 	mvn.w	r3, #2
 8010472:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010474:	69fb      	ldr	r3, [r7, #28]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3720      	adds	r7, #32
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	2000045c 	.word	0x2000045c

08010484 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010484:	b580      	push	{r7, lr}
 8010486:	b08c      	sub	sp, #48	; 0x30
 8010488:	af02      	add	r7, sp, #8
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010490:	2300      	movs	r3, #0
 8010492:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010494:	f3ef 8305 	mrs	r3, IPSR
 8010498:	61bb      	str	r3, [r7, #24]
  return(result);
 801049a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801049c:	2b00      	cmp	r3, #0
 801049e:	f040 8087 	bne.w	80105b0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104a2:	f3ef 8310 	mrs	r3, PRIMASK
 80104a6:	617b      	str	r3, [r7, #20]
  return(result);
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d105      	bne.n	80104ba <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104ae:	f3ef 8311 	mrs	r3, BASEPRI
 80104b2:	613b      	str	r3, [r7, #16]
  return(result);
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d003      	beq.n	80104c2 <osSemaphoreNew+0x3e>
 80104ba:	4b40      	ldr	r3, [pc, #256]	; (80105bc <osSemaphoreNew+0x138>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2b02      	cmp	r3, #2
 80104c0:	d076      	beq.n	80105b0 <osSemaphoreNew+0x12c>
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d073      	beq.n	80105b0 <osSemaphoreNew+0x12c>
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d86f      	bhi.n	80105b0 <osSemaphoreNew+0x12c>
    mem = -1;
 80104d0:	f04f 33ff 	mov.w	r3, #4294967295
 80104d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d015      	beq.n	8010508 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	689b      	ldr	r3, [r3, #8]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d006      	beq.n	80104f2 <osSemaphoreNew+0x6e>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	2b4f      	cmp	r3, #79	; 0x4f
 80104ea:	d902      	bls.n	80104f2 <osSemaphoreNew+0x6e>
        mem = 1;
 80104ec:	2301      	movs	r3, #1
 80104ee:	623b      	str	r3, [r7, #32]
 80104f0:	e00c      	b.n	801050c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	689b      	ldr	r3, [r3, #8]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d108      	bne.n	801050c <osSemaphoreNew+0x88>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d104      	bne.n	801050c <osSemaphoreNew+0x88>
          mem = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	623b      	str	r3, [r7, #32]
 8010506:	e001      	b.n	801050c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010508:	2300      	movs	r3, #0
 801050a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010512:	d04d      	beq.n	80105b0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2b01      	cmp	r3, #1
 8010518:	d129      	bne.n	801056e <osSemaphoreNew+0xea>
        if (mem == 1) {
 801051a:	6a3b      	ldr	r3, [r7, #32]
 801051c:	2b01      	cmp	r3, #1
 801051e:	d10b      	bne.n	8010538 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	689a      	ldr	r2, [r3, #8]
 8010524:	2303      	movs	r3, #3
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	4613      	mov	r3, r2
 801052a:	2200      	movs	r2, #0
 801052c:	2100      	movs	r1, #0
 801052e:	2001      	movs	r0, #1
 8010530:	f000 fbc0 	bl	8010cb4 <xQueueGenericCreateStatic>
 8010534:	6278      	str	r0, [r7, #36]	; 0x24
 8010536:	e005      	b.n	8010544 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010538:	2203      	movs	r2, #3
 801053a:	2100      	movs	r1, #0
 801053c:	2001      	movs	r0, #1
 801053e:	f000 fc2c 	bl	8010d9a <xQueueGenericCreate>
 8010542:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010546:	2b00      	cmp	r3, #0
 8010548:	d022      	beq.n	8010590 <osSemaphoreNew+0x10c>
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d01f      	beq.n	8010590 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010550:	2300      	movs	r3, #0
 8010552:	2200      	movs	r2, #0
 8010554:	2100      	movs	r1, #0
 8010556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010558:	f000 fd9c 	bl	8011094 <xQueueGenericSend>
 801055c:	4603      	mov	r3, r0
 801055e:	2b01      	cmp	r3, #1
 8010560:	d016      	beq.n	8010590 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010564:	f001 fa0f 	bl	8011986 <vQueueDelete>
            hSemaphore = NULL;
 8010568:	2300      	movs	r3, #0
 801056a:	627b      	str	r3, [r7, #36]	; 0x24
 801056c:	e010      	b.n	8010590 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801056e:	6a3b      	ldr	r3, [r7, #32]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d108      	bne.n	8010586 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	461a      	mov	r2, r3
 801057a:	68b9      	ldr	r1, [r7, #8]
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f000 fd23 	bl	8010fc8 <xQueueCreateCountingSemaphoreStatic>
 8010582:	6278      	str	r0, [r7, #36]	; 0x24
 8010584:	e004      	b.n	8010590 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010586:	68b9      	ldr	r1, [r7, #8]
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f000 fd52 	bl	8011032 <xQueueCreateCountingSemaphore>
 801058e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00c      	beq.n	80105b0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d003      	beq.n	80105a4 <osSemaphoreNew+0x120>
          name = attr->name;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	61fb      	str	r3, [r7, #28]
 80105a2:	e001      	b.n	80105a8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80105a4:	2300      	movs	r3, #0
 80105a6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80105a8:	69f9      	ldr	r1, [r7, #28]
 80105aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105ac:	f001 fb36 	bl	8011c1c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3728      	adds	r7, #40	; 0x28
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	2000045c 	.word	0x2000045c

080105c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b088      	sub	sp, #32
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80105ce:	2300      	movs	r3, #0
 80105d0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d103      	bne.n	80105e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80105d8:	f06f 0303 	mvn.w	r3, #3
 80105dc:	61fb      	str	r3, [r7, #28]
 80105de:	e04b      	b.n	8010678 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105e0:	f3ef 8305 	mrs	r3, IPSR
 80105e4:	617b      	str	r3, [r7, #20]
  return(result);
 80105e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10f      	bne.n	801060c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105ec:	f3ef 8310 	mrs	r3, PRIMASK
 80105f0:	613b      	str	r3, [r7, #16]
  return(result);
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d105      	bne.n	8010604 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105f8:	f3ef 8311 	mrs	r3, BASEPRI
 80105fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d026      	beq.n	8010652 <osSemaphoreAcquire+0x92>
 8010604:	4b1f      	ldr	r3, [pc, #124]	; (8010684 <osSemaphoreAcquire+0xc4>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b02      	cmp	r3, #2
 801060a:	d122      	bne.n	8010652 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d003      	beq.n	801061a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8010612:	f06f 0303 	mvn.w	r3, #3
 8010616:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010618:	e02d      	b.n	8010676 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801061a:	2300      	movs	r3, #0
 801061c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801061e:	f107 0308 	add.w	r3, r7, #8
 8010622:	461a      	mov	r2, r3
 8010624:	2100      	movs	r1, #0
 8010626:	69b8      	ldr	r0, [r7, #24]
 8010628:	f001 f930 	bl	801188c <xQueueReceiveFromISR>
 801062c:	4603      	mov	r3, r0
 801062e:	2b01      	cmp	r3, #1
 8010630:	d003      	beq.n	801063a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8010632:	f06f 0302 	mvn.w	r3, #2
 8010636:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010638:	e01d      	b.n	8010676 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d01a      	beq.n	8010676 <osSemaphoreAcquire+0xb6>
 8010640:	4b11      	ldr	r3, [pc, #68]	; (8010688 <osSemaphoreAcquire+0xc8>)
 8010642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010646:	601a      	str	r2, [r3, #0]
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010650:	e011      	b.n	8010676 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	69b8      	ldr	r0, [r7, #24]
 8010656:	f001 f811 	bl	801167c <xQueueSemaphoreTake>
 801065a:	4603      	mov	r3, r0
 801065c:	2b01      	cmp	r3, #1
 801065e:	d00b      	beq.n	8010678 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d003      	beq.n	801066e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010666:	f06f 0301 	mvn.w	r3, #1
 801066a:	61fb      	str	r3, [r7, #28]
 801066c:	e004      	b.n	8010678 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801066e:	f06f 0302 	mvn.w	r3, #2
 8010672:	61fb      	str	r3, [r7, #28]
 8010674:	e000      	b.n	8010678 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010676:	bf00      	nop
      }
    }
  }

  return (stat);
 8010678:	69fb      	ldr	r3, [r7, #28]
}
 801067a:	4618      	mov	r0, r3
 801067c:	3720      	adds	r7, #32
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	2000045c 	.word	0x2000045c
 8010688:	e000ed04 	.word	0xe000ed04

0801068c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801068c:	b580      	push	{r7, lr}
 801068e:	b088      	sub	sp, #32
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010698:	2300      	movs	r3, #0
 801069a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d103      	bne.n	80106aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80106a2:	f06f 0303 	mvn.w	r3, #3
 80106a6:	61fb      	str	r3, [r7, #28]
 80106a8:	e03e      	b.n	8010728 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106aa:	f3ef 8305 	mrs	r3, IPSR
 80106ae:	617b      	str	r3, [r7, #20]
  return(result);
 80106b0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d10f      	bne.n	80106d6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106b6:	f3ef 8310 	mrs	r3, PRIMASK
 80106ba:	613b      	str	r3, [r7, #16]
  return(result);
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d105      	bne.n	80106ce <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80106c2:	f3ef 8311 	mrs	r3, BASEPRI
 80106c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d01e      	beq.n	801070c <osSemaphoreRelease+0x80>
 80106ce:	4b19      	ldr	r3, [pc, #100]	; (8010734 <osSemaphoreRelease+0xa8>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d11a      	bne.n	801070c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80106d6:	2300      	movs	r3, #0
 80106d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106da:	f107 0308 	add.w	r3, r7, #8
 80106de:	4619      	mov	r1, r3
 80106e0:	69b8      	ldr	r0, [r7, #24]
 80106e2:	f000 fe65 	bl	80113b0 <xQueueGiveFromISR>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d003      	beq.n	80106f4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80106ec:	f06f 0302 	mvn.w	r3, #2
 80106f0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106f2:	e018      	b.n	8010726 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d015      	beq.n	8010726 <osSemaphoreRelease+0x9a>
 80106fa:	4b0f      	ldr	r3, [pc, #60]	; (8010738 <osSemaphoreRelease+0xac>)
 80106fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010700:	601a      	str	r2, [r3, #0]
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801070a:	e00c      	b.n	8010726 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801070c:	2300      	movs	r3, #0
 801070e:	2200      	movs	r2, #0
 8010710:	2100      	movs	r1, #0
 8010712:	69b8      	ldr	r0, [r7, #24]
 8010714:	f000 fcbe 	bl	8011094 <xQueueGenericSend>
 8010718:	4603      	mov	r3, r0
 801071a:	2b01      	cmp	r3, #1
 801071c:	d004      	beq.n	8010728 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801071e:	f06f 0302 	mvn.w	r3, #2
 8010722:	61fb      	str	r3, [r7, #28]
 8010724:	e000      	b.n	8010728 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010726:	bf00      	nop
    }
  }

  return (stat);
 8010728:	69fb      	ldr	r3, [r7, #28]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3720      	adds	r7, #32
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	2000045c 	.word	0x2000045c
 8010738:	e000ed04 	.word	0xe000ed04

0801073c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801073c:	b580      	push	{r7, lr}
 801073e:	b08c      	sub	sp, #48	; 0x30
 8010740:	af02      	add	r7, sp, #8
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010748:	2300      	movs	r3, #0
 801074a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801074c:	f3ef 8305 	mrs	r3, IPSR
 8010750:	61bb      	str	r3, [r7, #24]
  return(result);
 8010752:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010754:	2b00      	cmp	r3, #0
 8010756:	d170      	bne.n	801083a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010758:	f3ef 8310 	mrs	r3, PRIMASK
 801075c:	617b      	str	r3, [r7, #20]
  return(result);
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d105      	bne.n	8010770 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010764:	f3ef 8311 	mrs	r3, BASEPRI
 8010768:	613b      	str	r3, [r7, #16]
  return(result);
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d003      	beq.n	8010778 <osMessageQueueNew+0x3c>
 8010770:	4b34      	ldr	r3, [pc, #208]	; (8010844 <osMessageQueueNew+0x108>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b02      	cmp	r3, #2
 8010776:	d060      	beq.n	801083a <osMessageQueueNew+0xfe>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d05d      	beq.n	801083a <osMessageQueueNew+0xfe>
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d05a      	beq.n	801083a <osMessageQueueNew+0xfe>
    mem = -1;
 8010784:	f04f 33ff 	mov.w	r3, #4294967295
 8010788:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d029      	beq.n	80107e4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	689b      	ldr	r3, [r3, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d012      	beq.n	80107be <osMessageQueueNew+0x82>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	68db      	ldr	r3, [r3, #12]
 801079c:	2b4f      	cmp	r3, #79	; 0x4f
 801079e:	d90e      	bls.n	80107be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00a      	beq.n	80107be <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	695a      	ldr	r2, [r3, #20]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	68b9      	ldr	r1, [r7, #8]
 80107b0:	fb01 f303 	mul.w	r3, r1, r3
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d302      	bcc.n	80107be <osMessageQueueNew+0x82>
        mem = 1;
 80107b8:	2301      	movs	r3, #1
 80107ba:	623b      	str	r3, [r7, #32]
 80107bc:	e014      	b.n	80107e8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d110      	bne.n	80107e8 <osMessageQueueNew+0xac>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d10c      	bne.n	80107e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d108      	bne.n	80107e8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d104      	bne.n	80107e8 <osMessageQueueNew+0xac>
          mem = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	623b      	str	r3, [r7, #32]
 80107e2:	e001      	b.n	80107e8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80107e4:	2300      	movs	r3, #0
 80107e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80107e8:	6a3b      	ldr	r3, [r7, #32]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d10c      	bne.n	8010808 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	691a      	ldr	r2, [r3, #16]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6899      	ldr	r1, [r3, #8]
 80107f6:	2300      	movs	r3, #0
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	460b      	mov	r3, r1
 80107fc:	68b9      	ldr	r1, [r7, #8]
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f000 fa58 	bl	8010cb4 <xQueueGenericCreateStatic>
 8010804:	6278      	str	r0, [r7, #36]	; 0x24
 8010806:	e008      	b.n	801081a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d105      	bne.n	801081a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801080e:	2200      	movs	r2, #0
 8010810:	68b9      	ldr	r1, [r7, #8]
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	f000 fac1 	bl	8010d9a <xQueueGenericCreate>
 8010818:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00c      	beq.n	801083a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d003      	beq.n	801082e <osMessageQueueNew+0xf2>
        name = attr->name;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	61fb      	str	r3, [r7, #28]
 801082c:	e001      	b.n	8010832 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801082e:	2300      	movs	r3, #0
 8010830:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010832:	69f9      	ldr	r1, [r7, #28]
 8010834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010836:	f001 f9f1 	bl	8011c1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801083c:	4618      	mov	r0, r3
 801083e:	3728      	adds	r7, #40	; 0x28
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	2000045c 	.word	0x2000045c

08010848 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010848:	b580      	push	{r7, lr}
 801084a:	b08a      	sub	sp, #40	; 0x28
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	603b      	str	r3, [r7, #0]
 8010854:	4613      	mov	r3, r2
 8010856:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801085c:	2300      	movs	r3, #0
 801085e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010860:	f3ef 8305 	mrs	r3, IPSR
 8010864:	61fb      	str	r3, [r7, #28]
  return(result);
 8010866:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010868:	2b00      	cmp	r3, #0
 801086a:	d10f      	bne.n	801088c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801086c:	f3ef 8310 	mrs	r3, PRIMASK
 8010870:	61bb      	str	r3, [r7, #24]
  return(result);
 8010872:	69bb      	ldr	r3, [r7, #24]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d105      	bne.n	8010884 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010878:	f3ef 8311 	mrs	r3, BASEPRI
 801087c:	617b      	str	r3, [r7, #20]
  return(result);
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d02c      	beq.n	80108de <osMessageQueuePut+0x96>
 8010884:	4b28      	ldr	r3, [pc, #160]	; (8010928 <osMessageQueuePut+0xe0>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2b02      	cmp	r3, #2
 801088a:	d128      	bne.n	80108de <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801088c:	6a3b      	ldr	r3, [r7, #32]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d005      	beq.n	801089e <osMessageQueuePut+0x56>
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <osMessageQueuePut+0x56>
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d003      	beq.n	80108a6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801089e:	f06f 0303 	mvn.w	r3, #3
 80108a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108a4:	e039      	b.n	801091a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80108a6:	2300      	movs	r3, #0
 80108a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80108aa:	f107 0210 	add.w	r2, r7, #16
 80108ae:	2300      	movs	r3, #0
 80108b0:	68b9      	ldr	r1, [r7, #8]
 80108b2:	6a38      	ldr	r0, [r7, #32]
 80108b4:	f000 fce8 	bl	8011288 <xQueueGenericSendFromISR>
 80108b8:	4603      	mov	r3, r0
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d003      	beq.n	80108c6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80108be:	f06f 0302 	mvn.w	r3, #2
 80108c2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108c4:	e029      	b.n	801091a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d026      	beq.n	801091a <osMessageQueuePut+0xd2>
 80108cc:	4b17      	ldr	r3, [pc, #92]	; (801092c <osMessageQueuePut+0xe4>)
 80108ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108d2:	601a      	str	r2, [r3, #0]
 80108d4:	f3bf 8f4f 	dsb	sy
 80108d8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80108dc:	e01d      	b.n	801091a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <osMessageQueuePut+0xa2>
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d103      	bne.n	80108f2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80108ea:	f06f 0303 	mvn.w	r3, #3
 80108ee:	627b      	str	r3, [r7, #36]	; 0x24
 80108f0:	e014      	b.n	801091c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80108f2:	2300      	movs	r3, #0
 80108f4:	683a      	ldr	r2, [r7, #0]
 80108f6:	68b9      	ldr	r1, [r7, #8]
 80108f8:	6a38      	ldr	r0, [r7, #32]
 80108fa:	f000 fbcb 	bl	8011094 <xQueueGenericSend>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b01      	cmp	r3, #1
 8010902:	d00b      	beq.n	801091c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d003      	beq.n	8010912 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801090a:	f06f 0301 	mvn.w	r3, #1
 801090e:	627b      	str	r3, [r7, #36]	; 0x24
 8010910:	e004      	b.n	801091c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010912:	f06f 0302 	mvn.w	r3, #2
 8010916:	627b      	str	r3, [r7, #36]	; 0x24
 8010918:	e000      	b.n	801091c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801091a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801091e:	4618      	mov	r0, r3
 8010920:	3728      	adds	r7, #40	; 0x28
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	2000045c 	.word	0x2000045c
 801092c:	e000ed04 	.word	0xe000ed04

08010930 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010930:	b580      	push	{r7, lr}
 8010932:	b08a      	sub	sp, #40	; 0x28
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	607a      	str	r2, [r7, #4]
 801093c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010942:	2300      	movs	r3, #0
 8010944:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010946:	f3ef 8305 	mrs	r3, IPSR
 801094a:	61fb      	str	r3, [r7, #28]
  return(result);
 801094c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801094e:	2b00      	cmp	r3, #0
 8010950:	d10f      	bne.n	8010972 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010952:	f3ef 8310 	mrs	r3, PRIMASK
 8010956:	61bb      	str	r3, [r7, #24]
  return(result);
 8010958:	69bb      	ldr	r3, [r7, #24]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d105      	bne.n	801096a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801095e:	f3ef 8311 	mrs	r3, BASEPRI
 8010962:	617b      	str	r3, [r7, #20]
  return(result);
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d02c      	beq.n	80109c4 <osMessageQueueGet+0x94>
 801096a:	4b28      	ldr	r3, [pc, #160]	; (8010a0c <osMessageQueueGet+0xdc>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b02      	cmp	r3, #2
 8010970:	d128      	bne.n	80109c4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010972:	6a3b      	ldr	r3, [r7, #32]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d005      	beq.n	8010984 <osMessageQueueGet+0x54>
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d002      	beq.n	8010984 <osMessageQueueGet+0x54>
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d003      	beq.n	801098c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010984:	f06f 0303 	mvn.w	r3, #3
 8010988:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801098a:	e038      	b.n	80109fe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801098c:	2300      	movs	r3, #0
 801098e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010990:	f107 0310 	add.w	r3, r7, #16
 8010994:	461a      	mov	r2, r3
 8010996:	68b9      	ldr	r1, [r7, #8]
 8010998:	6a38      	ldr	r0, [r7, #32]
 801099a:	f000 ff77 	bl	801188c <xQueueReceiveFromISR>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d003      	beq.n	80109ac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80109a4:	f06f 0302 	mvn.w	r3, #2
 80109a8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109aa:	e028      	b.n	80109fe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d025      	beq.n	80109fe <osMessageQueueGet+0xce>
 80109b2:	4b17      	ldr	r3, [pc, #92]	; (8010a10 <osMessageQueueGet+0xe0>)
 80109b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109b8:	601a      	str	r2, [r3, #0]
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109c2:	e01c      	b.n	80109fe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d002      	beq.n	80109d0 <osMessageQueueGet+0xa0>
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d103      	bne.n	80109d8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80109d0:	f06f 0303 	mvn.w	r3, #3
 80109d4:	627b      	str	r3, [r7, #36]	; 0x24
 80109d6:	e013      	b.n	8010a00 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80109d8:	683a      	ldr	r2, [r7, #0]
 80109da:	68b9      	ldr	r1, [r7, #8]
 80109dc:	6a38      	ldr	r0, [r7, #32]
 80109de:	f000 fd71 	bl	80114c4 <xQueueReceive>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d00b      	beq.n	8010a00 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d003      	beq.n	80109f6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80109ee:	f06f 0301 	mvn.w	r3, #1
 80109f2:	627b      	str	r3, [r7, #36]	; 0x24
 80109f4:	e004      	b.n	8010a00 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80109f6:	f06f 0302 	mvn.w	r3, #2
 80109fa:	627b      	str	r3, [r7, #36]	; 0x24
 80109fc:	e000      	b.n	8010a00 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109fe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3728      	adds	r7, #40	; 0x28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	2000045c 	.word	0x2000045c
 8010a10:	e000ed04 	.word	0xe000ed04

08010a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010a14:	b480      	push	{r7}
 8010a16:	b085      	sub	sp, #20
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	4a07      	ldr	r2, [pc, #28]	; (8010a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8010a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	4a06      	ldr	r2, [pc, #24]	; (8010a44 <vApplicationGetIdleTaskMemory+0x30>)
 8010a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a32:	601a      	str	r2, [r3, #0]
}
 8010a34:	bf00      	nop
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	20000460 	.word	0x20000460
 8010a44:	200004bc 	.word	0x200004bc

08010a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	4a07      	ldr	r2, [pc, #28]	; (8010a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8010a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	4a06      	ldr	r2, [pc, #24]	; (8010a78 <vApplicationGetTimerTaskMemory+0x30>)
 8010a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a66:	601a      	str	r2, [r3, #0]
}
 8010a68:	bf00      	nop
 8010a6a:	3714      	adds	r7, #20
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr
 8010a74:	20000cbc 	.word	0x20000cbc
 8010a78:	20000d18 	.word	0x20000d18

08010a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f103 0208 	add.w	r2, r3, #8
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f04f 32ff 	mov.w	r2, #4294967295
 8010a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f103 0208 	add.w	r2, r3, #8
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f103 0208 	add.w	r2, r3, #8
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2200      	movs	r2, #0
 8010aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010ab0:	bf00      	nop
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010aca:	bf00      	nop
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr

08010ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ad6:	b480      	push	{r7}
 8010ad8:	b085      	sub	sp, #20
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
 8010ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	68fa      	ldr	r2, [r7, #12]
 8010aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	689a      	ldr	r2, [r3, #8]
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	683a      	ldr	r2, [r7, #0]
 8010afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	683a      	ldr	r2, [r7, #0]
 8010b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	601a      	str	r2, [r3, #0]
}
 8010b12:	bf00      	nop
 8010b14:	3714      	adds	r7, #20
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b1e:	b480      	push	{r7}
 8010b20:	b085      	sub	sp, #20
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
 8010b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b34:	d103      	bne.n	8010b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	60fb      	str	r3, [r7, #12]
 8010b3c:	e00c      	b.n	8010b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	3308      	adds	r3, #8
 8010b42:	60fb      	str	r3, [r7, #12]
 8010b44:	e002      	b.n	8010b4c <vListInsert+0x2e>
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	60fb      	str	r3, [r7, #12]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	68ba      	ldr	r2, [r7, #8]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d2f6      	bcs.n	8010b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	685a      	ldr	r2, [r3, #4]
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	683a      	ldr	r2, [r7, #0]
 8010b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	683a      	ldr	r2, [r7, #0]
 8010b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	1c5a      	adds	r2, r3, #1
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	601a      	str	r2, [r3, #0]
}
 8010b84:	bf00      	nop
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	691b      	ldr	r3, [r3, #16]
 8010b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	6892      	ldr	r2, [r2, #8]
 8010ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	6852      	ldr	r2, [r2, #4]
 8010bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	685b      	ldr	r3, [r3, #4]
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d103      	bne.n	8010bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	689a      	ldr	r2, [r3, #8]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	1e5a      	subs	r2, r3, #1
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d109      	bne.n	8010c0c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	60bb      	str	r3, [r7, #8]
 8010c0a:	e7fe      	b.n	8010c0a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010c0c:	f002 ff36 	bl	8013a7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c18:	68f9      	ldr	r1, [r7, #12]
 8010c1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c1c:	fb01 f303 	mul.w	r3, r1, r3
 8010c20:	441a      	add	r2, r3
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	68f9      	ldr	r1, [r7, #12]
 8010c40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c42:	fb01 f303 	mul.w	r3, r1, r3
 8010c46:	441a      	add	r2, r3
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	22ff      	movs	r2, #255	; 0xff
 8010c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	22ff      	movs	r2, #255	; 0xff
 8010c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d114      	bne.n	8010c8c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d01a      	beq.n	8010ca0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	3310      	adds	r3, #16
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f001 fce4 	bl	801263c <xTaskRemoveFromEventList>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d012      	beq.n	8010ca0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010c7a:	4b0d      	ldr	r3, [pc, #52]	; (8010cb0 <xQueueGenericReset+0xcc>)
 8010c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c80:	601a      	str	r2, [r3, #0]
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	f3bf 8f6f 	isb	sy
 8010c8a:	e009      	b.n	8010ca0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	3310      	adds	r3, #16
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7ff fef3 	bl	8010a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	3324      	adds	r3, #36	; 0x24
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7ff feee 	bl	8010a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ca0:	f002 ff1a 	bl	8013ad8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010ca4:	2301      	movs	r3, #1
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3710      	adds	r7, #16
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	e000ed04 	.word	0xe000ed04

08010cb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b08e      	sub	sp, #56	; 0x38
 8010cb8:	af02      	add	r7, sp, #8
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	607a      	str	r2, [r7, #4]
 8010cc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d109      	bne.n	8010cdc <xQueueGenericCreateStatic+0x28>
 8010cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ccc:	f383 8811 	msr	BASEPRI, r3
 8010cd0:	f3bf 8f6f 	isb	sy
 8010cd4:	f3bf 8f4f 	dsb	sy
 8010cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cda:	e7fe      	b.n	8010cda <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d109      	bne.n	8010cf6 <xQueueGenericCreateStatic+0x42>
 8010ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8010cf4:	e7fe      	b.n	8010cf4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d002      	beq.n	8010d02 <xQueueGenericCreateStatic+0x4e>
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d001      	beq.n	8010d06 <xQueueGenericCreateStatic+0x52>
 8010d02:	2301      	movs	r3, #1
 8010d04:	e000      	b.n	8010d08 <xQueueGenericCreateStatic+0x54>
 8010d06:	2300      	movs	r3, #0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d109      	bne.n	8010d20 <xQueueGenericCreateStatic+0x6c>
 8010d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d10:	f383 8811 	msr	BASEPRI, r3
 8010d14:	f3bf 8f6f 	isb	sy
 8010d18:	f3bf 8f4f 	dsb	sy
 8010d1c:	623b      	str	r3, [r7, #32]
 8010d1e:	e7fe      	b.n	8010d1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d102      	bne.n	8010d2c <xQueueGenericCreateStatic+0x78>
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d101      	bne.n	8010d30 <xQueueGenericCreateStatic+0x7c>
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	e000      	b.n	8010d32 <xQueueGenericCreateStatic+0x7e>
 8010d30:	2300      	movs	r3, #0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d109      	bne.n	8010d4a <xQueueGenericCreateStatic+0x96>
 8010d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3a:	f383 8811 	msr	BASEPRI, r3
 8010d3e:	f3bf 8f6f 	isb	sy
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	61fb      	str	r3, [r7, #28]
 8010d48:	e7fe      	b.n	8010d48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d4a:	2350      	movs	r3, #80	; 0x50
 8010d4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	2b50      	cmp	r3, #80	; 0x50
 8010d52:	d009      	beq.n	8010d68 <xQueueGenericCreateStatic+0xb4>
 8010d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d58:	f383 8811 	msr	BASEPRI, r3
 8010d5c:	f3bf 8f6f 	isb	sy
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	61bb      	str	r3, [r7, #24]
 8010d66:	e7fe      	b.n	8010d66 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010d68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00d      	beq.n	8010d90 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d76:	2201      	movs	r2, #1
 8010d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010d7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d82:	9300      	str	r3, [sp, #0]
 8010d84:	4613      	mov	r3, r2
 8010d86:	687a      	ldr	r2, [r7, #4]
 8010d88:	68b9      	ldr	r1, [r7, #8]
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f000 f844 	bl	8010e18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3730      	adds	r7, #48	; 0x30
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010d9a:	b580      	push	{r7, lr}
 8010d9c:	b08a      	sub	sp, #40	; 0x28
 8010d9e:	af02      	add	r7, sp, #8
 8010da0:	60f8      	str	r0, [r7, #12]
 8010da2:	60b9      	str	r1, [r7, #8]
 8010da4:	4613      	mov	r3, r2
 8010da6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d109      	bne.n	8010dc2 <xQueueGenericCreate+0x28>
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	613b      	str	r3, [r7, #16]
 8010dc0:	e7fe      	b.n	8010dc0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	61fb      	str	r3, [r7, #28]
 8010dcc:	e004      	b.n	8010dd8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	fb02 f303 	mul.w	r3, r2, r3
 8010dd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	3350      	adds	r3, #80	; 0x50
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f002 ff67 	bl	8013cb0 <pvPortMalloc>
 8010de2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d011      	beq.n	8010e0e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010dea:	69bb      	ldr	r3, [r7, #24]
 8010dec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	3350      	adds	r3, #80	; 0x50
 8010df2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dfc:	79fa      	ldrb	r2, [r7, #7]
 8010dfe:	69bb      	ldr	r3, [r7, #24]
 8010e00:	9300      	str	r3, [sp, #0]
 8010e02:	4613      	mov	r3, r2
 8010e04:	697a      	ldr	r2, [r7, #20]
 8010e06:	68b9      	ldr	r1, [r7, #8]
 8010e08:	68f8      	ldr	r0, [r7, #12]
 8010e0a:	f000 f805 	bl	8010e18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3720      	adds	r7, #32
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d103      	bne.n	8010e34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	69ba      	ldr	r2, [r7, #24]
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	e002      	b.n	8010e3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e46:	2101      	movs	r1, #1
 8010e48:	69b8      	ldr	r0, [r7, #24]
 8010e4a:	f7ff fecb 	bl	8010be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	78fa      	ldrb	r2, [r7, #3]
 8010e52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010e56:	bf00      	nop
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b082      	sub	sp, #8
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00e      	beq.n	8010e8a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010e7e:	2300      	movs	r3, #0
 8010e80:	2200      	movs	r2, #0
 8010e82:	2100      	movs	r1, #0
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f905 	bl	8011094 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010e8a:	bf00      	nop
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010e92:	b580      	push	{r7, lr}
 8010e94:	b086      	sub	sp, #24
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	4603      	mov	r3, r0
 8010e9a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	617b      	str	r3, [r7, #20]
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010ea4:	79fb      	ldrb	r3, [r7, #7]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	6939      	ldr	r1, [r7, #16]
 8010eaa:	6978      	ldr	r0, [r7, #20]
 8010eac:	f7ff ff75 	bl	8010d9a <xQueueGenericCreate>
 8010eb0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010eb2:	68f8      	ldr	r0, [r7, #12]
 8010eb4:	f7ff ffd3 	bl	8010e5e <prvInitialiseMutex>

		return xNewQueue;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
	}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3718      	adds	r7, #24
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010ec2:	b580      	push	{r7, lr}
 8010ec4:	b088      	sub	sp, #32
 8010ec6:	af02      	add	r7, sp, #8
 8010ec8:	4603      	mov	r3, r0
 8010eca:	6039      	str	r1, [r7, #0]
 8010ecc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	617b      	str	r3, [r7, #20]
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010ed6:	79fb      	ldrb	r3, [r7, #7]
 8010ed8:	9300      	str	r3, [sp, #0]
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	2200      	movs	r2, #0
 8010ede:	6939      	ldr	r1, [r7, #16]
 8010ee0:	6978      	ldr	r0, [r7, #20]
 8010ee2:	f7ff fee7 	bl	8010cb4 <xQueueGenericCreateStatic>
 8010ee6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7ff ffb8 	bl	8010e5e <prvInitialiseMutex>

		return xNewQueue;
 8010eee:	68fb      	ldr	r3, [r7, #12]
	}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3718      	adds	r7, #24
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010ef8:	b590      	push	{r4, r7, lr}
 8010efa:	b087      	sub	sp, #28
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d109      	bne.n	8010f1e <xQueueGiveMutexRecursive+0x26>
 8010f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0e:	f383 8811 	msr	BASEPRI, r3
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	f3bf 8f4f 	dsb	sy
 8010f1a:	60fb      	str	r3, [r7, #12]
 8010f1c:	e7fe      	b.n	8010f1c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	689c      	ldr	r4, [r3, #8]
 8010f22:	f001 fd69 	bl	80129f8 <xTaskGetCurrentTaskHandle>
 8010f26:	4603      	mov	r3, r0
 8010f28:	429c      	cmp	r4, r3
 8010f2a:	d111      	bne.n	8010f50 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	1e5a      	subs	r2, r3, #1
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d105      	bne.n	8010f4a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010f3e:	2300      	movs	r3, #0
 8010f40:	2200      	movs	r2, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	6938      	ldr	r0, [r7, #16]
 8010f46:	f000 f8a5 	bl	8011094 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	617b      	str	r3, [r7, #20]
 8010f4e:	e001      	b.n	8010f54 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010f50:	2300      	movs	r3, #0
 8010f52:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010f54:	697b      	ldr	r3, [r7, #20]
	}
 8010f56:	4618      	mov	r0, r3
 8010f58:	371c      	adds	r7, #28
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd90      	pop	{r4, r7, pc}

08010f5e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010f5e:	b590      	push	{r4, r7, lr}
 8010f60:	b087      	sub	sp, #28
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
 8010f66:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d109      	bne.n	8010f86 <xQueueTakeMutexRecursive+0x28>
 8010f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f76:	f383 8811 	msr	BASEPRI, r3
 8010f7a:	f3bf 8f6f 	isb	sy
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	60fb      	str	r3, [r7, #12]
 8010f84:	e7fe      	b.n	8010f84 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	689c      	ldr	r4, [r3, #8]
 8010f8a:	f001 fd35 	bl	80129f8 <xTaskGetCurrentTaskHandle>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	429c      	cmp	r4, r3
 8010f92:	d107      	bne.n	8010fa4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	1c5a      	adds	r2, r3, #1
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	617b      	str	r3, [r7, #20]
 8010fa2:	e00c      	b.n	8010fbe <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010fa4:	6839      	ldr	r1, [r7, #0]
 8010fa6:	6938      	ldr	r0, [r7, #16]
 8010fa8:	f000 fb68 	bl	801167c <xQueueSemaphoreTake>
 8010fac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d004      	beq.n	8010fbe <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	1c5a      	adds	r2, r3, #1
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8010fbe:	697b      	ldr	r3, [r7, #20]
	}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	371c      	adds	r7, #28
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd90      	pop	{r4, r7, pc}

08010fc8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08a      	sub	sp, #40	; 0x28
 8010fcc:	af02      	add	r7, sp, #8
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d109      	bne.n	8010fee <xQueueCreateCountingSemaphoreStatic+0x26>
 8010fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	61bb      	str	r3, [r7, #24]
 8010fec:	e7fe      	b.n	8010fec <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010fee:	68ba      	ldr	r2, [r7, #8]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d909      	bls.n	801100a <xQueueCreateCountingSemaphoreStatic+0x42>
 8010ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffa:	f383 8811 	msr	BASEPRI, r3
 8010ffe:	f3bf 8f6f 	isb	sy
 8011002:	f3bf 8f4f 	dsb	sy
 8011006:	617b      	str	r3, [r7, #20]
 8011008:	e7fe      	b.n	8011008 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801100a:	2302      	movs	r3, #2
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2200      	movs	r2, #0
 8011012:	2100      	movs	r1, #0
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f7ff fe4d 	bl	8010cb4 <xQueueGenericCreateStatic>
 801101a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801101c:	69fb      	ldr	r3, [r7, #28]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d002      	beq.n	8011028 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011028:	69fb      	ldr	r3, [r7, #28]
	}
 801102a:	4618      	mov	r0, r3
 801102c:	3720      	adds	r7, #32
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011032:	b580      	push	{r7, lr}
 8011034:	b086      	sub	sp, #24
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d109      	bne.n	8011056 <xQueueCreateCountingSemaphore+0x24>
 8011042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	613b      	str	r3, [r7, #16]
 8011054:	e7fe      	b.n	8011054 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011056:	683a      	ldr	r2, [r7, #0]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	429a      	cmp	r2, r3
 801105c:	d909      	bls.n	8011072 <xQueueCreateCountingSemaphore+0x40>
 801105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011062:	f383 8811 	msr	BASEPRI, r3
 8011066:	f3bf 8f6f 	isb	sy
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	e7fe      	b.n	8011070 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011072:	2202      	movs	r2, #2
 8011074:	2100      	movs	r1, #0
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f7ff fe8f 	bl	8010d9a <xQueueGenericCreate>
 801107c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	683a      	ldr	r2, [r7, #0]
 8011088:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801108a:	697b      	ldr	r3, [r7, #20]
	}
 801108c:	4618      	mov	r0, r3
 801108e:	3718      	adds	r7, #24
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b08e      	sub	sp, #56	; 0x38
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
 80110a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80110a2:	2300      	movs	r3, #0
 80110a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80110aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d109      	bne.n	80110c4 <xQueueGenericSend+0x30>
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80110c2:	e7fe      	b.n	80110c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d103      	bne.n	80110d2 <xQueueGenericSend+0x3e>
 80110ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d101      	bne.n	80110d6 <xQueueGenericSend+0x42>
 80110d2:	2301      	movs	r3, #1
 80110d4:	e000      	b.n	80110d8 <xQueueGenericSend+0x44>
 80110d6:	2300      	movs	r3, #0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d109      	bne.n	80110f0 <xQueueGenericSend+0x5c>
 80110dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e0:	f383 8811 	msr	BASEPRI, r3
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	627b      	str	r3, [r7, #36]	; 0x24
 80110ee:	e7fe      	b.n	80110ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	2b02      	cmp	r3, #2
 80110f4:	d103      	bne.n	80110fe <xQueueGenericSend+0x6a>
 80110f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d101      	bne.n	8011102 <xQueueGenericSend+0x6e>
 80110fe:	2301      	movs	r3, #1
 8011100:	e000      	b.n	8011104 <xQueueGenericSend+0x70>
 8011102:	2300      	movs	r3, #0
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <xQueueGenericSend+0x88>
 8011108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	623b      	str	r3, [r7, #32]
 801111a:	e7fe      	b.n	801111a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801111c:	f001 fc7c 	bl	8012a18 <xTaskGetSchedulerState>
 8011120:	4603      	mov	r3, r0
 8011122:	2b00      	cmp	r3, #0
 8011124:	d102      	bne.n	801112c <xQueueGenericSend+0x98>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d101      	bne.n	8011130 <xQueueGenericSend+0x9c>
 801112c:	2301      	movs	r3, #1
 801112e:	e000      	b.n	8011132 <xQueueGenericSend+0x9e>
 8011130:	2300      	movs	r3, #0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d109      	bne.n	801114a <xQueueGenericSend+0xb6>
 8011136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113a:	f383 8811 	msr	BASEPRI, r3
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f3bf 8f4f 	dsb	sy
 8011146:	61fb      	str	r3, [r7, #28]
 8011148:	e7fe      	b.n	8011148 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801114a:	f002 fc97 	bl	8013a7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801114e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011156:	429a      	cmp	r2, r3
 8011158:	d302      	bcc.n	8011160 <xQueueGenericSend+0xcc>
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	2b02      	cmp	r3, #2
 801115e:	d129      	bne.n	80111b4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	68b9      	ldr	r1, [r7, #8]
 8011164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011166:	f000 fc48 	bl	80119fa <prvCopyDataToQueue>
 801116a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011170:	2b00      	cmp	r3, #0
 8011172:	d010      	beq.n	8011196 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011176:	3324      	adds	r3, #36	; 0x24
 8011178:	4618      	mov	r0, r3
 801117a:	f001 fa5f 	bl	801263c <xTaskRemoveFromEventList>
 801117e:	4603      	mov	r3, r0
 8011180:	2b00      	cmp	r3, #0
 8011182:	d013      	beq.n	80111ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011184:	4b3f      	ldr	r3, [pc, #252]	; (8011284 <xQueueGenericSend+0x1f0>)
 8011186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801118a:	601a      	str	r2, [r3, #0]
 801118c:	f3bf 8f4f 	dsb	sy
 8011190:	f3bf 8f6f 	isb	sy
 8011194:	e00a      	b.n	80111ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011198:	2b00      	cmp	r3, #0
 801119a:	d007      	beq.n	80111ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801119c:	4b39      	ldr	r3, [pc, #228]	; (8011284 <xQueueGenericSend+0x1f0>)
 801119e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111a2:	601a      	str	r2, [r3, #0]
 80111a4:	f3bf 8f4f 	dsb	sy
 80111a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80111ac:	f002 fc94 	bl	8013ad8 <vPortExitCritical>
				return pdPASS;
 80111b0:	2301      	movs	r3, #1
 80111b2:	e063      	b.n	801127c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d103      	bne.n	80111c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80111ba:	f002 fc8d 	bl	8013ad8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80111be:	2300      	movs	r3, #0
 80111c0:	e05c      	b.n	801127c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80111c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d106      	bne.n	80111d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80111c8:	f107 0314 	add.w	r3, r7, #20
 80111cc:	4618      	mov	r0, r3
 80111ce:	f001 fa99 	bl	8012704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80111d2:	2301      	movs	r3, #1
 80111d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111d6:	f002 fc7f 	bl	8013ad8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111da:	f000 ffdb 	bl	8012194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111de:	f002 fc4d 	bl	8013a7c <vPortEnterCritical>
 80111e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111e8:	b25b      	sxtb	r3, r3
 80111ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ee:	d103      	bne.n	80111f8 <xQueueGenericSend+0x164>
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	2200      	movs	r2, #0
 80111f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111fe:	b25b      	sxtb	r3, r3
 8011200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011204:	d103      	bne.n	801120e <xQueueGenericSend+0x17a>
 8011206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011208:	2200      	movs	r2, #0
 801120a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801120e:	f002 fc63 	bl	8013ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011212:	1d3a      	adds	r2, r7, #4
 8011214:	f107 0314 	add.w	r3, r7, #20
 8011218:	4611      	mov	r1, r2
 801121a:	4618      	mov	r0, r3
 801121c:	f001 fa88 	bl	8012730 <xTaskCheckForTimeOut>
 8011220:	4603      	mov	r3, r0
 8011222:	2b00      	cmp	r3, #0
 8011224:	d124      	bne.n	8011270 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011228:	f000 fcdf 	bl	8011bea <prvIsQueueFull>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d018      	beq.n	8011264 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011234:	3310      	adds	r3, #16
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	4611      	mov	r1, r2
 801123a:	4618      	mov	r0, r3
 801123c:	f001 f9b0 	bl	80125a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011242:	f000 fc6a 	bl	8011b1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011246:	f000 ffeb 	bl	8012220 <xTaskResumeAll>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	f47f af7c 	bne.w	801114a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011252:	4b0c      	ldr	r3, [pc, #48]	; (8011284 <xQueueGenericSend+0x1f0>)
 8011254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	f3bf 8f4f 	dsb	sy
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	e772      	b.n	801114a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011266:	f000 fc58 	bl	8011b1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801126a:	f000 ffd9 	bl	8012220 <xTaskResumeAll>
 801126e:	e76c      	b.n	801114a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011272:	f000 fc52 	bl	8011b1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011276:	f000 ffd3 	bl	8012220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801127a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801127c:	4618      	mov	r0, r3
 801127e:	3738      	adds	r7, #56	; 0x38
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b08e      	sub	sp, #56	; 0x38
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
 8011294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801129c:	2b00      	cmp	r3, #0
 801129e:	d109      	bne.n	80112b4 <xQueueGenericSendFromISR+0x2c>
 80112a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a4:	f383 8811 	msr	BASEPRI, r3
 80112a8:	f3bf 8f6f 	isb	sy
 80112ac:	f3bf 8f4f 	dsb	sy
 80112b0:	627b      	str	r3, [r7, #36]	; 0x24
 80112b2:	e7fe      	b.n	80112b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d103      	bne.n	80112c2 <xQueueGenericSendFromISR+0x3a>
 80112ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d101      	bne.n	80112c6 <xQueueGenericSendFromISR+0x3e>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e000      	b.n	80112c8 <xQueueGenericSendFromISR+0x40>
 80112c6:	2300      	movs	r3, #0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d109      	bne.n	80112e0 <xQueueGenericSendFromISR+0x58>
 80112cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d0:	f383 8811 	msr	BASEPRI, r3
 80112d4:	f3bf 8f6f 	isb	sy
 80112d8:	f3bf 8f4f 	dsb	sy
 80112dc:	623b      	str	r3, [r7, #32]
 80112de:	e7fe      	b.n	80112de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2b02      	cmp	r3, #2
 80112e4:	d103      	bne.n	80112ee <xQueueGenericSendFromISR+0x66>
 80112e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d101      	bne.n	80112f2 <xQueueGenericSendFromISR+0x6a>
 80112ee:	2301      	movs	r3, #1
 80112f0:	e000      	b.n	80112f4 <xQueueGenericSendFromISR+0x6c>
 80112f2:	2300      	movs	r3, #0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d109      	bne.n	801130c <xQueueGenericSendFromISR+0x84>
 80112f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fc:	f383 8811 	msr	BASEPRI, r3
 8011300:	f3bf 8f6f 	isb	sy
 8011304:	f3bf 8f4f 	dsb	sy
 8011308:	61fb      	str	r3, [r7, #28]
 801130a:	e7fe      	b.n	801130a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801130c:	f002 fc92 	bl	8013c34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011310:	f3ef 8211 	mrs	r2, BASEPRI
 8011314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011318:	f383 8811 	msr	BASEPRI, r3
 801131c:	f3bf 8f6f 	isb	sy
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	61ba      	str	r2, [r7, #24]
 8011326:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011328:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801132a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011334:	429a      	cmp	r2, r3
 8011336:	d302      	bcc.n	801133e <xQueueGenericSendFromISR+0xb6>
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	2b02      	cmp	r3, #2
 801133c:	d12c      	bne.n	8011398 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011348:	683a      	ldr	r2, [r7, #0]
 801134a:	68b9      	ldr	r1, [r7, #8]
 801134c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801134e:	f000 fb54 	bl	80119fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011352:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801135a:	d112      	bne.n	8011382 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011360:	2b00      	cmp	r3, #0
 8011362:	d016      	beq.n	8011392 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011366:	3324      	adds	r3, #36	; 0x24
 8011368:	4618      	mov	r0, r3
 801136a:	f001 f967 	bl	801263c <xTaskRemoveFromEventList>
 801136e:	4603      	mov	r3, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	d00e      	beq.n	8011392 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00b      	beq.n	8011392 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2201      	movs	r2, #1
 801137e:	601a      	str	r2, [r3, #0]
 8011380:	e007      	b.n	8011392 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011382:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011386:	3301      	adds	r3, #1
 8011388:	b2db      	uxtb	r3, r3
 801138a:	b25a      	sxtb	r2, r3
 801138c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011392:	2301      	movs	r3, #1
 8011394:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011396:	e001      	b.n	801139c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011398:	2300      	movs	r3, #0
 801139a:	637b      	str	r3, [r7, #52]	; 0x34
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3738      	adds	r7, #56	; 0x38
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08e      	sub	sp, #56	; 0x38
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80113be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d109      	bne.n	80113d8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80113c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c8:	f383 8811 	msr	BASEPRI, r3
 80113cc:	f3bf 8f6f 	isb	sy
 80113d0:	f3bf 8f4f 	dsb	sy
 80113d4:	623b      	str	r3, [r7, #32]
 80113d6:	e7fe      	b.n	80113d6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80113d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d009      	beq.n	80113f4 <xQueueGiveFromISR+0x44>
 80113e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	61fb      	str	r3, [r7, #28]
 80113f2:	e7fe      	b.n	80113f2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80113f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d103      	bne.n	8011404 <xQueueGiveFromISR+0x54>
 80113fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d101      	bne.n	8011408 <xQueueGiveFromISR+0x58>
 8011404:	2301      	movs	r3, #1
 8011406:	e000      	b.n	801140a <xQueueGiveFromISR+0x5a>
 8011408:	2300      	movs	r3, #0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d109      	bne.n	8011422 <xQueueGiveFromISR+0x72>
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	61bb      	str	r3, [r7, #24]
 8011420:	e7fe      	b.n	8011420 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011422:	f002 fc07 	bl	8013c34 <vPortValidateInterruptPriority>
	__asm volatile
 8011426:	f3ef 8211 	mrs	r2, BASEPRI
 801142a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142e:	f383 8811 	msr	BASEPRI, r3
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	f3bf 8f4f 	dsb	sy
 801143a:	617a      	str	r2, [r7, #20]
 801143c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801143e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011440:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011446:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801144c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801144e:	429a      	cmp	r2, r3
 8011450:	d22b      	bcs.n	80114aa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	1c5a      	adds	r2, r3, #1
 8011460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011462:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801146c:	d112      	bne.n	8011494 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011472:	2b00      	cmp	r3, #0
 8011474:	d016      	beq.n	80114a4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011478:	3324      	adds	r3, #36	; 0x24
 801147a:	4618      	mov	r0, r3
 801147c:	f001 f8de 	bl	801263c <xTaskRemoveFromEventList>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d00e      	beq.n	80114a4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00b      	beq.n	80114a4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	2201      	movs	r2, #1
 8011490:	601a      	str	r2, [r3, #0]
 8011492:	e007      	b.n	80114a4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011498:	3301      	adds	r3, #1
 801149a:	b2db      	uxtb	r3, r3
 801149c:	b25a      	sxtb	r2, r3
 801149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80114a4:	2301      	movs	r3, #1
 80114a6:	637b      	str	r3, [r7, #52]	; 0x34
 80114a8:	e001      	b.n	80114ae <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80114aa:	2300      	movs	r3, #0
 80114ac:	637b      	str	r3, [r7, #52]	; 0x34
 80114ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80114b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3738      	adds	r7, #56	; 0x38
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
	...

080114c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b08c      	sub	sp, #48	; 0x30
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80114d0:	2300      	movs	r3, #0
 80114d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80114d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d109      	bne.n	80114f2 <xQueueReceive+0x2e>
	__asm volatile
 80114de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e2:	f383 8811 	msr	BASEPRI, r3
 80114e6:	f3bf 8f6f 	isb	sy
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	623b      	str	r3, [r7, #32]
 80114f0:	e7fe      	b.n	80114f0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d103      	bne.n	8011500 <xQueueReceive+0x3c>
 80114f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d101      	bne.n	8011504 <xQueueReceive+0x40>
 8011500:	2301      	movs	r3, #1
 8011502:	e000      	b.n	8011506 <xQueueReceive+0x42>
 8011504:	2300      	movs	r3, #0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d109      	bne.n	801151e <xQueueReceive+0x5a>
 801150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150e:	f383 8811 	msr	BASEPRI, r3
 8011512:	f3bf 8f6f 	isb	sy
 8011516:	f3bf 8f4f 	dsb	sy
 801151a:	61fb      	str	r3, [r7, #28]
 801151c:	e7fe      	b.n	801151c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801151e:	f001 fa7b 	bl	8012a18 <xTaskGetSchedulerState>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d102      	bne.n	801152e <xQueueReceive+0x6a>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d101      	bne.n	8011532 <xQueueReceive+0x6e>
 801152e:	2301      	movs	r3, #1
 8011530:	e000      	b.n	8011534 <xQueueReceive+0x70>
 8011532:	2300      	movs	r3, #0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d109      	bne.n	801154c <xQueueReceive+0x88>
 8011538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153c:	f383 8811 	msr	BASEPRI, r3
 8011540:	f3bf 8f6f 	isb	sy
 8011544:	f3bf 8f4f 	dsb	sy
 8011548:	61bb      	str	r3, [r7, #24]
 801154a:	e7fe      	b.n	801154a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801154c:	f002 fa96 	bl	8013a7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011554:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	2b00      	cmp	r3, #0
 801155a:	d01f      	beq.n	801159c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801155c:	68b9      	ldr	r1, [r7, #8]
 801155e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011560:	f000 fab5 	bl	8011ace <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	1e5a      	subs	r2, r3, #1
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156e:	691b      	ldr	r3, [r3, #16]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d00f      	beq.n	8011594 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011576:	3310      	adds	r3, #16
 8011578:	4618      	mov	r0, r3
 801157a:	f001 f85f 	bl	801263c <xTaskRemoveFromEventList>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d007      	beq.n	8011594 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011584:	4b3c      	ldr	r3, [pc, #240]	; (8011678 <xQueueReceive+0x1b4>)
 8011586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801158a:	601a      	str	r2, [r3, #0]
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011594:	f002 faa0 	bl	8013ad8 <vPortExitCritical>
				return pdPASS;
 8011598:	2301      	movs	r3, #1
 801159a:	e069      	b.n	8011670 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d103      	bne.n	80115aa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80115a2:	f002 fa99 	bl	8013ad8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80115a6:	2300      	movs	r3, #0
 80115a8:	e062      	b.n	8011670 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80115aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d106      	bne.n	80115be <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115b0:	f107 0310 	add.w	r3, r7, #16
 80115b4:	4618      	mov	r0, r3
 80115b6:	f001 f8a5 	bl	8012704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80115ba:	2301      	movs	r3, #1
 80115bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80115be:	f002 fa8b 	bl	8013ad8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80115c2:	f000 fde7 	bl	8012194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115c6:	f002 fa59 	bl	8013a7c <vPortEnterCritical>
 80115ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115d0:	b25b      	sxtb	r3, r3
 80115d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d6:	d103      	bne.n	80115e0 <xQueueReceive+0x11c>
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	2200      	movs	r2, #0
 80115dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115e6:	b25b      	sxtb	r3, r3
 80115e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ec:	d103      	bne.n	80115f6 <xQueueReceive+0x132>
 80115ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f0:	2200      	movs	r2, #0
 80115f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115f6:	f002 fa6f 	bl	8013ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115fa:	1d3a      	adds	r2, r7, #4
 80115fc:	f107 0310 	add.w	r3, r7, #16
 8011600:	4611      	mov	r1, r2
 8011602:	4618      	mov	r0, r3
 8011604:	f001 f894 	bl	8012730 <xTaskCheckForTimeOut>
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d123      	bne.n	8011656 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801160e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011610:	f000 fad5 	bl	8011bbe <prvIsQueueEmpty>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d017      	beq.n	801164a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161c:	3324      	adds	r3, #36	; 0x24
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	4611      	mov	r1, r2
 8011622:	4618      	mov	r0, r3
 8011624:	f000 ffbc 	bl	80125a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801162a:	f000 fa76 	bl	8011b1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801162e:	f000 fdf7 	bl	8012220 <xTaskResumeAll>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d189      	bne.n	801154c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011638:	4b0f      	ldr	r3, [pc, #60]	; (8011678 <xQueueReceive+0x1b4>)
 801163a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801163e:	601a      	str	r2, [r3, #0]
 8011640:	f3bf 8f4f 	dsb	sy
 8011644:	f3bf 8f6f 	isb	sy
 8011648:	e780      	b.n	801154c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801164a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801164c:	f000 fa65 	bl	8011b1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011650:	f000 fde6 	bl	8012220 <xTaskResumeAll>
 8011654:	e77a      	b.n	801154c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011658:	f000 fa5f 	bl	8011b1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801165c:	f000 fde0 	bl	8012220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011662:	f000 faac 	bl	8011bbe <prvIsQueueEmpty>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	f43f af6f 	beq.w	801154c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801166e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011670:	4618      	mov	r0, r3
 8011672:	3730      	adds	r7, #48	; 0x30
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	e000ed04 	.word	0xe000ed04

0801167c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b08e      	sub	sp, #56	; 0x38
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011686:	2300      	movs	r3, #0
 8011688:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801168e:	2300      	movs	r3, #0
 8011690:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011694:	2b00      	cmp	r3, #0
 8011696:	d109      	bne.n	80116ac <xQueueSemaphoreTake+0x30>
 8011698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	623b      	str	r3, [r7, #32]
 80116aa:	e7fe      	b.n	80116aa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d009      	beq.n	80116c8 <xQueueSemaphoreTake+0x4c>
 80116b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b8:	f383 8811 	msr	BASEPRI, r3
 80116bc:	f3bf 8f6f 	isb	sy
 80116c0:	f3bf 8f4f 	dsb	sy
 80116c4:	61fb      	str	r3, [r7, #28]
 80116c6:	e7fe      	b.n	80116c6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80116c8:	f001 f9a6 	bl	8012a18 <xTaskGetSchedulerState>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d102      	bne.n	80116d8 <xQueueSemaphoreTake+0x5c>
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d101      	bne.n	80116dc <xQueueSemaphoreTake+0x60>
 80116d8:	2301      	movs	r3, #1
 80116da:	e000      	b.n	80116de <xQueueSemaphoreTake+0x62>
 80116dc:	2300      	movs	r3, #0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d109      	bne.n	80116f6 <xQueueSemaphoreTake+0x7a>
 80116e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e6:	f383 8811 	msr	BASEPRI, r3
 80116ea:	f3bf 8f6f 	isb	sy
 80116ee:	f3bf 8f4f 	dsb	sy
 80116f2:	61bb      	str	r3, [r7, #24]
 80116f4:	e7fe      	b.n	80116f4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80116f6:	f002 f9c1 	bl	8013a7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80116fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116fe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011702:	2b00      	cmp	r3, #0
 8011704:	d024      	beq.n	8011750 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011708:	1e5a      	subs	r2, r3, #1
 801170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d104      	bne.n	8011720 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011716:	f001 faf1 	bl	8012cfc <pvTaskIncrementMutexHeldCount>
 801171a:	4602      	mov	r2, r0
 801171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011722:	691b      	ldr	r3, [r3, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d00f      	beq.n	8011748 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172a:	3310      	adds	r3, #16
 801172c:	4618      	mov	r0, r3
 801172e:	f000 ff85 	bl	801263c <xTaskRemoveFromEventList>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d007      	beq.n	8011748 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011738:	4b53      	ldr	r3, [pc, #332]	; (8011888 <xQueueSemaphoreTake+0x20c>)
 801173a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801173e:	601a      	str	r2, [r3, #0]
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011748:	f002 f9c6 	bl	8013ad8 <vPortExitCritical>
				return pdPASS;
 801174c:	2301      	movs	r3, #1
 801174e:	e096      	b.n	801187e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d110      	bne.n	8011778 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011758:	2b00      	cmp	r3, #0
 801175a:	d009      	beq.n	8011770 <xQueueSemaphoreTake+0xf4>
 801175c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011760:	f383 8811 	msr	BASEPRI, r3
 8011764:	f3bf 8f6f 	isb	sy
 8011768:	f3bf 8f4f 	dsb	sy
 801176c:	617b      	str	r3, [r7, #20]
 801176e:	e7fe      	b.n	801176e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011770:	f002 f9b2 	bl	8013ad8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011774:	2300      	movs	r3, #0
 8011776:	e082      	b.n	801187e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177a:	2b00      	cmp	r3, #0
 801177c:	d106      	bne.n	801178c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801177e:	f107 030c 	add.w	r3, r7, #12
 8011782:	4618      	mov	r0, r3
 8011784:	f000 ffbe 	bl	8012704 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011788:	2301      	movs	r3, #1
 801178a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801178c:	f002 f9a4 	bl	8013ad8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011790:	f000 fd00 	bl	8012194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011794:	f002 f972 	bl	8013a7c <vPortEnterCritical>
 8011798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801179e:	b25b      	sxtb	r3, r3
 80117a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a4:	d103      	bne.n	80117ae <xQueueSemaphoreTake+0x132>
 80117a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a8:	2200      	movs	r2, #0
 80117aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117b4:	b25b      	sxtb	r3, r3
 80117b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ba:	d103      	bne.n	80117c4 <xQueueSemaphoreTake+0x148>
 80117bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117be:	2200      	movs	r2, #0
 80117c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80117c4:	f002 f988 	bl	8013ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80117c8:	463a      	mov	r2, r7
 80117ca:	f107 030c 	add.w	r3, r7, #12
 80117ce:	4611      	mov	r1, r2
 80117d0:	4618      	mov	r0, r3
 80117d2:	f000 ffad 	bl	8012730 <xTaskCheckForTimeOut>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d132      	bne.n	8011842 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80117dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117de:	f000 f9ee 	bl	8011bbe <prvIsQueueEmpty>
 80117e2:	4603      	mov	r3, r0
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d026      	beq.n	8011836 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d109      	bne.n	8011804 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80117f0:	f002 f944 	bl	8013a7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80117f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	4618      	mov	r0, r3
 80117fa:	f001 f92b 	bl	8012a54 <xTaskPriorityInherit>
 80117fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011800:	f002 f96a 	bl	8013ad8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011806:	3324      	adds	r3, #36	; 0x24
 8011808:	683a      	ldr	r2, [r7, #0]
 801180a:	4611      	mov	r1, r2
 801180c:	4618      	mov	r0, r3
 801180e:	f000 fec7 	bl	80125a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011814:	f000 f981 	bl	8011b1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011818:	f000 fd02 	bl	8012220 <xTaskResumeAll>
 801181c:	4603      	mov	r3, r0
 801181e:	2b00      	cmp	r3, #0
 8011820:	f47f af69 	bne.w	80116f6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011824:	4b18      	ldr	r3, [pc, #96]	; (8011888 <xQueueSemaphoreTake+0x20c>)
 8011826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801182a:	601a      	str	r2, [r3, #0]
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	f3bf 8f6f 	isb	sy
 8011834:	e75f      	b.n	80116f6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011838:	f000 f96f 	bl	8011b1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801183c:	f000 fcf0 	bl	8012220 <xTaskResumeAll>
 8011840:	e759      	b.n	80116f6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011844:	f000 f969 	bl	8011b1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011848:	f000 fcea 	bl	8012220 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801184c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801184e:	f000 f9b6 	bl	8011bbe <prvIsQueueEmpty>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	f43f af4e 	beq.w	80116f6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185c:	2b00      	cmp	r3, #0
 801185e:	d00d      	beq.n	801187c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011860:	f002 f90c 	bl	8013a7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011864:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011866:	f000 f8b0 	bl	80119ca <prvGetDisinheritPriorityAfterTimeout>
 801186a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186e:	689b      	ldr	r3, [r3, #8]
 8011870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011872:	4618      	mov	r0, r3
 8011874:	f001 f9c2 	bl	8012bfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011878:	f002 f92e 	bl	8013ad8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801187c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801187e:	4618      	mov	r0, r3
 8011880:	3738      	adds	r7, #56	; 0x38
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	e000ed04 	.word	0xe000ed04

0801188c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b08e      	sub	sp, #56	; 0x38
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d109      	bne.n	80118b6 <xQueueReceiveFromISR+0x2a>
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	623b      	str	r3, [r7, #32]
 80118b4:	e7fe      	b.n	80118b4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d103      	bne.n	80118c4 <xQueueReceiveFromISR+0x38>
 80118bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d101      	bne.n	80118c8 <xQueueReceiveFromISR+0x3c>
 80118c4:	2301      	movs	r3, #1
 80118c6:	e000      	b.n	80118ca <xQueueReceiveFromISR+0x3e>
 80118c8:	2300      	movs	r3, #0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d109      	bne.n	80118e2 <xQueueReceiveFromISR+0x56>
 80118ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	61fb      	str	r3, [r7, #28]
 80118e0:	e7fe      	b.n	80118e0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118e2:	f002 f9a7 	bl	8013c34 <vPortValidateInterruptPriority>
	__asm volatile
 80118e6:	f3ef 8211 	mrs	r2, BASEPRI
 80118ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ee:	f383 8811 	msr	BASEPRI, r3
 80118f2:	f3bf 8f6f 	isb	sy
 80118f6:	f3bf 8f4f 	dsb	sy
 80118fa:	61ba      	str	r2, [r7, #24]
 80118fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80118fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011900:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011906:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801190a:	2b00      	cmp	r3, #0
 801190c:	d02f      	beq.n	801196e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011918:	68b9      	ldr	r1, [r7, #8]
 801191a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801191c:	f000 f8d7 	bl	8011ace <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011922:	1e5a      	subs	r2, r3, #1
 8011924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011926:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011930:	d112      	bne.n	8011958 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011934:	691b      	ldr	r3, [r3, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d016      	beq.n	8011968 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193c:	3310      	adds	r3, #16
 801193e:	4618      	mov	r0, r3
 8011940:	f000 fe7c 	bl	801263c <xTaskRemoveFromEventList>
 8011944:	4603      	mov	r3, r0
 8011946:	2b00      	cmp	r3, #0
 8011948:	d00e      	beq.n	8011968 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00b      	beq.n	8011968 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2201      	movs	r2, #1
 8011954:	601a      	str	r2, [r3, #0]
 8011956:	e007      	b.n	8011968 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801195c:	3301      	adds	r3, #1
 801195e:	b2db      	uxtb	r3, r3
 8011960:	b25a      	sxtb	r2, r3
 8011962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011968:	2301      	movs	r3, #1
 801196a:	637b      	str	r3, [r7, #52]	; 0x34
 801196c:	e001      	b.n	8011972 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801196e:	2300      	movs	r3, #0
 8011970:	637b      	str	r3, [r7, #52]	; 0x34
 8011972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011974:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801197c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801197e:	4618      	mov	r0, r3
 8011980:	3738      	adds	r7, #56	; 0x38
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b084      	sub	sp, #16
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d109      	bne.n	80119ac <vQueueDelete+0x26>
	__asm volatile
 8011998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801199c:	f383 8811 	msr	BASEPRI, r3
 80119a0:	f3bf 8f6f 	isb	sy
 80119a4:	f3bf 8f4f 	dsb	sy
 80119a8:	60bb      	str	r3, [r7, #8]
 80119aa:	e7fe      	b.n	80119aa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	f000 f95d 	bl	8011c6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d102      	bne.n	80119c2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f002 fa39 	bl	8013e34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80119c2:	bf00      	nop
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80119ca:	b480      	push	{r7}
 80119cc:	b085      	sub	sp, #20
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d006      	beq.n	80119e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80119e4:	60fb      	str	r3, [r7, #12]
 80119e6:	e001      	b.n	80119ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80119e8:	2300      	movs	r3, #0
 80119ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80119ec:	68fb      	ldr	r3, [r7, #12]
	}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3714      	adds	r7, #20
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr

080119fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b086      	sub	sp, #24
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	60f8      	str	r0, [r7, #12]
 8011a02:	60b9      	str	r1, [r7, #8]
 8011a04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011a06:	2300      	movs	r3, #0
 8011a08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d10d      	bne.n	8011a34 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d14d      	bne.n	8011abc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f001 f87d 	bl	8012b24 <xTaskPriorityDisinherit>
 8011a2a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	609a      	str	r2, [r3, #8]
 8011a32:	e043      	b.n	8011abc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d119      	bne.n	8011a6e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	6858      	ldr	r0, [r3, #4]
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a42:	461a      	mov	r2, r3
 8011a44:	68b9      	ldr	r1, [r7, #8]
 8011a46:	f005 f8f3 	bl	8016c30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	685a      	ldr	r2, [r3, #4]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a52:	441a      	add	r2, r3
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	685a      	ldr	r2, [r3, #4]
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	689b      	ldr	r3, [r3, #8]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d32b      	bcc.n	8011abc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	605a      	str	r2, [r3, #4]
 8011a6c:	e026      	b.n	8011abc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	68d8      	ldr	r0, [r3, #12]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a76:	461a      	mov	r2, r3
 8011a78:	68b9      	ldr	r1, [r7, #8]
 8011a7a:	f005 f8d9 	bl	8016c30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	68da      	ldr	r2, [r3, #12]
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a86:	425b      	negs	r3, r3
 8011a88:	441a      	add	r2, r3
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	68da      	ldr	r2, [r3, #12]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d207      	bcs.n	8011aaa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	689a      	ldr	r2, [r3, #8]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa2:	425b      	negs	r3, r3
 8011aa4:	441a      	add	r2, r3
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2b02      	cmp	r3, #2
 8011aae:	d105      	bne.n	8011abc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d002      	beq.n	8011abc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	1c5a      	adds	r2, r3, #1
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011ac4:	697b      	ldr	r3, [r7, #20]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3718      	adds	r7, #24
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011ace:	b580      	push	{r7, lr}
 8011ad0:	b082      	sub	sp, #8
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d018      	beq.n	8011b12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	68da      	ldr	r2, [r3, #12]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae8:	441a      	add	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	68da      	ldr	r2, [r3, #12]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d303      	bcc.n	8011b02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681a      	ldr	r2, [r3, #0]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	68d9      	ldr	r1, [r3, #12]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	6838      	ldr	r0, [r7, #0]
 8011b0e:	f005 f88f 	bl	8016c30 <memcpy>
	}
}
 8011b12:	bf00      	nop
 8011b14:	3708      	adds	r7, #8
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011b22:	f001 ffab 	bl	8013a7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b2c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b2e:	e011      	b.n	8011b54 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d012      	beq.n	8011b5e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	3324      	adds	r3, #36	; 0x24
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f000 fd7d 	bl	801263c <xTaskRemoveFromEventList>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011b48:	f000 fe52 	bl	80127f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011b4c:	7bfb      	ldrb	r3, [r7, #15]
 8011b4e:	3b01      	subs	r3, #1
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	dce9      	bgt.n	8011b30 <prvUnlockQueue+0x16>
 8011b5c:	e000      	b.n	8011b60 <prvUnlockQueue+0x46>
					break;
 8011b5e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	22ff      	movs	r2, #255	; 0xff
 8011b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011b68:	f001 ffb6 	bl	8013ad8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011b6c:	f001 ff86 	bl	8013a7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b76:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b78:	e011      	b.n	8011b9e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	691b      	ldr	r3, [r3, #16]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d012      	beq.n	8011ba8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	3310      	adds	r3, #16
 8011b86:	4618      	mov	r0, r3
 8011b88:	f000 fd58 	bl	801263c <xTaskRemoveFromEventList>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d001      	beq.n	8011b96 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011b92:	f000 fe2d 	bl	80127f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011b96:	7bbb      	ldrb	r3, [r7, #14]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	b2db      	uxtb	r3, r3
 8011b9c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	dce9      	bgt.n	8011b7a <prvUnlockQueue+0x60>
 8011ba6:	e000      	b.n	8011baa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011ba8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	22ff      	movs	r2, #255	; 0xff
 8011bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011bb2:	f001 ff91 	bl	8013ad8 <vPortExitCritical>
}
 8011bb6:	bf00      	nop
 8011bb8:	3710      	adds	r7, #16
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011bc6:	f001 ff59 	bl	8013a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d102      	bne.n	8011bd8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	60fb      	str	r3, [r7, #12]
 8011bd6:	e001      	b.n	8011bdc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011bdc:	f001 ff7c 	bl	8013ad8 <vPortExitCritical>

	return xReturn;
 8011be0:	68fb      	ldr	r3, [r7, #12]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b084      	sub	sp, #16
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011bf2:	f001 ff43 	bl	8013a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d102      	bne.n	8011c08 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011c02:	2301      	movs	r3, #1
 8011c04:	60fb      	str	r3, [r7, #12]
 8011c06:	e001      	b.n	8011c0c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011c0c:	f001 ff64 	bl	8013ad8 <vPortExitCritical>

	return xReturn;
 8011c10:	68fb      	ldr	r3, [r7, #12]
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
	...

08011c1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b085      	sub	sp, #20
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c26:	2300      	movs	r3, #0
 8011c28:	60fb      	str	r3, [r7, #12]
 8011c2a:	e014      	b.n	8011c56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011c2c:	4a0e      	ldr	r2, [pc, #56]	; (8011c68 <vQueueAddToRegistry+0x4c>)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d10b      	bne.n	8011c50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011c38:	490b      	ldr	r1, [pc, #44]	; (8011c68 <vQueueAddToRegistry+0x4c>)
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	683a      	ldr	r2, [r7, #0]
 8011c3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011c42:	4a09      	ldr	r2, [pc, #36]	; (8011c68 <vQueueAddToRegistry+0x4c>)
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	00db      	lsls	r3, r3, #3
 8011c48:	4413      	add	r3, r2
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011c4e:	e005      	b.n	8011c5c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	3301      	adds	r3, #1
 8011c54:	60fb      	str	r3, [r7, #12]
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2b07      	cmp	r3, #7
 8011c5a:	d9e7      	bls.n	8011c2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011c5c:	bf00      	nop
 8011c5e:	3714      	adds	r7, #20
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr
 8011c68:	200050ec 	.word	0x200050ec

08011c6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011c74:	2300      	movs	r3, #0
 8011c76:	60fb      	str	r3, [r7, #12]
 8011c78:	e016      	b.n	8011ca8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011c7a:	4a10      	ldr	r2, [pc, #64]	; (8011cbc <vQueueUnregisterQueue+0x50>)
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	00db      	lsls	r3, r3, #3
 8011c80:	4413      	add	r3, r2
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d10b      	bne.n	8011ca2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011c8a:	4a0c      	ldr	r2, [pc, #48]	; (8011cbc <vQueueUnregisterQueue+0x50>)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2100      	movs	r1, #0
 8011c90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011c94:	4a09      	ldr	r2, [pc, #36]	; (8011cbc <vQueueUnregisterQueue+0x50>)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	00db      	lsls	r3, r3, #3
 8011c9a:	4413      	add	r3, r2
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	605a      	str	r2, [r3, #4]
				break;
 8011ca0:	e005      	b.n	8011cae <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	60fb      	str	r3, [r7, #12]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b07      	cmp	r3, #7
 8011cac:	d9e5      	bls.n	8011c7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011cae:	bf00      	nop
 8011cb0:	3714      	adds	r7, #20
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr
 8011cba:	bf00      	nop
 8011cbc:	200050ec 	.word	0x200050ec

08011cc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011cd0:	f001 fed4 	bl	8013a7c <vPortEnterCritical>
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011cda:	b25b      	sxtb	r3, r3
 8011cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ce0:	d103      	bne.n	8011cea <vQueueWaitForMessageRestricted+0x2a>
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cf0:	b25b      	sxtb	r3, r3
 8011cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cf6:	d103      	bne.n	8011d00 <vQueueWaitForMessageRestricted+0x40>
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d00:	f001 feea 	bl	8013ad8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d106      	bne.n	8011d1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	3324      	adds	r3, #36	; 0x24
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	68b9      	ldr	r1, [r7, #8]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 fc67 	bl	80125e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011d1a:	6978      	ldr	r0, [r7, #20]
 8011d1c:	f7ff fefd 	bl	8011b1a <prvUnlockQueue>
	}
 8011d20:	bf00      	nop
 8011d22:	3718      	adds	r7, #24
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b08e      	sub	sp, #56	; 0x38
 8011d2c:	af04      	add	r7, sp, #16
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
 8011d34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d109      	bne.n	8011d50 <xTaskCreateStatic+0x28>
 8011d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d40:	f383 8811 	msr	BASEPRI, r3
 8011d44:	f3bf 8f6f 	isb	sy
 8011d48:	f3bf 8f4f 	dsb	sy
 8011d4c:	623b      	str	r3, [r7, #32]
 8011d4e:	e7fe      	b.n	8011d4e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d109      	bne.n	8011d6a <xTaskCreateStatic+0x42>
 8011d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d5a:	f383 8811 	msr	BASEPRI, r3
 8011d5e:	f3bf 8f6f 	isb	sy
 8011d62:	f3bf 8f4f 	dsb	sy
 8011d66:	61fb      	str	r3, [r7, #28]
 8011d68:	e7fe      	b.n	8011d68 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011d6a:	235c      	movs	r3, #92	; 0x5c
 8011d6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	2b5c      	cmp	r3, #92	; 0x5c
 8011d72:	d009      	beq.n	8011d88 <xTaskCreateStatic+0x60>
 8011d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d78:	f383 8811 	msr	BASEPRI, r3
 8011d7c:	f3bf 8f6f 	isb	sy
 8011d80:	f3bf 8f4f 	dsb	sy
 8011d84:	61bb      	str	r3, [r7, #24]
 8011d86:	e7fe      	b.n	8011d86 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011d88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d01e      	beq.n	8011dce <xTaskCreateStatic+0xa6>
 8011d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d01b      	beq.n	8011dce <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da2:	2202      	movs	r2, #2
 8011da4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011da8:	2300      	movs	r3, #0
 8011daa:	9303      	str	r3, [sp, #12]
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	9302      	str	r3, [sp, #8]
 8011db0:	f107 0314 	add.w	r3, r7, #20
 8011db4:	9301      	str	r3, [sp, #4]
 8011db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	68b9      	ldr	r1, [r7, #8]
 8011dc0:	68f8      	ldr	r0, [r7, #12]
 8011dc2:	f000 f850 	bl	8011e66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011dc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dc8:	f000 f8dc 	bl	8011f84 <prvAddNewTaskToReadyList>
 8011dcc:	e001      	b.n	8011dd2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011dd2:	697b      	ldr	r3, [r7, #20]
	}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3728      	adds	r7, #40	; 0x28
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b08c      	sub	sp, #48	; 0x30
 8011de0:	af04      	add	r7, sp, #16
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	603b      	str	r3, [r7, #0]
 8011de8:	4613      	mov	r3, r2
 8011dea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011dec:	88fb      	ldrh	r3, [r7, #6]
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4618      	mov	r0, r3
 8011df2:	f001 ff5d 	bl	8013cb0 <pvPortMalloc>
 8011df6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d00e      	beq.n	8011e1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011dfe:	205c      	movs	r0, #92	; 0x5c
 8011e00:	f001 ff56 	bl	8013cb0 <pvPortMalloc>
 8011e04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d003      	beq.n	8011e14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	697a      	ldr	r2, [r7, #20]
 8011e10:	631a      	str	r2, [r3, #48]	; 0x30
 8011e12:	e005      	b.n	8011e20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011e14:	6978      	ldr	r0, [r7, #20]
 8011e16:	f002 f80d 	bl	8013e34 <vPortFree>
 8011e1a:	e001      	b.n	8011e20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d017      	beq.n	8011e56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011e2e:	88fa      	ldrh	r2, [r7, #6]
 8011e30:	2300      	movs	r3, #0
 8011e32:	9303      	str	r3, [sp, #12]
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	9302      	str	r3, [sp, #8]
 8011e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3a:	9301      	str	r3, [sp, #4]
 8011e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e3e:	9300      	str	r3, [sp, #0]
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	68b9      	ldr	r1, [r7, #8]
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f000 f80e 	bl	8011e66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e4a:	69f8      	ldr	r0, [r7, #28]
 8011e4c:	f000 f89a 	bl	8011f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011e50:	2301      	movs	r3, #1
 8011e52:	61bb      	str	r3, [r7, #24]
 8011e54:	e002      	b.n	8011e5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011e56:	f04f 33ff 	mov.w	r3, #4294967295
 8011e5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011e5c:	69bb      	ldr	r3, [r7, #24]
	}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3720      	adds	r7, #32
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b088      	sub	sp, #32
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	60f8      	str	r0, [r7, #12]
 8011e6e:	60b9      	str	r1, [r7, #8]
 8011e70:	607a      	str	r2, [r7, #4]
 8011e72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	21a5      	movs	r1, #165	; 0xa5
 8011e80:	f004 fee1 	bl	8016c46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e8e:	3b01      	subs	r3, #1
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4413      	add	r3, r2
 8011e94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	f023 0307 	bic.w	r3, r3, #7
 8011e9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	f003 0307 	and.w	r3, r3, #7
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d009      	beq.n	8011ebc <prvInitialiseNewTask+0x56>
 8011ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eac:	f383 8811 	msr	BASEPRI, r3
 8011eb0:	f3bf 8f6f 	isb	sy
 8011eb4:	f3bf 8f4f 	dsb	sy
 8011eb8:	617b      	str	r3, [r7, #20]
 8011eba:	e7fe      	b.n	8011eba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d01f      	beq.n	8011f02 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	61fb      	str	r3, [r7, #28]
 8011ec6:	e012      	b.n	8011eee <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011ec8:	68ba      	ldr	r2, [r7, #8]
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	4413      	add	r3, r2
 8011ece:	7819      	ldrb	r1, [r3, #0]
 8011ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	3334      	adds	r3, #52	; 0x34
 8011ed8:	460a      	mov	r2, r1
 8011eda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011edc:	68ba      	ldr	r2, [r7, #8]
 8011ede:	69fb      	ldr	r3, [r7, #28]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d006      	beq.n	8011ef6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	3301      	adds	r3, #1
 8011eec:	61fb      	str	r3, [r7, #28]
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	2b0f      	cmp	r3, #15
 8011ef2:	d9e9      	bls.n	8011ec8 <prvInitialiseNewTask+0x62>
 8011ef4:	e000      	b.n	8011ef8 <prvInitialiseNewTask+0x92>
			{
				break;
 8011ef6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efa:	2200      	movs	r2, #0
 8011efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011f00:	e003      	b.n	8011f0a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f0c:	2b37      	cmp	r3, #55	; 0x37
 8011f0e:	d901      	bls.n	8011f14 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011f10:	2337      	movs	r3, #55	; 0x37
 8011f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f22:	2200      	movs	r2, #0
 8011f24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f28:	3304      	adds	r3, #4
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fe fdc6 	bl	8010abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f32:	3318      	adds	r3, #24
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fe fdc1 	bl	8010abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f52:	2200      	movs	r2, #0
 8011f54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	68f9      	ldr	r1, [r7, #12]
 8011f62:	69b8      	ldr	r0, [r7, #24]
 8011f64:	f001 fc60 	bl	8013828 <pxPortInitialiseStack>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d002      	beq.n	8011f7a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f7a:	bf00      	nop
 8011f7c:	3720      	adds	r7, #32
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
	...

08011f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011f8c:	f001 fd76 	bl	8013a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011f90:	4b2d      	ldr	r3, [pc, #180]	; (8012048 <prvAddNewTaskToReadyList+0xc4>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	3301      	adds	r3, #1
 8011f96:	4a2c      	ldr	r2, [pc, #176]	; (8012048 <prvAddNewTaskToReadyList+0xc4>)
 8011f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011f9a:	4b2c      	ldr	r3, [pc, #176]	; (801204c <prvAddNewTaskToReadyList+0xc8>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d109      	bne.n	8011fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011fa2:	4a2a      	ldr	r2, [pc, #168]	; (801204c <prvAddNewTaskToReadyList+0xc8>)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011fa8:	4b27      	ldr	r3, [pc, #156]	; (8012048 <prvAddNewTaskToReadyList+0xc4>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d110      	bne.n	8011fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011fb0:	f000 fc68 	bl	8012884 <prvInitialiseTaskLists>
 8011fb4:	e00d      	b.n	8011fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011fb6:	4b26      	ldr	r3, [pc, #152]	; (8012050 <prvAddNewTaskToReadyList+0xcc>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d109      	bne.n	8011fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011fbe:	4b23      	ldr	r3, [pc, #140]	; (801204c <prvAddNewTaskToReadyList+0xc8>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d802      	bhi.n	8011fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011fcc:	4a1f      	ldr	r2, [pc, #124]	; (801204c <prvAddNewTaskToReadyList+0xc8>)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011fd2:	4b20      	ldr	r3, [pc, #128]	; (8012054 <prvAddNewTaskToReadyList+0xd0>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	4a1e      	ldr	r2, [pc, #120]	; (8012054 <prvAddNewTaskToReadyList+0xd0>)
 8011fda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011fdc:	4b1d      	ldr	r3, [pc, #116]	; (8012054 <prvAddNewTaskToReadyList+0xd0>)
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fe8:	4b1b      	ldr	r3, [pc, #108]	; (8012058 <prvAddNewTaskToReadyList+0xd4>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d903      	bls.n	8011ff8 <prvAddNewTaskToReadyList+0x74>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff4:	4a18      	ldr	r2, [pc, #96]	; (8012058 <prvAddNewTaskToReadyList+0xd4>)
 8011ff6:	6013      	str	r3, [r2, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	4413      	add	r3, r2
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	4a15      	ldr	r2, [pc, #84]	; (801205c <prvAddNewTaskToReadyList+0xd8>)
 8012006:	441a      	add	r2, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	3304      	adds	r3, #4
 801200c:	4619      	mov	r1, r3
 801200e:	4610      	mov	r0, r2
 8012010:	f7fe fd61 	bl	8010ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012014:	f001 fd60 	bl	8013ad8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012018:	4b0d      	ldr	r3, [pc, #52]	; (8012050 <prvAddNewTaskToReadyList+0xcc>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d00e      	beq.n	801203e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012020:	4b0a      	ldr	r3, [pc, #40]	; (801204c <prvAddNewTaskToReadyList+0xc8>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801202a:	429a      	cmp	r2, r3
 801202c:	d207      	bcs.n	801203e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801202e:	4b0c      	ldr	r3, [pc, #48]	; (8012060 <prvAddNewTaskToReadyList+0xdc>)
 8012030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012034:	601a      	str	r2, [r3, #0]
 8012036:	f3bf 8f4f 	dsb	sy
 801203a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801203e:	bf00      	nop
 8012040:	3708      	adds	r7, #8
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	200021ec 	.word	0x200021ec
 801204c:	20001d18 	.word	0x20001d18
 8012050:	200021f8 	.word	0x200021f8
 8012054:	20002208 	.word	0x20002208
 8012058:	200021f4 	.word	0x200021f4
 801205c:	20001d1c 	.word	0x20001d1c
 8012060:	e000ed04 	.word	0xe000ed04

08012064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801206c:	2300      	movs	r3, #0
 801206e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d016      	beq.n	80120a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012076:	4b13      	ldr	r3, [pc, #76]	; (80120c4 <vTaskDelay+0x60>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d009      	beq.n	8012092 <vTaskDelay+0x2e>
 801207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012082:	f383 8811 	msr	BASEPRI, r3
 8012086:	f3bf 8f6f 	isb	sy
 801208a:	f3bf 8f4f 	dsb	sy
 801208e:	60bb      	str	r3, [r7, #8]
 8012090:	e7fe      	b.n	8012090 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012092:	f000 f87f 	bl	8012194 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012096:	2100      	movs	r1, #0
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f001 f82b 	bl	80130f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801209e:	f000 f8bf 	bl	8012220 <xTaskResumeAll>
 80120a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d107      	bne.n	80120ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80120aa:	4b07      	ldr	r3, [pc, #28]	; (80120c8 <vTaskDelay+0x64>)
 80120ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120b0:	601a      	str	r2, [r3, #0]
 80120b2:	f3bf 8f4f 	dsb	sy
 80120b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80120ba:	bf00      	nop
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	20002214 	.word	0x20002214
 80120c8:	e000ed04 	.word	0xe000ed04

080120cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b08a      	sub	sp, #40	; 0x28
 80120d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80120d2:	2300      	movs	r3, #0
 80120d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80120d6:	2300      	movs	r3, #0
 80120d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80120da:	463a      	mov	r2, r7
 80120dc:	1d39      	adds	r1, r7, #4
 80120de:	f107 0308 	add.w	r3, r7, #8
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fe fc96 	bl	8010a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80120e8:	6839      	ldr	r1, [r7, #0]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	68ba      	ldr	r2, [r7, #8]
 80120ee:	9202      	str	r2, [sp, #8]
 80120f0:	9301      	str	r3, [sp, #4]
 80120f2:	2300      	movs	r3, #0
 80120f4:	9300      	str	r3, [sp, #0]
 80120f6:	2300      	movs	r3, #0
 80120f8:	460a      	mov	r2, r1
 80120fa:	4920      	ldr	r1, [pc, #128]	; (801217c <vTaskStartScheduler+0xb0>)
 80120fc:	4820      	ldr	r0, [pc, #128]	; (8012180 <vTaskStartScheduler+0xb4>)
 80120fe:	f7ff fe13 	bl	8011d28 <xTaskCreateStatic>
 8012102:	4602      	mov	r2, r0
 8012104:	4b1f      	ldr	r3, [pc, #124]	; (8012184 <vTaskStartScheduler+0xb8>)
 8012106:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012108:	4b1e      	ldr	r3, [pc, #120]	; (8012184 <vTaskStartScheduler+0xb8>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d002      	beq.n	8012116 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012110:	2301      	movs	r3, #1
 8012112:	617b      	str	r3, [r7, #20]
 8012114:	e001      	b.n	801211a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012116:	2300      	movs	r3, #0
 8012118:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	2b01      	cmp	r3, #1
 801211e:	d102      	bne.n	8012126 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012120:	f001 f83c 	bl	801319c <xTimerCreateTimerTask>
 8012124:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d115      	bne.n	8012158 <vTaskStartScheduler+0x8c>
 801212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012130:	f383 8811 	msr	BASEPRI, r3
 8012134:	f3bf 8f6f 	isb	sy
 8012138:	f3bf 8f4f 	dsb	sy
 801213c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801213e:	4b12      	ldr	r3, [pc, #72]	; (8012188 <vTaskStartScheduler+0xbc>)
 8012140:	f04f 32ff 	mov.w	r2, #4294967295
 8012144:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012146:	4b11      	ldr	r3, [pc, #68]	; (801218c <vTaskStartScheduler+0xc0>)
 8012148:	2201      	movs	r2, #1
 801214a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801214c:	4b10      	ldr	r3, [pc, #64]	; (8012190 <vTaskStartScheduler+0xc4>)
 801214e:	2200      	movs	r2, #0
 8012150:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012152:	f001 fbf5 	bl	8013940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012156:	e00d      	b.n	8012174 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801215e:	d109      	bne.n	8012174 <vTaskStartScheduler+0xa8>
 8012160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012164:	f383 8811 	msr	BASEPRI, r3
 8012168:	f3bf 8f6f 	isb	sy
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	60fb      	str	r3, [r7, #12]
 8012172:	e7fe      	b.n	8012172 <vTaskStartScheduler+0xa6>
}
 8012174:	bf00      	nop
 8012176:	3718      	adds	r7, #24
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	08016d38 	.word	0x08016d38
 8012180:	08012809 	.word	0x08012809
 8012184:	20002210 	.word	0x20002210
 8012188:	2000220c 	.word	0x2000220c
 801218c:	200021f8 	.word	0x200021f8
 8012190:	200021f0 	.word	0x200021f0

08012194 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012194:	b480      	push	{r7}
 8012196:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012198:	4b04      	ldr	r3, [pc, #16]	; (80121ac <vTaskSuspendAll+0x18>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	3301      	adds	r3, #1
 801219e:	4a03      	ldr	r2, [pc, #12]	; (80121ac <vTaskSuspendAll+0x18>)
 80121a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80121a2:	bf00      	nop
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr
 80121ac:	20002214 	.word	0x20002214

080121b0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80121b6:	2300      	movs	r3, #0
 80121b8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80121ba:	4b14      	ldr	r3, [pc, #80]	; (801220c <prvGetExpectedIdleTime+0x5c>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80121c2:	2301      	movs	r3, #1
 80121c4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80121c6:	4b12      	ldr	r3, [pc, #72]	; (8012210 <prvGetExpectedIdleTime+0x60>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d002      	beq.n	80121d6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80121d0:	2300      	movs	r3, #0
 80121d2:	607b      	str	r3, [r7, #4]
 80121d4:	e012      	b.n	80121fc <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80121d6:	4b0f      	ldr	r3, [pc, #60]	; (8012214 <prvGetExpectedIdleTime+0x64>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2b01      	cmp	r3, #1
 80121dc:	d902      	bls.n	80121e4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80121de:	2300      	movs	r3, #0
 80121e0:	607b      	str	r3, [r7, #4]
 80121e2:	e00b      	b.n	80121fc <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d002      	beq.n	80121f0 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80121ea:	2300      	movs	r3, #0
 80121ec:	607b      	str	r3, [r7, #4]
 80121ee:	e005      	b.n	80121fc <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80121f0:	4b09      	ldr	r3, [pc, #36]	; (8012218 <prvGetExpectedIdleTime+0x68>)
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	4b09      	ldr	r3, [pc, #36]	; (801221c <prvGetExpectedIdleTime+0x6c>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	1ad3      	subs	r3, r2, r3
 80121fa:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80121fc:	687b      	ldr	r3, [r7, #4]
	}
 80121fe:	4618      	mov	r0, r3
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	200021f4 	.word	0x200021f4
 8012210:	20001d18 	.word	0x20001d18
 8012214:	20001d1c 	.word	0x20001d1c
 8012218:	2000220c 	.word	0x2000220c
 801221c:	200021f0 	.word	0x200021f0

08012220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012226:	2300      	movs	r3, #0
 8012228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801222a:	2300      	movs	r3, #0
 801222c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801222e:	4b41      	ldr	r3, [pc, #260]	; (8012334 <xTaskResumeAll+0x114>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d109      	bne.n	801224a <xTaskResumeAll+0x2a>
 8012236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223a:	f383 8811 	msr	BASEPRI, r3
 801223e:	f3bf 8f6f 	isb	sy
 8012242:	f3bf 8f4f 	dsb	sy
 8012246:	603b      	str	r3, [r7, #0]
 8012248:	e7fe      	b.n	8012248 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801224a:	f001 fc17 	bl	8013a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801224e:	4b39      	ldr	r3, [pc, #228]	; (8012334 <xTaskResumeAll+0x114>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	3b01      	subs	r3, #1
 8012254:	4a37      	ldr	r2, [pc, #220]	; (8012334 <xTaskResumeAll+0x114>)
 8012256:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012258:	4b36      	ldr	r3, [pc, #216]	; (8012334 <xTaskResumeAll+0x114>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d162      	bne.n	8012326 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012260:	4b35      	ldr	r3, [pc, #212]	; (8012338 <xTaskResumeAll+0x118>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d05e      	beq.n	8012326 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012268:	e02f      	b.n	80122ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801226a:	4b34      	ldr	r3, [pc, #208]	; (801233c <xTaskResumeAll+0x11c>)
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	3318      	adds	r3, #24
 8012276:	4618      	mov	r0, r3
 8012278:	f7fe fc8a 	bl	8010b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	3304      	adds	r3, #4
 8012280:	4618      	mov	r0, r3
 8012282:	f7fe fc85 	bl	8010b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801228a:	4b2d      	ldr	r3, [pc, #180]	; (8012340 <xTaskResumeAll+0x120>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	429a      	cmp	r2, r3
 8012290:	d903      	bls.n	801229a <xTaskResumeAll+0x7a>
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012296:	4a2a      	ldr	r2, [pc, #168]	; (8012340 <xTaskResumeAll+0x120>)
 8012298:	6013      	str	r3, [r2, #0]
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801229e:	4613      	mov	r3, r2
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	4413      	add	r3, r2
 80122a4:	009b      	lsls	r3, r3, #2
 80122a6:	4a27      	ldr	r2, [pc, #156]	; (8012344 <xTaskResumeAll+0x124>)
 80122a8:	441a      	add	r2, r3
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	3304      	adds	r3, #4
 80122ae:	4619      	mov	r1, r3
 80122b0:	4610      	mov	r0, r2
 80122b2:	f7fe fc10 	bl	8010ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ba:	4b23      	ldr	r3, [pc, #140]	; (8012348 <xTaskResumeAll+0x128>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d302      	bcc.n	80122ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80122c4:	4b21      	ldr	r3, [pc, #132]	; (801234c <xTaskResumeAll+0x12c>)
 80122c6:	2201      	movs	r2, #1
 80122c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80122ca:	4b1c      	ldr	r3, [pc, #112]	; (801233c <xTaskResumeAll+0x11c>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d1cb      	bne.n	801226a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d001      	beq.n	80122dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80122d8:	f000 fb6e 	bl	80129b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80122dc:	4b1c      	ldr	r3, [pc, #112]	; (8012350 <xTaskResumeAll+0x130>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d010      	beq.n	801230a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80122e8:	f000 f846 	bl	8012378 <xTaskIncrementTick>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d002      	beq.n	80122f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80122f2:	4b16      	ldr	r3, [pc, #88]	; (801234c <xTaskResumeAll+0x12c>)
 80122f4:	2201      	movs	r2, #1
 80122f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	3b01      	subs	r3, #1
 80122fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d1f1      	bne.n	80122e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012304:	4b12      	ldr	r3, [pc, #72]	; (8012350 <xTaskResumeAll+0x130>)
 8012306:	2200      	movs	r2, #0
 8012308:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801230a:	4b10      	ldr	r3, [pc, #64]	; (801234c <xTaskResumeAll+0x12c>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d009      	beq.n	8012326 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012312:	2301      	movs	r3, #1
 8012314:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012316:	4b0f      	ldr	r3, [pc, #60]	; (8012354 <xTaskResumeAll+0x134>)
 8012318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801231c:	601a      	str	r2, [r3, #0]
 801231e:	f3bf 8f4f 	dsb	sy
 8012322:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012326:	f001 fbd7 	bl	8013ad8 <vPortExitCritical>

	return xAlreadyYielded;
 801232a:	68bb      	ldr	r3, [r7, #8]
}
 801232c:	4618      	mov	r0, r3
 801232e:	3710      	adds	r7, #16
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	20002214 	.word	0x20002214
 8012338:	200021ec 	.word	0x200021ec
 801233c:	200021ac 	.word	0x200021ac
 8012340:	200021f4 	.word	0x200021f4
 8012344:	20001d1c 	.word	0x20001d1c
 8012348:	20001d18 	.word	0x20001d18
 801234c:	20002200 	.word	0x20002200
 8012350:	200021fc 	.word	0x200021fc
 8012354:	e000ed04 	.word	0xe000ed04

08012358 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012358:	b480      	push	{r7}
 801235a:	b083      	sub	sp, #12
 801235c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801235e:	4b05      	ldr	r3, [pc, #20]	; (8012374 <xTaskGetTickCount+0x1c>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012364:	687b      	ldr	r3, [r7, #4]
}
 8012366:	4618      	mov	r0, r3
 8012368:	370c      	adds	r7, #12
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop
 8012374:	200021f0 	.word	0x200021f0

08012378 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b086      	sub	sp, #24
 801237c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801237e:	2300      	movs	r3, #0
 8012380:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012382:	4b4e      	ldr	r3, [pc, #312]	; (80124bc <xTaskIncrementTick+0x144>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	f040 8088 	bne.w	801249c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801238c:	4b4c      	ldr	r3, [pc, #304]	; (80124c0 <xTaskIncrementTick+0x148>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	3301      	adds	r3, #1
 8012392:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012394:	4a4a      	ldr	r2, [pc, #296]	; (80124c0 <xTaskIncrementTick+0x148>)
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d11f      	bne.n	80123e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80123a0:	4b48      	ldr	r3, [pc, #288]	; (80124c4 <xTaskIncrementTick+0x14c>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d009      	beq.n	80123be <xTaskIncrementTick+0x46>
 80123aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ae:	f383 8811 	msr	BASEPRI, r3
 80123b2:	f3bf 8f6f 	isb	sy
 80123b6:	f3bf 8f4f 	dsb	sy
 80123ba:	603b      	str	r3, [r7, #0]
 80123bc:	e7fe      	b.n	80123bc <xTaskIncrementTick+0x44>
 80123be:	4b41      	ldr	r3, [pc, #260]	; (80124c4 <xTaskIncrementTick+0x14c>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	60fb      	str	r3, [r7, #12]
 80123c4:	4b40      	ldr	r3, [pc, #256]	; (80124c8 <xTaskIncrementTick+0x150>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	4a3e      	ldr	r2, [pc, #248]	; (80124c4 <xTaskIncrementTick+0x14c>)
 80123ca:	6013      	str	r3, [r2, #0]
 80123cc:	4a3e      	ldr	r2, [pc, #248]	; (80124c8 <xTaskIncrementTick+0x150>)
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	6013      	str	r3, [r2, #0]
 80123d2:	4b3e      	ldr	r3, [pc, #248]	; (80124cc <xTaskIncrementTick+0x154>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	3301      	adds	r3, #1
 80123d8:	4a3c      	ldr	r2, [pc, #240]	; (80124cc <xTaskIncrementTick+0x154>)
 80123da:	6013      	str	r3, [r2, #0]
 80123dc:	f000 faec 	bl	80129b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80123e0:	4b3b      	ldr	r3, [pc, #236]	; (80124d0 <xTaskIncrementTick+0x158>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	693a      	ldr	r2, [r7, #16]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d349      	bcc.n	801247e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123ea:	4b36      	ldr	r3, [pc, #216]	; (80124c4 <xTaskIncrementTick+0x14c>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d104      	bne.n	80123fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123f4:	4b36      	ldr	r3, [pc, #216]	; (80124d0 <xTaskIncrementTick+0x158>)
 80123f6:	f04f 32ff 	mov.w	r2, #4294967295
 80123fa:	601a      	str	r2, [r3, #0]
					break;
 80123fc:	e03f      	b.n	801247e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123fe:	4b31      	ldr	r3, [pc, #196]	; (80124c4 <xTaskIncrementTick+0x14c>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	68db      	ldr	r3, [r3, #12]
 8012406:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801240e:	693a      	ldr	r2, [r7, #16]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	429a      	cmp	r2, r3
 8012414:	d203      	bcs.n	801241e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012416:	4a2e      	ldr	r2, [pc, #184]	; (80124d0 <xTaskIncrementTick+0x158>)
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801241c:	e02f      	b.n	801247e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	3304      	adds	r3, #4
 8012422:	4618      	mov	r0, r3
 8012424:	f7fe fbb4 	bl	8010b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801242c:	2b00      	cmp	r3, #0
 801242e:	d004      	beq.n	801243a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	3318      	adds	r3, #24
 8012434:	4618      	mov	r0, r3
 8012436:	f7fe fbab 	bl	8010b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801243e:	4b25      	ldr	r3, [pc, #148]	; (80124d4 <xTaskIncrementTick+0x15c>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	429a      	cmp	r2, r3
 8012444:	d903      	bls.n	801244e <xTaskIncrementTick+0xd6>
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801244a:	4a22      	ldr	r2, [pc, #136]	; (80124d4 <xTaskIncrementTick+0x15c>)
 801244c:	6013      	str	r3, [r2, #0]
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012452:	4613      	mov	r3, r2
 8012454:	009b      	lsls	r3, r3, #2
 8012456:	4413      	add	r3, r2
 8012458:	009b      	lsls	r3, r3, #2
 801245a:	4a1f      	ldr	r2, [pc, #124]	; (80124d8 <xTaskIncrementTick+0x160>)
 801245c:	441a      	add	r2, r3
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	3304      	adds	r3, #4
 8012462:	4619      	mov	r1, r3
 8012464:	4610      	mov	r0, r2
 8012466:	f7fe fb36 	bl	8010ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801246e:	4b1b      	ldr	r3, [pc, #108]	; (80124dc <xTaskIncrementTick+0x164>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012474:	429a      	cmp	r2, r3
 8012476:	d3b8      	bcc.n	80123ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012478:	2301      	movs	r3, #1
 801247a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801247c:	e7b5      	b.n	80123ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801247e:	4b17      	ldr	r3, [pc, #92]	; (80124dc <xTaskIncrementTick+0x164>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012484:	4914      	ldr	r1, [pc, #80]	; (80124d8 <xTaskIncrementTick+0x160>)
 8012486:	4613      	mov	r3, r2
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	4413      	add	r3, r2
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	440b      	add	r3, r1
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2b01      	cmp	r3, #1
 8012494:	d907      	bls.n	80124a6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8012496:	2301      	movs	r3, #1
 8012498:	617b      	str	r3, [r7, #20]
 801249a:	e004      	b.n	80124a6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801249c:	4b10      	ldr	r3, [pc, #64]	; (80124e0 <xTaskIncrementTick+0x168>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	3301      	adds	r3, #1
 80124a2:	4a0f      	ldr	r2, [pc, #60]	; (80124e0 <xTaskIncrementTick+0x168>)
 80124a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80124a6:	4b0f      	ldr	r3, [pc, #60]	; (80124e4 <xTaskIncrementTick+0x16c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d001      	beq.n	80124b2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80124ae:	2301      	movs	r3, #1
 80124b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80124b2:	697b      	ldr	r3, [r7, #20]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3718      	adds	r7, #24
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}
 80124bc:	20002214 	.word	0x20002214
 80124c0:	200021f0 	.word	0x200021f0
 80124c4:	200021a4 	.word	0x200021a4
 80124c8:	200021a8 	.word	0x200021a8
 80124cc:	20002204 	.word	0x20002204
 80124d0:	2000220c 	.word	0x2000220c
 80124d4:	200021f4 	.word	0x200021f4
 80124d8:	20001d1c 	.word	0x20001d1c
 80124dc:	20001d18 	.word	0x20001d18
 80124e0:	200021fc 	.word	0x200021fc
 80124e4:	20002200 	.word	0x20002200

080124e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80124e8:	b480      	push	{r7}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80124ee:	4b27      	ldr	r3, [pc, #156]	; (801258c <vTaskSwitchContext+0xa4>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d003      	beq.n	80124fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80124f6:	4b26      	ldr	r3, [pc, #152]	; (8012590 <vTaskSwitchContext+0xa8>)
 80124f8:	2201      	movs	r2, #1
 80124fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80124fc:	e040      	b.n	8012580 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80124fe:	4b24      	ldr	r3, [pc, #144]	; (8012590 <vTaskSwitchContext+0xa8>)
 8012500:	2200      	movs	r2, #0
 8012502:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012504:	4b23      	ldr	r3, [pc, #140]	; (8012594 <vTaskSwitchContext+0xac>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	60fb      	str	r3, [r7, #12]
 801250a:	e00f      	b.n	801252c <vTaskSwitchContext+0x44>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d109      	bne.n	8012526 <vTaskSwitchContext+0x3e>
 8012512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012516:	f383 8811 	msr	BASEPRI, r3
 801251a:	f3bf 8f6f 	isb	sy
 801251e:	f3bf 8f4f 	dsb	sy
 8012522:	607b      	str	r3, [r7, #4]
 8012524:	e7fe      	b.n	8012524 <vTaskSwitchContext+0x3c>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	3b01      	subs	r3, #1
 801252a:	60fb      	str	r3, [r7, #12]
 801252c:	491a      	ldr	r1, [pc, #104]	; (8012598 <vTaskSwitchContext+0xb0>)
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	4613      	mov	r3, r2
 8012532:	009b      	lsls	r3, r3, #2
 8012534:	4413      	add	r3, r2
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	440b      	add	r3, r1
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d0e5      	beq.n	801250c <vTaskSwitchContext+0x24>
 8012540:	68fa      	ldr	r2, [r7, #12]
 8012542:	4613      	mov	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	4413      	add	r3, r2
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	4a13      	ldr	r2, [pc, #76]	; (8012598 <vTaskSwitchContext+0xb0>)
 801254c:	4413      	add	r3, r2
 801254e:	60bb      	str	r3, [r7, #8]
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	685a      	ldr	r2, [r3, #4]
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	605a      	str	r2, [r3, #4]
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	685a      	ldr	r2, [r3, #4]
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	3308      	adds	r3, #8
 8012562:	429a      	cmp	r2, r3
 8012564:	d104      	bne.n	8012570 <vTaskSwitchContext+0x88>
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	685a      	ldr	r2, [r3, #4]
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	605a      	str	r2, [r3, #4]
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	4a09      	ldr	r2, [pc, #36]	; (801259c <vTaskSwitchContext+0xb4>)
 8012578:	6013      	str	r3, [r2, #0]
 801257a:	4a06      	ldr	r2, [pc, #24]	; (8012594 <vTaskSwitchContext+0xac>)
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	6013      	str	r3, [r2, #0]
}
 8012580:	bf00      	nop
 8012582:	3714      	adds	r7, #20
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr
 801258c:	20002214 	.word	0x20002214
 8012590:	20002200 	.word	0x20002200
 8012594:	200021f4 	.word	0x200021f4
 8012598:	20001d1c 	.word	0x20001d1c
 801259c:	20001d18 	.word	0x20001d18

080125a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d109      	bne.n	80125c4 <vTaskPlaceOnEventList+0x24>
 80125b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	60fb      	str	r3, [r7, #12]
 80125c2:	e7fe      	b.n	80125c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80125c4:	4b07      	ldr	r3, [pc, #28]	; (80125e4 <vTaskPlaceOnEventList+0x44>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	3318      	adds	r3, #24
 80125ca:	4619      	mov	r1, r3
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7fe faa6 	bl	8010b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80125d2:	2101      	movs	r1, #1
 80125d4:	6838      	ldr	r0, [r7, #0]
 80125d6:	f000 fd8d 	bl	80130f4 <prvAddCurrentTaskToDelayedList>
}
 80125da:	bf00      	nop
 80125dc:	3710      	adds	r7, #16
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	20001d18 	.word	0x20001d18

080125e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d109      	bne.n	801260e <vTaskPlaceOnEventListRestricted+0x26>
 80125fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125fe:	f383 8811 	msr	BASEPRI, r3
 8012602:	f3bf 8f6f 	isb	sy
 8012606:	f3bf 8f4f 	dsb	sy
 801260a:	617b      	str	r3, [r7, #20]
 801260c:	e7fe      	b.n	801260c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801260e:	4b0a      	ldr	r3, [pc, #40]	; (8012638 <vTaskPlaceOnEventListRestricted+0x50>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	3318      	adds	r3, #24
 8012614:	4619      	mov	r1, r3
 8012616:	68f8      	ldr	r0, [r7, #12]
 8012618:	f7fe fa5d 	bl	8010ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d002      	beq.n	8012628 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8012622:	f04f 33ff 	mov.w	r3, #4294967295
 8012626:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012628:	6879      	ldr	r1, [r7, #4]
 801262a:	68b8      	ldr	r0, [r7, #8]
 801262c:	f000 fd62 	bl	80130f4 <prvAddCurrentTaskToDelayedList>
	}
 8012630:	bf00      	nop
 8012632:	3718      	adds	r7, #24
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}
 8012638:	20001d18 	.word	0x20001d18

0801263c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d109      	bne.n	8012666 <xTaskRemoveFromEventList+0x2a>
 8012652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012656:	f383 8811 	msr	BASEPRI, r3
 801265a:	f3bf 8f6f 	isb	sy
 801265e:	f3bf 8f4f 	dsb	sy
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	e7fe      	b.n	8012664 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	3318      	adds	r3, #24
 801266a:	4618      	mov	r0, r3
 801266c:	f7fe fa90 	bl	8010b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012670:	4b1e      	ldr	r3, [pc, #120]	; (80126ec <xTaskRemoveFromEventList+0xb0>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d11f      	bne.n	80126b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	3304      	adds	r3, #4
 801267c:	4618      	mov	r0, r3
 801267e:	f7fe fa87 	bl	8010b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012686:	4b1a      	ldr	r3, [pc, #104]	; (80126f0 <xTaskRemoveFromEventList+0xb4>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	429a      	cmp	r2, r3
 801268c:	d903      	bls.n	8012696 <xTaskRemoveFromEventList+0x5a>
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012692:	4a17      	ldr	r2, [pc, #92]	; (80126f0 <xTaskRemoveFromEventList+0xb4>)
 8012694:	6013      	str	r3, [r2, #0]
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801269a:	4613      	mov	r3, r2
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	4413      	add	r3, r2
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	4a14      	ldr	r2, [pc, #80]	; (80126f4 <xTaskRemoveFromEventList+0xb8>)
 80126a4:	441a      	add	r2, r3
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	3304      	adds	r3, #4
 80126aa:	4619      	mov	r1, r3
 80126ac:	4610      	mov	r0, r2
 80126ae:	f7fe fa12 	bl	8010ad6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80126b2:	f000 f981 	bl	80129b8 <prvResetNextTaskUnblockTime>
 80126b6:	e005      	b.n	80126c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80126b8:	693b      	ldr	r3, [r7, #16]
 80126ba:	3318      	adds	r3, #24
 80126bc:	4619      	mov	r1, r3
 80126be:	480e      	ldr	r0, [pc, #56]	; (80126f8 <xTaskRemoveFromEventList+0xbc>)
 80126c0:	f7fe fa09 	bl	8010ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126c8:	4b0c      	ldr	r3, [pc, #48]	; (80126fc <xTaskRemoveFromEventList+0xc0>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d905      	bls.n	80126de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80126d2:	2301      	movs	r3, #1
 80126d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80126d6:	4b0a      	ldr	r3, [pc, #40]	; (8012700 <xTaskRemoveFromEventList+0xc4>)
 80126d8:	2201      	movs	r2, #1
 80126da:	601a      	str	r2, [r3, #0]
 80126dc:	e001      	b.n	80126e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80126de:	2300      	movs	r3, #0
 80126e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80126e2:	697b      	ldr	r3, [r7, #20]
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3718      	adds	r7, #24
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	20002214 	.word	0x20002214
 80126f0:	200021f4 	.word	0x200021f4
 80126f4:	20001d1c 	.word	0x20001d1c
 80126f8:	200021ac 	.word	0x200021ac
 80126fc:	20001d18 	.word	0x20001d18
 8012700:	20002200 	.word	0x20002200

08012704 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801270c:	4b06      	ldr	r3, [pc, #24]	; (8012728 <vTaskInternalSetTimeOutState+0x24>)
 801270e:	681a      	ldr	r2, [r3, #0]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012714:	4b05      	ldr	r3, [pc, #20]	; (801272c <vTaskInternalSetTimeOutState+0x28>)
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	605a      	str	r2, [r3, #4]
}
 801271c:	bf00      	nop
 801271e:	370c      	adds	r7, #12
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr
 8012728:	20002204 	.word	0x20002204
 801272c:	200021f0 	.word	0x200021f0

08012730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b088      	sub	sp, #32
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d109      	bne.n	8012754 <xTaskCheckForTimeOut+0x24>
 8012740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012744:	f383 8811 	msr	BASEPRI, r3
 8012748:	f3bf 8f6f 	isb	sy
 801274c:	f3bf 8f4f 	dsb	sy
 8012750:	613b      	str	r3, [r7, #16]
 8012752:	e7fe      	b.n	8012752 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d109      	bne.n	801276e <xTaskCheckForTimeOut+0x3e>
 801275a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801275e:	f383 8811 	msr	BASEPRI, r3
 8012762:	f3bf 8f6f 	isb	sy
 8012766:	f3bf 8f4f 	dsb	sy
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	e7fe      	b.n	801276c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801276e:	f001 f985 	bl	8013a7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012772:	4b1d      	ldr	r3, [pc, #116]	; (80127e8 <xTaskCheckForTimeOut+0xb8>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	69ba      	ldr	r2, [r7, #24]
 801277e:	1ad3      	subs	r3, r2, r3
 8012780:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801278a:	d102      	bne.n	8012792 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801278c:	2300      	movs	r3, #0
 801278e:	61fb      	str	r3, [r7, #28]
 8012790:	e023      	b.n	80127da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	4b15      	ldr	r3, [pc, #84]	; (80127ec <xTaskCheckForTimeOut+0xbc>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	429a      	cmp	r2, r3
 801279c:	d007      	beq.n	80127ae <xTaskCheckForTimeOut+0x7e>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	69ba      	ldr	r2, [r7, #24]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d302      	bcc.n	80127ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80127a8:	2301      	movs	r3, #1
 80127aa:	61fb      	str	r3, [r7, #28]
 80127ac:	e015      	b.n	80127da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	697a      	ldr	r2, [r7, #20]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d20b      	bcs.n	80127d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	1ad2      	subs	r2, r2, r3
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7ff ff9d 	bl	8012704 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80127ca:	2300      	movs	r3, #0
 80127cc:	61fb      	str	r3, [r7, #28]
 80127ce:	e004      	b.n	80127da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2200      	movs	r2, #0
 80127d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80127d6:	2301      	movs	r3, #1
 80127d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80127da:	f001 f97d 	bl	8013ad8 <vPortExitCritical>

	return xReturn;
 80127de:	69fb      	ldr	r3, [r7, #28]
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3720      	adds	r7, #32
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	200021f0 	.word	0x200021f0
 80127ec:	20002204 	.word	0x20002204

080127f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80127f0:	b480      	push	{r7}
 80127f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80127f4:	4b03      	ldr	r3, [pc, #12]	; (8012804 <vTaskMissedYield+0x14>)
 80127f6:	2201      	movs	r2, #1
 80127f8:	601a      	str	r2, [r3, #0]
}
 80127fa:	bf00      	nop
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr
 8012804:	20002200 	.word	0x20002200

08012808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012810:	f000 f878 	bl	8012904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012814:	4b17      	ldr	r3, [pc, #92]	; (8012874 <prvIdleTask+0x6c>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b01      	cmp	r3, #1
 801281a:	d907      	bls.n	801282c <prvIdleTask+0x24>
			{
				taskYIELD();
 801281c:	4b16      	ldr	r3, [pc, #88]	; (8012878 <prvIdleTask+0x70>)
 801281e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012822:	601a      	str	r2, [r3, #0]
 8012824:	f3bf 8f4f 	dsb	sy
 8012828:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 801282c:	f7ff fcc0 	bl	80121b0 <prvGetExpectedIdleTime>
 8012830:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d9eb      	bls.n	8012810 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8012838:	f7ff fcac 	bl	8012194 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 801283c:	4b0f      	ldr	r3, [pc, #60]	; (801287c <prvIdleTask+0x74>)
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	4b0f      	ldr	r3, [pc, #60]	; (8012880 <prvIdleTask+0x78>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	429a      	cmp	r2, r3
 8012846:	d209      	bcs.n	801285c <prvIdleTask+0x54>
 8012848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284c:	f383 8811 	msr	BASEPRI, r3
 8012850:	f3bf 8f6f 	isb	sy
 8012854:	f3bf 8f4f 	dsb	sy
 8012858:	60bb      	str	r3, [r7, #8]
 801285a:	e7fe      	b.n	801285a <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 801285c:	f7ff fca8 	bl	80121b0 <prvGetExpectedIdleTime>
 8012860:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2b01      	cmp	r3, #1
 8012866:	d902      	bls.n	801286e <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8012868:	68f8      	ldr	r0, [r7, #12]
 801286a:	f7ef fcba 	bl	80021e2 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 801286e:	f7ff fcd7 	bl	8012220 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8012872:	e7cd      	b.n	8012810 <prvIdleTask+0x8>
 8012874:	20001d1c 	.word	0x20001d1c
 8012878:	e000ed04 	.word	0xe000ed04
 801287c:	2000220c 	.word	0x2000220c
 8012880:	200021f0 	.word	0x200021f0

08012884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801288a:	2300      	movs	r3, #0
 801288c:	607b      	str	r3, [r7, #4]
 801288e:	e00c      	b.n	80128aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	4613      	mov	r3, r2
 8012894:	009b      	lsls	r3, r3, #2
 8012896:	4413      	add	r3, r2
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	4a12      	ldr	r2, [pc, #72]	; (80128e4 <prvInitialiseTaskLists+0x60>)
 801289c:	4413      	add	r3, r2
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fe f8ec 	bl	8010a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	3301      	adds	r3, #1
 80128a8:	607b      	str	r3, [r7, #4]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b37      	cmp	r3, #55	; 0x37
 80128ae:	d9ef      	bls.n	8012890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80128b0:	480d      	ldr	r0, [pc, #52]	; (80128e8 <prvInitialiseTaskLists+0x64>)
 80128b2:	f7fe f8e3 	bl	8010a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80128b6:	480d      	ldr	r0, [pc, #52]	; (80128ec <prvInitialiseTaskLists+0x68>)
 80128b8:	f7fe f8e0 	bl	8010a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80128bc:	480c      	ldr	r0, [pc, #48]	; (80128f0 <prvInitialiseTaskLists+0x6c>)
 80128be:	f7fe f8dd 	bl	8010a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80128c2:	480c      	ldr	r0, [pc, #48]	; (80128f4 <prvInitialiseTaskLists+0x70>)
 80128c4:	f7fe f8da 	bl	8010a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80128c8:	480b      	ldr	r0, [pc, #44]	; (80128f8 <prvInitialiseTaskLists+0x74>)
 80128ca:	f7fe f8d7 	bl	8010a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80128ce:	4b0b      	ldr	r3, [pc, #44]	; (80128fc <prvInitialiseTaskLists+0x78>)
 80128d0:	4a05      	ldr	r2, [pc, #20]	; (80128e8 <prvInitialiseTaskLists+0x64>)
 80128d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80128d4:	4b0a      	ldr	r3, [pc, #40]	; (8012900 <prvInitialiseTaskLists+0x7c>)
 80128d6:	4a05      	ldr	r2, [pc, #20]	; (80128ec <prvInitialiseTaskLists+0x68>)
 80128d8:	601a      	str	r2, [r3, #0]
}
 80128da:	bf00      	nop
 80128dc:	3708      	adds	r7, #8
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	20001d1c 	.word	0x20001d1c
 80128e8:	2000217c 	.word	0x2000217c
 80128ec:	20002190 	.word	0x20002190
 80128f0:	200021ac 	.word	0x200021ac
 80128f4:	200021c0 	.word	0x200021c0
 80128f8:	200021d8 	.word	0x200021d8
 80128fc:	200021a4 	.word	0x200021a4
 8012900:	200021a8 	.word	0x200021a8

08012904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801290a:	e019      	b.n	8012940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801290c:	f001 f8b6 	bl	8013a7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012910:	4b0f      	ldr	r3, [pc, #60]	; (8012950 <prvCheckTasksWaitingTermination+0x4c>)
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	3304      	adds	r3, #4
 801291c:	4618      	mov	r0, r3
 801291e:	f7fe f937 	bl	8010b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012922:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <prvCheckTasksWaitingTermination+0x50>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	3b01      	subs	r3, #1
 8012928:	4a0a      	ldr	r2, [pc, #40]	; (8012954 <prvCheckTasksWaitingTermination+0x50>)
 801292a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801292c:	4b0a      	ldr	r3, [pc, #40]	; (8012958 <prvCheckTasksWaitingTermination+0x54>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	3b01      	subs	r3, #1
 8012932:	4a09      	ldr	r2, [pc, #36]	; (8012958 <prvCheckTasksWaitingTermination+0x54>)
 8012934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012936:	f001 f8cf 	bl	8013ad8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 f80e 	bl	801295c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012940:	4b05      	ldr	r3, [pc, #20]	; (8012958 <prvCheckTasksWaitingTermination+0x54>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1e1      	bne.n	801290c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012948:	bf00      	nop
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	200021c0 	.word	0x200021c0
 8012954:	200021ec 	.word	0x200021ec
 8012958:	200021d4 	.word	0x200021d4

0801295c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801296a:	2b00      	cmp	r3, #0
 801296c:	d108      	bne.n	8012980 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012972:	4618      	mov	r0, r3
 8012974:	f001 fa5e 	bl	8013e34 <vPortFree>
				vPortFree( pxTCB );
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f001 fa5b 	bl	8013e34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801297e:	e017      	b.n	80129b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012986:	2b01      	cmp	r3, #1
 8012988:	d103      	bne.n	8012992 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f001 fa52 	bl	8013e34 <vPortFree>
	}
 8012990:	e00e      	b.n	80129b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012998:	2b02      	cmp	r3, #2
 801299a:	d009      	beq.n	80129b0 <prvDeleteTCB+0x54>
 801299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a0:	f383 8811 	msr	BASEPRI, r3
 80129a4:	f3bf 8f6f 	isb	sy
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	60fb      	str	r3, [r7, #12]
 80129ae:	e7fe      	b.n	80129ae <prvDeleteTCB+0x52>
	}
 80129b0:	bf00      	nop
 80129b2:	3710      	adds	r7, #16
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129be:	4b0c      	ldr	r3, [pc, #48]	; (80129f0 <prvResetNextTaskUnblockTime+0x38>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d104      	bne.n	80129d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80129c8:	4b0a      	ldr	r3, [pc, #40]	; (80129f4 <prvResetNextTaskUnblockTime+0x3c>)
 80129ca:	f04f 32ff 	mov.w	r2, #4294967295
 80129ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80129d0:	e008      	b.n	80129e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129d2:	4b07      	ldr	r3, [pc, #28]	; (80129f0 <prvResetNextTaskUnblockTime+0x38>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	68db      	ldr	r3, [r3, #12]
 80129da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	4a04      	ldr	r2, [pc, #16]	; (80129f4 <prvResetNextTaskUnblockTime+0x3c>)
 80129e2:	6013      	str	r3, [r2, #0]
}
 80129e4:	bf00      	nop
 80129e6:	370c      	adds	r7, #12
 80129e8:	46bd      	mov	sp, r7
 80129ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ee:	4770      	bx	lr
 80129f0:	200021a4 	.word	0x200021a4
 80129f4:	2000220c 	.word	0x2000220c

080129f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80129f8:	b480      	push	{r7}
 80129fa:	b083      	sub	sp, #12
 80129fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80129fe:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <xTaskGetCurrentTaskHandle+0x1c>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012a04:	687b      	ldr	r3, [r7, #4]
	}
 8012a06:	4618      	mov	r0, r3
 8012a08:	370c      	adds	r7, #12
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop
 8012a14:	20001d18 	.word	0x20001d18

08012a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012a18:	b480      	push	{r7}
 8012a1a:	b083      	sub	sp, #12
 8012a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012a1e:	4b0b      	ldr	r3, [pc, #44]	; (8012a4c <xTaskGetSchedulerState+0x34>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d102      	bne.n	8012a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012a26:	2301      	movs	r3, #1
 8012a28:	607b      	str	r3, [r7, #4]
 8012a2a:	e008      	b.n	8012a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a2c:	4b08      	ldr	r3, [pc, #32]	; (8012a50 <xTaskGetSchedulerState+0x38>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d102      	bne.n	8012a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012a34:	2302      	movs	r3, #2
 8012a36:	607b      	str	r3, [r7, #4]
 8012a38:	e001      	b.n	8012a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012a3e:	687b      	ldr	r3, [r7, #4]
	}
 8012a40:	4618      	mov	r0, r3
 8012a42:	370c      	adds	r7, #12
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr
 8012a4c:	200021f8 	.word	0x200021f8
 8012a50:	20002214 	.word	0x20002214

08012a54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012a60:	2300      	movs	r3, #0
 8012a62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d051      	beq.n	8012b0e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6e:	4b2a      	ldr	r3, [pc, #168]	; (8012b18 <xTaskPriorityInherit+0xc4>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d241      	bcs.n	8012afc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	699b      	ldr	r3, [r3, #24]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	db06      	blt.n	8012a8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a80:	4b25      	ldr	r3, [pc, #148]	; (8012b18 <xTaskPriorityInherit+0xc4>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	6959      	ldr	r1, [r3, #20]
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a96:	4613      	mov	r3, r2
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	4413      	add	r3, r2
 8012a9c:	009b      	lsls	r3, r3, #2
 8012a9e:	4a1f      	ldr	r2, [pc, #124]	; (8012b1c <xTaskPriorityInherit+0xc8>)
 8012aa0:	4413      	add	r3, r2
 8012aa2:	4299      	cmp	r1, r3
 8012aa4:	d122      	bne.n	8012aec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	3304      	adds	r3, #4
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7fe f870 	bl	8010b90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ab0:	4b19      	ldr	r3, [pc, #100]	; (8012b18 <xTaskPriorityInherit+0xc4>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012abe:	4b18      	ldr	r3, [pc, #96]	; (8012b20 <xTaskPriorityInherit+0xcc>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d903      	bls.n	8012ace <xTaskPriorityInherit+0x7a>
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aca:	4a15      	ldr	r2, [pc, #84]	; (8012b20 <xTaskPriorityInherit+0xcc>)
 8012acc:	6013      	str	r3, [r2, #0]
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	009b      	lsls	r3, r3, #2
 8012ad6:	4413      	add	r3, r2
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	4a10      	ldr	r2, [pc, #64]	; (8012b1c <xTaskPriorityInherit+0xc8>)
 8012adc:	441a      	add	r2, r3
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	4610      	mov	r0, r2
 8012ae6:	f7fd fff6 	bl	8010ad6 <vListInsertEnd>
 8012aea:	e004      	b.n	8012af6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012aec:	4b0a      	ldr	r3, [pc, #40]	; (8012b18 <xTaskPriorityInherit+0xc4>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012af6:	2301      	movs	r3, #1
 8012af8:	60fb      	str	r3, [r7, #12]
 8012afa:	e008      	b.n	8012b0e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b00:	4b05      	ldr	r3, [pc, #20]	; (8012b18 <xTaskPriorityInherit+0xc4>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d201      	bcs.n	8012b0e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
	}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3710      	adds	r7, #16
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	20001d18 	.word	0x20001d18
 8012b1c:	20001d1c 	.word	0x20001d1c
 8012b20:	200021f4 	.word	0x200021f4

08012b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b086      	sub	sp, #24
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012b30:	2300      	movs	r3, #0
 8012b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d054      	beq.n	8012be4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012b3a:	4b2d      	ldr	r3, [pc, #180]	; (8012bf0 <xTaskPriorityDisinherit+0xcc>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	693a      	ldr	r2, [r7, #16]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d009      	beq.n	8012b58 <xTaskPriorityDisinherit+0x34>
 8012b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b48:	f383 8811 	msr	BASEPRI, r3
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f3bf 8f4f 	dsb	sy
 8012b54:	60fb      	str	r3, [r7, #12]
 8012b56:	e7fe      	b.n	8012b56 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <xTaskPriorityDisinherit+0x50>
 8012b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b64:	f383 8811 	msr	BASEPRI, r3
 8012b68:	f3bf 8f6f 	isb	sy
 8012b6c:	f3bf 8f4f 	dsb	sy
 8012b70:	60bb      	str	r3, [r7, #8]
 8012b72:	e7fe      	b.n	8012b72 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b78:	1e5a      	subs	r2, r3, #1
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d02c      	beq.n	8012be4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d128      	bne.n	8012be4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	3304      	adds	r3, #4
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fd fffa 	bl	8010b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ba8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bb4:	4b0f      	ldr	r3, [pc, #60]	; (8012bf4 <xTaskPriorityDisinherit+0xd0>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d903      	bls.n	8012bc4 <xTaskPriorityDisinherit+0xa0>
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bc0:	4a0c      	ldr	r2, [pc, #48]	; (8012bf4 <xTaskPriorityDisinherit+0xd0>)
 8012bc2:	6013      	str	r3, [r2, #0]
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc8:	4613      	mov	r3, r2
 8012bca:	009b      	lsls	r3, r3, #2
 8012bcc:	4413      	add	r3, r2
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	4a09      	ldr	r2, [pc, #36]	; (8012bf8 <xTaskPriorityDisinherit+0xd4>)
 8012bd2:	441a      	add	r2, r3
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4619      	mov	r1, r3
 8012bda:	4610      	mov	r0, r2
 8012bdc:	f7fd ff7b 	bl	8010ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012be0:	2301      	movs	r3, #1
 8012be2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012be4:	697b      	ldr	r3, [r7, #20]
	}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3718      	adds	r7, #24
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	20001d18 	.word	0x20001d18
 8012bf4:	200021f4 	.word	0x200021f4
 8012bf8:	20001d1c 	.word	0x20001d1c

08012bfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b088      	sub	sp, #32
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d068      	beq.n	8012ce6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d109      	bne.n	8012c30 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c20:	f383 8811 	msr	BASEPRI, r3
 8012c24:	f3bf 8f6f 	isb	sy
 8012c28:	f3bf 8f4f 	dsb	sy
 8012c2c:	60fb      	str	r3, [r7, #12]
 8012c2e:	e7fe      	b.n	8012c2e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c34:	683a      	ldr	r2, [r7, #0]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d902      	bls.n	8012c40 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	61fb      	str	r3, [r7, #28]
 8012c3e:	e002      	b.n	8012c46 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c44:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c4a:	69fa      	ldr	r2, [r7, #28]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d04a      	beq.n	8012ce6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c54:	697a      	ldr	r2, [r7, #20]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d145      	bne.n	8012ce6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012c5a:	4b25      	ldr	r3, [pc, #148]	; (8012cf0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	69ba      	ldr	r2, [r7, #24]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d109      	bne.n	8012c78 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c68:	f383 8811 	msr	BASEPRI, r3
 8012c6c:	f3bf 8f6f 	isb	sy
 8012c70:	f3bf 8f4f 	dsb	sy
 8012c74:	60bb      	str	r3, [r7, #8]
 8012c76:	e7fe      	b.n	8012c76 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	69fa      	ldr	r2, [r7, #28]
 8012c82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	699b      	ldr	r3, [r3, #24]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	db04      	blt.n	8012c96 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	6959      	ldr	r1, [r3, #20]
 8012c9a:	693a      	ldr	r2, [r7, #16]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	009b      	lsls	r3, r3, #2
 8012ca0:	4413      	add	r3, r2
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	4a13      	ldr	r2, [pc, #76]	; (8012cf4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012ca6:	4413      	add	r3, r2
 8012ca8:	4299      	cmp	r1, r3
 8012caa:	d11c      	bne.n	8012ce6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	3304      	adds	r3, #4
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7fd ff6d 	bl	8010b90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cba:	4b0f      	ldr	r3, [pc, #60]	; (8012cf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d903      	bls.n	8012cca <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012cc2:	69bb      	ldr	r3, [r7, #24]
 8012cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cc6:	4a0c      	ldr	r2, [pc, #48]	; (8012cf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012cc8:	6013      	str	r3, [r2, #0]
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cce:	4613      	mov	r3, r2
 8012cd0:	009b      	lsls	r3, r3, #2
 8012cd2:	4413      	add	r3, r2
 8012cd4:	009b      	lsls	r3, r3, #2
 8012cd6:	4a07      	ldr	r2, [pc, #28]	; (8012cf4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012cd8:	441a      	add	r2, r3
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	3304      	adds	r3, #4
 8012cde:	4619      	mov	r1, r3
 8012ce0:	4610      	mov	r0, r2
 8012ce2:	f7fd fef8 	bl	8010ad6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012ce6:	bf00      	nop
 8012ce8:	3720      	adds	r7, #32
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	20001d18 	.word	0x20001d18
 8012cf4:	20001d1c 	.word	0x20001d1c
 8012cf8:	200021f4 	.word	0x200021f4

08012cfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012cfc:	b480      	push	{r7}
 8012cfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012d00:	4b07      	ldr	r3, [pc, #28]	; (8012d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d004      	beq.n	8012d12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012d08:	4b05      	ldr	r3, [pc, #20]	; (8012d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d0e:	3201      	adds	r2, #1
 8012d10:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012d12:	4b03      	ldr	r3, [pc, #12]	; (8012d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8012d14:	681b      	ldr	r3, [r3, #0]
	}
 8012d16:	4618      	mov	r0, r3
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr
 8012d20:	20001d18 	.word	0x20001d18

08012d24 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b086      	sub	sp, #24
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012d32:	f000 fea3 	bl	8013a7c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012d36:	4b26      	ldr	r3, [pc, #152]	; (8012dd0 <xTaskNotifyWait+0xac>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2b02      	cmp	r3, #2
 8012d42:	d01a      	beq.n	8012d7a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012d44:	4b22      	ldr	r3, [pc, #136]	; (8012dd0 <xTaskNotifyWait+0xac>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012d4a:	68fa      	ldr	r2, [r7, #12]
 8012d4c:	43d2      	mvns	r2, r2
 8012d4e:	400a      	ands	r2, r1
 8012d50:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012d52:	4b1f      	ldr	r3, [pc, #124]	; (8012dd0 <xTaskNotifyWait+0xac>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2201      	movs	r2, #1
 8012d58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d00b      	beq.n	8012d7a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012d62:	2101      	movs	r1, #1
 8012d64:	6838      	ldr	r0, [r7, #0]
 8012d66:	f000 f9c5 	bl	80130f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012d6a:	4b1a      	ldr	r3, [pc, #104]	; (8012dd4 <xTaskNotifyWait+0xb0>)
 8012d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d70:	601a      	str	r2, [r3, #0]
 8012d72:	f3bf 8f4f 	dsb	sy
 8012d76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012d7a:	f000 fead 	bl	8013ad8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012d7e:	f000 fe7d 	bl	8013a7c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d004      	beq.n	8012d92 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012d88:	4b11      	ldr	r3, [pc, #68]	; (8012dd0 <xTaskNotifyWait+0xac>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012d92:	4b0f      	ldr	r3, [pc, #60]	; (8012dd0 <xTaskNotifyWait+0xac>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	2b02      	cmp	r3, #2
 8012d9e:	d002      	beq.n	8012da6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012da0:	2300      	movs	r3, #0
 8012da2:	617b      	str	r3, [r7, #20]
 8012da4:	e008      	b.n	8012db8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012da6:	4b0a      	ldr	r3, [pc, #40]	; (8012dd0 <xTaskNotifyWait+0xac>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012dac:	68ba      	ldr	r2, [r7, #8]
 8012dae:	43d2      	mvns	r2, r2
 8012db0:	400a      	ands	r2, r1
 8012db2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012db4:	2301      	movs	r3, #1
 8012db6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012db8:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <xTaskNotifyWait+0xac>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8012dc2:	f000 fe89 	bl	8013ad8 <vPortExitCritical>

		return xReturn;
 8012dc6:	697b      	ldr	r3, [r7, #20]
	}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3718      	adds	r7, #24
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	20001d18 	.word	0x20001d18
 8012dd4:	e000ed04 	.word	0xe000ed04

08012dd8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b08a      	sub	sp, #40	; 0x28
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	603b      	str	r3, [r7, #0]
 8012de4:	4613      	mov	r3, r2
 8012de6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012de8:	2301      	movs	r3, #1
 8012dea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d109      	bne.n	8012e06 <xTaskGenericNotify+0x2e>
 8012df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df6:	f383 8811 	msr	BASEPRI, r3
 8012dfa:	f3bf 8f6f 	isb	sy
 8012dfe:	f3bf 8f4f 	dsb	sy
 8012e02:	61bb      	str	r3, [r7, #24]
 8012e04:	e7fe      	b.n	8012e04 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012e0a:	f000 fe37 	bl	8013a7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d003      	beq.n	8012e1c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012e14:	6a3b      	ldr	r3, [r7, #32]
 8012e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012e1c:	6a3b      	ldr	r3, [r7, #32]
 8012e1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012e22:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012e24:	6a3b      	ldr	r3, [r7, #32]
 8012e26:	2202      	movs	r2, #2
 8012e28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012e2c:	79fb      	ldrb	r3, [r7, #7]
 8012e2e:	2b04      	cmp	r3, #4
 8012e30:	d827      	bhi.n	8012e82 <xTaskGenericNotify+0xaa>
 8012e32:	a201      	add	r2, pc, #4	; (adr r2, 8012e38 <xTaskGenericNotify+0x60>)
 8012e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e38:	08012ea1 	.word	0x08012ea1
 8012e3c:	08012e4d 	.word	0x08012e4d
 8012e40:	08012e5b 	.word	0x08012e5b
 8012e44:	08012e67 	.word	0x08012e67
 8012e48:	08012e6f 	.word	0x08012e6f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012e4c:	6a3b      	ldr	r3, [r7, #32]
 8012e4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	431a      	orrs	r2, r3
 8012e54:	6a3b      	ldr	r3, [r7, #32]
 8012e56:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e58:	e025      	b.n	8012ea6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012e5a:	6a3b      	ldr	r3, [r7, #32]
 8012e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e5e:	1c5a      	adds	r2, r3, #1
 8012e60:	6a3b      	ldr	r3, [r7, #32]
 8012e62:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e64:	e01f      	b.n	8012ea6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012e66:	6a3b      	ldr	r3, [r7, #32]
 8012e68:	68ba      	ldr	r2, [r7, #8]
 8012e6a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012e6c:	e01b      	b.n	8012ea6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012e6e:	7ffb      	ldrb	r3, [r7, #31]
 8012e70:	2b02      	cmp	r3, #2
 8012e72:	d003      	beq.n	8012e7c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012e74:	6a3b      	ldr	r3, [r7, #32]
 8012e76:	68ba      	ldr	r2, [r7, #8]
 8012e78:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012e7a:	e014      	b.n	8012ea6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012e80:	e011      	b.n	8012ea6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e8a:	d00b      	beq.n	8012ea4 <xTaskGenericNotify+0xcc>
 8012e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e90:	f383 8811 	msr	BASEPRI, r3
 8012e94:	f3bf 8f6f 	isb	sy
 8012e98:	f3bf 8f4f 	dsb	sy
 8012e9c:	617b      	str	r3, [r7, #20]
 8012e9e:	e7fe      	b.n	8012e9e <xTaskGenericNotify+0xc6>
					break;
 8012ea0:	bf00      	nop
 8012ea2:	e000      	b.n	8012ea6 <xTaskGenericNotify+0xce>

					break;
 8012ea4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012ea6:	7ffb      	ldrb	r3, [r7, #31]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d13b      	bne.n	8012f24 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012eac:	6a3b      	ldr	r3, [r7, #32]
 8012eae:	3304      	adds	r3, #4
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fd fe6d 	bl	8010b90 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012eb6:	6a3b      	ldr	r3, [r7, #32]
 8012eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eba:	4b1e      	ldr	r3, [pc, #120]	; (8012f34 <xTaskGenericNotify+0x15c>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d903      	bls.n	8012eca <xTaskGenericNotify+0xf2>
 8012ec2:	6a3b      	ldr	r3, [r7, #32]
 8012ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec6:	4a1b      	ldr	r2, [pc, #108]	; (8012f34 <xTaskGenericNotify+0x15c>)
 8012ec8:	6013      	str	r3, [r2, #0]
 8012eca:	6a3b      	ldr	r3, [r7, #32]
 8012ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ece:	4613      	mov	r3, r2
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4413      	add	r3, r2
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	4a18      	ldr	r2, [pc, #96]	; (8012f38 <xTaskGenericNotify+0x160>)
 8012ed8:	441a      	add	r2, r3
 8012eda:	6a3b      	ldr	r3, [r7, #32]
 8012edc:	3304      	adds	r3, #4
 8012ede:	4619      	mov	r1, r3
 8012ee0:	4610      	mov	r0, r2
 8012ee2:	f7fd fdf8 	bl	8010ad6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012ee6:	6a3b      	ldr	r3, [r7, #32]
 8012ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d009      	beq.n	8012f02 <xTaskGenericNotify+0x12a>
 8012eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef2:	f383 8811 	msr	BASEPRI, r3
 8012ef6:	f3bf 8f6f 	isb	sy
 8012efa:	f3bf 8f4f 	dsb	sy
 8012efe:	613b      	str	r3, [r7, #16]
 8012f00:	e7fe      	b.n	8012f00 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8012f02:	f7ff fd59 	bl	80129b8 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012f06:	6a3b      	ldr	r3, [r7, #32]
 8012f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f0a:	4b0c      	ldr	r3, [pc, #48]	; (8012f3c <xTaskGenericNotify+0x164>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d907      	bls.n	8012f24 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012f14:	4b0a      	ldr	r3, [pc, #40]	; (8012f40 <xTaskGenericNotify+0x168>)
 8012f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f1a:	601a      	str	r2, [r3, #0]
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012f24:	f000 fdd8 	bl	8013ad8 <vPortExitCritical>

		return xReturn;
 8012f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3728      	adds	r7, #40	; 0x28
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	200021f4 	.word	0x200021f4
 8012f38:	20001d1c 	.word	0x20001d1c
 8012f3c:	20001d18 	.word	0x20001d18
 8012f40:	e000ed04 	.word	0xe000ed04

08012f44 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b08e      	sub	sp, #56	; 0x38
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	603b      	str	r3, [r7, #0]
 8012f50:	4613      	mov	r3, r2
 8012f52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012f54:	2301      	movs	r3, #1
 8012f56:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d109      	bne.n	8012f72 <xTaskGenericNotifyFromISR+0x2e>
 8012f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f62:	f383 8811 	msr	BASEPRI, r3
 8012f66:	f3bf 8f6f 	isb	sy
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8012f70:	e7fe      	b.n	8012f70 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f72:	f000 fe5f 	bl	8013c34 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8012f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8012f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f82:	f383 8811 	msr	BASEPRI, r3
 8012f86:	f3bf 8f6f 	isb	sy
 8012f8a:	f3bf 8f4f 	dsb	sy
 8012f8e:	623a      	str	r2, [r7, #32]
 8012f90:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012f92:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012f94:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d003      	beq.n	8012fa4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb0:	2202      	movs	r2, #2
 8012fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012fb6:	79fb      	ldrb	r3, [r7, #7]
 8012fb8:	2b04      	cmp	r3, #4
 8012fba:	d829      	bhi.n	8013010 <xTaskGenericNotifyFromISR+0xcc>
 8012fbc:	a201      	add	r2, pc, #4	; (adr r2, 8012fc4 <xTaskGenericNotifyFromISR+0x80>)
 8012fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fc2:	bf00      	nop
 8012fc4:	0801302f 	.word	0x0801302f
 8012fc8:	08012fd9 	.word	0x08012fd9
 8012fcc:	08012fe7 	.word	0x08012fe7
 8012fd0:	08012ff3 	.word	0x08012ff3
 8012fd4:	08012ffb 	.word	0x08012ffb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	431a      	orrs	r2, r3
 8012fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012fe4:	e026      	b.n	8013034 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fea:	1c5a      	adds	r2, r3, #1
 8012fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012ff0:	e020      	b.n	8013034 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff4:	68ba      	ldr	r2, [r7, #8]
 8012ff6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012ff8:	e01c      	b.n	8013034 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ffe:	2b02      	cmp	r3, #2
 8013000:	d003      	beq.n	801300a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013004:	68ba      	ldr	r2, [r7, #8]
 8013006:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013008:	e014      	b.n	8013034 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801300a:	2300      	movs	r3, #0
 801300c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801300e:	e011      	b.n	8013034 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013018:	d00b      	beq.n	8013032 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301e:	f383 8811 	msr	BASEPRI, r3
 8013022:	f3bf 8f6f 	isb	sy
 8013026:	f3bf 8f4f 	dsb	sy
 801302a:	61bb      	str	r3, [r7, #24]
 801302c:	e7fe      	b.n	801302c <xTaskGenericNotifyFromISR+0xe8>
					break;
 801302e:	bf00      	nop
 8013030:	e000      	b.n	8013034 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8013032:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013034:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013038:	2b01      	cmp	r3, #1
 801303a:	d145      	bne.n	80130c8 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013040:	2b00      	cmp	r3, #0
 8013042:	d009      	beq.n	8013058 <xTaskGenericNotifyFromISR+0x114>
 8013044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	617b      	str	r3, [r7, #20]
 8013056:	e7fe      	b.n	8013056 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013058:	4b20      	ldr	r3, [pc, #128]	; (80130dc <xTaskGenericNotifyFromISR+0x198>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d11d      	bne.n	801309c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013062:	3304      	adds	r3, #4
 8013064:	4618      	mov	r0, r3
 8013066:	f7fd fd93 	bl	8010b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801306e:	4b1c      	ldr	r3, [pc, #112]	; (80130e0 <xTaskGenericNotifyFromISR+0x19c>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	429a      	cmp	r2, r3
 8013074:	d903      	bls.n	801307e <xTaskGenericNotifyFromISR+0x13a>
 8013076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307a:	4a19      	ldr	r2, [pc, #100]	; (80130e0 <xTaskGenericNotifyFromISR+0x19c>)
 801307c:	6013      	str	r3, [r2, #0]
 801307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013082:	4613      	mov	r3, r2
 8013084:	009b      	lsls	r3, r3, #2
 8013086:	4413      	add	r3, r2
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	4a16      	ldr	r2, [pc, #88]	; (80130e4 <xTaskGenericNotifyFromISR+0x1a0>)
 801308c:	441a      	add	r2, r3
 801308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013090:	3304      	adds	r3, #4
 8013092:	4619      	mov	r1, r3
 8013094:	4610      	mov	r0, r2
 8013096:	f7fd fd1e 	bl	8010ad6 <vListInsertEnd>
 801309a:	e005      	b.n	80130a8 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309e:	3318      	adds	r3, #24
 80130a0:	4619      	mov	r1, r3
 80130a2:	4811      	ldr	r0, [pc, #68]	; (80130e8 <xTaskGenericNotifyFromISR+0x1a4>)
 80130a4:	f7fd fd17 	bl	8010ad6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80130a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ac:	4b0f      	ldr	r3, [pc, #60]	; (80130ec <xTaskGenericNotifyFromISR+0x1a8>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d908      	bls.n	80130c8 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80130b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d002      	beq.n	80130c2 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80130bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130be:	2201      	movs	r2, #1
 80130c0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80130c2:	4b0b      	ldr	r3, [pc, #44]	; (80130f0 <xTaskGenericNotifyFromISR+0x1ac>)
 80130c4:	2201      	movs	r2, #1
 80130c6:	601a      	str	r2, [r3, #0]
 80130c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ca:	613b      	str	r3, [r7, #16]
	__asm volatile
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80130d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3738      	adds	r7, #56	; 0x38
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	20002214 	.word	0x20002214
 80130e0:	200021f4 	.word	0x200021f4
 80130e4:	20001d1c 	.word	0x20001d1c
 80130e8:	200021ac 	.word	0x200021ac
 80130ec:	20001d18 	.word	0x20001d18
 80130f0:	20002200 	.word	0x20002200

080130f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80130fe:	4b21      	ldr	r3, [pc, #132]	; (8013184 <prvAddCurrentTaskToDelayedList+0x90>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013104:	4b20      	ldr	r3, [pc, #128]	; (8013188 <prvAddCurrentTaskToDelayedList+0x94>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	3304      	adds	r3, #4
 801310a:	4618      	mov	r0, r3
 801310c:	f7fd fd40 	bl	8010b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013116:	d10a      	bne.n	801312e <prvAddCurrentTaskToDelayedList+0x3a>
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d007      	beq.n	801312e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801311e:	4b1a      	ldr	r3, [pc, #104]	; (8013188 <prvAddCurrentTaskToDelayedList+0x94>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	3304      	adds	r3, #4
 8013124:	4619      	mov	r1, r3
 8013126:	4819      	ldr	r0, [pc, #100]	; (801318c <prvAddCurrentTaskToDelayedList+0x98>)
 8013128:	f7fd fcd5 	bl	8010ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801312c:	e026      	b.n	801317c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	4413      	add	r3, r2
 8013134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013136:	4b14      	ldr	r3, [pc, #80]	; (8013188 <prvAddCurrentTaskToDelayedList+0x94>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	68ba      	ldr	r2, [r7, #8]
 801313c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801313e:	68ba      	ldr	r2, [r7, #8]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	429a      	cmp	r2, r3
 8013144:	d209      	bcs.n	801315a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013146:	4b12      	ldr	r3, [pc, #72]	; (8013190 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	4b0f      	ldr	r3, [pc, #60]	; (8013188 <prvAddCurrentTaskToDelayedList+0x94>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	3304      	adds	r3, #4
 8013150:	4619      	mov	r1, r3
 8013152:	4610      	mov	r0, r2
 8013154:	f7fd fce3 	bl	8010b1e <vListInsert>
}
 8013158:	e010      	b.n	801317c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801315a:	4b0e      	ldr	r3, [pc, #56]	; (8013194 <prvAddCurrentTaskToDelayedList+0xa0>)
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	4b0a      	ldr	r3, [pc, #40]	; (8013188 <prvAddCurrentTaskToDelayedList+0x94>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	3304      	adds	r3, #4
 8013164:	4619      	mov	r1, r3
 8013166:	4610      	mov	r0, r2
 8013168:	f7fd fcd9 	bl	8010b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801316c:	4b0a      	ldr	r3, [pc, #40]	; (8013198 <prvAddCurrentTaskToDelayedList+0xa4>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	68ba      	ldr	r2, [r7, #8]
 8013172:	429a      	cmp	r2, r3
 8013174:	d202      	bcs.n	801317c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013176:	4a08      	ldr	r2, [pc, #32]	; (8013198 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	6013      	str	r3, [r2, #0]
}
 801317c:	bf00      	nop
 801317e:	3710      	adds	r7, #16
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	200021f0 	.word	0x200021f0
 8013188:	20001d18 	.word	0x20001d18
 801318c:	200021d8 	.word	0x200021d8
 8013190:	200021a8 	.word	0x200021a8
 8013194:	200021a4 	.word	0x200021a4
 8013198:	2000220c 	.word	0x2000220c

0801319c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b08a      	sub	sp, #40	; 0x28
 80131a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80131a2:	2300      	movs	r3, #0
 80131a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80131a6:	f000 faff 	bl	80137a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80131aa:	4b1c      	ldr	r3, [pc, #112]	; (801321c <xTimerCreateTimerTask+0x80>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d021      	beq.n	80131f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80131b2:	2300      	movs	r3, #0
 80131b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80131b6:	2300      	movs	r3, #0
 80131b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80131ba:	1d3a      	adds	r2, r7, #4
 80131bc:	f107 0108 	add.w	r1, r7, #8
 80131c0:	f107 030c 	add.w	r3, r7, #12
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7fd fc3f 	bl	8010a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80131ca:	6879      	ldr	r1, [r7, #4]
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	9202      	str	r2, [sp, #8]
 80131d2:	9301      	str	r3, [sp, #4]
 80131d4:	2302      	movs	r3, #2
 80131d6:	9300      	str	r3, [sp, #0]
 80131d8:	2300      	movs	r3, #0
 80131da:	460a      	mov	r2, r1
 80131dc:	4910      	ldr	r1, [pc, #64]	; (8013220 <xTimerCreateTimerTask+0x84>)
 80131de:	4811      	ldr	r0, [pc, #68]	; (8013224 <xTimerCreateTimerTask+0x88>)
 80131e0:	f7fe fda2 	bl	8011d28 <xTaskCreateStatic>
 80131e4:	4602      	mov	r2, r0
 80131e6:	4b10      	ldr	r3, [pc, #64]	; (8013228 <xTimerCreateTimerTask+0x8c>)
 80131e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80131ea:	4b0f      	ldr	r3, [pc, #60]	; (8013228 <xTimerCreateTimerTask+0x8c>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80131f2:	2301      	movs	r3, #1
 80131f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d109      	bne.n	8013210 <xTimerCreateTimerTask+0x74>
	__asm volatile
 80131fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013200:	f383 8811 	msr	BASEPRI, r3
 8013204:	f3bf 8f6f 	isb	sy
 8013208:	f3bf 8f4f 	dsb	sy
 801320c:	613b      	str	r3, [r7, #16]
 801320e:	e7fe      	b.n	801320e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013210:	697b      	ldr	r3, [r7, #20]
}
 8013212:	4618      	mov	r0, r3
 8013214:	3718      	adds	r7, #24
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	20002248 	.word	0x20002248
 8013220:	08016d40 	.word	0x08016d40
 8013224:	0801335d 	.word	0x0801335d
 8013228:	2000224c 	.word	0x2000224c

0801322c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b08a      	sub	sp, #40	; 0x28
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801323a:	2300      	movs	r3, #0
 801323c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d109      	bne.n	8013258 <xTimerGenericCommand+0x2c>
 8013244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	623b      	str	r3, [r7, #32]
 8013256:	e7fe      	b.n	8013256 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013258:	4b19      	ldr	r3, [pc, #100]	; (80132c0 <xTimerGenericCommand+0x94>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d02a      	beq.n	80132b6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	2b05      	cmp	r3, #5
 8013270:	dc18      	bgt.n	80132a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013272:	f7ff fbd1 	bl	8012a18 <xTaskGetSchedulerState>
 8013276:	4603      	mov	r3, r0
 8013278:	2b02      	cmp	r3, #2
 801327a:	d109      	bne.n	8013290 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801327c:	4b10      	ldr	r3, [pc, #64]	; (80132c0 <xTimerGenericCommand+0x94>)
 801327e:	6818      	ldr	r0, [r3, #0]
 8013280:	f107 0110 	add.w	r1, r7, #16
 8013284:	2300      	movs	r3, #0
 8013286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013288:	f7fd ff04 	bl	8011094 <xQueueGenericSend>
 801328c:	6278      	str	r0, [r7, #36]	; 0x24
 801328e:	e012      	b.n	80132b6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013290:	4b0b      	ldr	r3, [pc, #44]	; (80132c0 <xTimerGenericCommand+0x94>)
 8013292:	6818      	ldr	r0, [r3, #0]
 8013294:	f107 0110 	add.w	r1, r7, #16
 8013298:	2300      	movs	r3, #0
 801329a:	2200      	movs	r2, #0
 801329c:	f7fd fefa 	bl	8011094 <xQueueGenericSend>
 80132a0:	6278      	str	r0, [r7, #36]	; 0x24
 80132a2:	e008      	b.n	80132b6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80132a4:	4b06      	ldr	r3, [pc, #24]	; (80132c0 <xTimerGenericCommand+0x94>)
 80132a6:	6818      	ldr	r0, [r3, #0]
 80132a8:	f107 0110 	add.w	r1, r7, #16
 80132ac:	2300      	movs	r3, #0
 80132ae:	683a      	ldr	r2, [r7, #0]
 80132b0:	f7fd ffea 	bl	8011288 <xQueueGenericSendFromISR>
 80132b4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80132b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3728      	adds	r7, #40	; 0x28
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	20002248 	.word	0x20002248

080132c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b088      	sub	sp, #32
 80132c8:	af02      	add	r7, sp, #8
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132ce:	4b22      	ldr	r3, [pc, #136]	; (8013358 <prvProcessExpiredTimer+0x94>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	68db      	ldr	r3, [r3, #12]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	3304      	adds	r3, #4
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fd fc57 	bl	8010b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132e8:	f003 0304 	and.w	r3, r3, #4
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d021      	beq.n	8013334 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	699a      	ldr	r2, [r3, #24]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	18d1      	adds	r1, r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	683a      	ldr	r2, [r7, #0]
 80132fc:	6978      	ldr	r0, [r7, #20]
 80132fe:	f000 f8d1 	bl	80134a4 <prvInsertTimerInActiveList>
 8013302:	4603      	mov	r3, r0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d01e      	beq.n	8013346 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013308:	2300      	movs	r3, #0
 801330a:	9300      	str	r3, [sp, #0]
 801330c:	2300      	movs	r3, #0
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	2100      	movs	r1, #0
 8013312:	6978      	ldr	r0, [r7, #20]
 8013314:	f7ff ff8a 	bl	801322c <xTimerGenericCommand>
 8013318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d112      	bne.n	8013346 <prvProcessExpiredTimer+0x82>
 8013320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013324:	f383 8811 	msr	BASEPRI, r3
 8013328:	f3bf 8f6f 	isb	sy
 801332c:	f3bf 8f4f 	dsb	sy
 8013330:	60fb      	str	r3, [r7, #12]
 8013332:	e7fe      	b.n	8013332 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801333a:	f023 0301 	bic.w	r3, r3, #1
 801333e:	b2da      	uxtb	r2, r3
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	6a1b      	ldr	r3, [r3, #32]
 801334a:	6978      	ldr	r0, [r7, #20]
 801334c:	4798      	blx	r3
}
 801334e:	bf00      	nop
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	20002240 	.word	0x20002240

0801335c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013364:	f107 0308 	add.w	r3, r7, #8
 8013368:	4618      	mov	r0, r3
 801336a:	f000 f857 	bl	801341c <prvGetNextExpireTime>
 801336e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	4619      	mov	r1, r3
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f000 f803 	bl	8013380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801337a:	f000 f8d5 	bl	8013528 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801337e:	e7f1      	b.n	8013364 <prvTimerTask+0x8>

08013380 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801338a:	f7fe ff03 	bl	8012194 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801338e:	f107 0308 	add.w	r3, r7, #8
 8013392:	4618      	mov	r0, r3
 8013394:	f000 f866 	bl	8013464 <prvSampleTimeNow>
 8013398:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d130      	bne.n	8013402 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d10a      	bne.n	80133bc <prvProcessTimerOrBlockTask+0x3c>
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d806      	bhi.n	80133bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80133ae:	f7fe ff37 	bl	8012220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80133b2:	68f9      	ldr	r1, [r7, #12]
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7ff ff85 	bl	80132c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80133ba:	e024      	b.n	8013406 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d008      	beq.n	80133d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80133c2:	4b13      	ldr	r3, [pc, #76]	; (8013410 <prvProcessTimerOrBlockTask+0x90>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d101      	bne.n	80133d0 <prvProcessTimerOrBlockTask+0x50>
 80133cc:	2301      	movs	r3, #1
 80133ce:	e000      	b.n	80133d2 <prvProcessTimerOrBlockTask+0x52>
 80133d0:	2300      	movs	r3, #0
 80133d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80133d4:	4b0f      	ldr	r3, [pc, #60]	; (8013414 <prvProcessTimerOrBlockTask+0x94>)
 80133d6:	6818      	ldr	r0, [r3, #0]
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	1ad3      	subs	r3, r2, r3
 80133de:	683a      	ldr	r2, [r7, #0]
 80133e0:	4619      	mov	r1, r3
 80133e2:	f7fe fc6d 	bl	8011cc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80133e6:	f7fe ff1b 	bl	8012220 <xTaskResumeAll>
 80133ea:	4603      	mov	r3, r0
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d10a      	bne.n	8013406 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80133f0:	4b09      	ldr	r3, [pc, #36]	; (8013418 <prvProcessTimerOrBlockTask+0x98>)
 80133f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133f6:	601a      	str	r2, [r3, #0]
 80133f8:	f3bf 8f4f 	dsb	sy
 80133fc:	f3bf 8f6f 	isb	sy
}
 8013400:	e001      	b.n	8013406 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013402:	f7fe ff0d 	bl	8012220 <xTaskResumeAll>
}
 8013406:	bf00      	nop
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	20002244 	.word	0x20002244
 8013414:	20002248 	.word	0x20002248
 8013418:	e000ed04 	.word	0xe000ed04

0801341c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801341c:	b480      	push	{r7}
 801341e:	b085      	sub	sp, #20
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013424:	4b0e      	ldr	r3, [pc, #56]	; (8013460 <prvGetNextExpireTime+0x44>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d101      	bne.n	8013432 <prvGetNextExpireTime+0x16>
 801342e:	2201      	movs	r2, #1
 8013430:	e000      	b.n	8013434 <prvGetNextExpireTime+0x18>
 8013432:	2200      	movs	r2, #0
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d105      	bne.n	801344c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013440:	4b07      	ldr	r3, [pc, #28]	; (8013460 <prvGetNextExpireTime+0x44>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	60fb      	str	r3, [r7, #12]
 801344a:	e001      	b.n	8013450 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801344c:	2300      	movs	r3, #0
 801344e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013450:	68fb      	ldr	r3, [r7, #12]
}
 8013452:	4618      	mov	r0, r3
 8013454:	3714      	adds	r7, #20
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr
 801345e:	bf00      	nop
 8013460:	20002240 	.word	0x20002240

08013464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801346c:	f7fe ff74 	bl	8012358 <xTaskGetTickCount>
 8013470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013472:	4b0b      	ldr	r3, [pc, #44]	; (80134a0 <prvSampleTimeNow+0x3c>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	429a      	cmp	r2, r3
 801347a:	d205      	bcs.n	8013488 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801347c:	f000 f930 	bl	80136e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2201      	movs	r2, #1
 8013484:	601a      	str	r2, [r3, #0]
 8013486:	e002      	b.n	801348e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2200      	movs	r2, #0
 801348c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801348e:	4a04      	ldr	r2, [pc, #16]	; (80134a0 <prvSampleTimeNow+0x3c>)
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013494:	68fb      	ldr	r3, [r7, #12]
}
 8013496:	4618      	mov	r0, r3
 8013498:	3710      	adds	r7, #16
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	20002250 	.word	0x20002250

080134a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b086      	sub	sp, #24
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	60f8      	str	r0, [r7, #12]
 80134ac:	60b9      	str	r1, [r7, #8]
 80134ae:	607a      	str	r2, [r7, #4]
 80134b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80134b2:	2300      	movs	r3, #0
 80134b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	68ba      	ldr	r2, [r7, #8]
 80134ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	68fa      	ldr	r2, [r7, #12]
 80134c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80134c2:	68ba      	ldr	r2, [r7, #8]
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d812      	bhi.n	80134f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	1ad2      	subs	r2, r2, r3
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	699b      	ldr	r3, [r3, #24]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d302      	bcc.n	80134de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80134d8:	2301      	movs	r3, #1
 80134da:	617b      	str	r3, [r7, #20]
 80134dc:	e01b      	b.n	8013516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80134de:	4b10      	ldr	r3, [pc, #64]	; (8013520 <prvInsertTimerInActiveList+0x7c>)
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	3304      	adds	r3, #4
 80134e6:	4619      	mov	r1, r3
 80134e8:	4610      	mov	r0, r2
 80134ea:	f7fd fb18 	bl	8010b1e <vListInsert>
 80134ee:	e012      	b.n	8013516 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d206      	bcs.n	8013506 <prvInsertTimerInActiveList+0x62>
 80134f8:	68ba      	ldr	r2, [r7, #8]
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d302      	bcc.n	8013506 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013500:	2301      	movs	r3, #1
 8013502:	617b      	str	r3, [r7, #20]
 8013504:	e007      	b.n	8013516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013506:	4b07      	ldr	r3, [pc, #28]	; (8013524 <prvInsertTimerInActiveList+0x80>)
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	3304      	adds	r3, #4
 801350e:	4619      	mov	r1, r3
 8013510:	4610      	mov	r0, r2
 8013512:	f7fd fb04 	bl	8010b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013516:	697b      	ldr	r3, [r7, #20]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	20002244 	.word	0x20002244
 8013524:	20002240 	.word	0x20002240

08013528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b08e      	sub	sp, #56	; 0x38
 801352c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801352e:	e0c6      	b.n	80136be <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	da17      	bge.n	8013566 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013536:	1d3b      	adds	r3, r7, #4
 8013538:	3304      	adds	r3, #4
 801353a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353e:	2b00      	cmp	r3, #0
 8013540:	d109      	bne.n	8013556 <prvProcessReceivedCommands+0x2e>
 8013542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013546:	f383 8811 	msr	BASEPRI, r3
 801354a:	f3bf 8f6f 	isb	sy
 801354e:	f3bf 8f4f 	dsb	sy
 8013552:	61fb      	str	r3, [r7, #28]
 8013554:	e7fe      	b.n	8013554 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801355c:	6850      	ldr	r0, [r2, #4]
 801355e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013560:	6892      	ldr	r2, [r2, #8]
 8013562:	4611      	mov	r1, r2
 8013564:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2b00      	cmp	r3, #0
 801356a:	f2c0 80a7 	blt.w	80136bc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013574:	695b      	ldr	r3, [r3, #20]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d004      	beq.n	8013584 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357c:	3304      	adds	r3, #4
 801357e:	4618      	mov	r0, r3
 8013580:	f7fd fb06 	bl	8010b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013584:	463b      	mov	r3, r7
 8013586:	4618      	mov	r0, r3
 8013588:	f7ff ff6c 	bl	8013464 <prvSampleTimeNow>
 801358c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b09      	cmp	r3, #9
 8013592:	f200 8094 	bhi.w	80136be <prvProcessReceivedCommands+0x196>
 8013596:	a201      	add	r2, pc, #4	; (adr r2, 801359c <prvProcessReceivedCommands+0x74>)
 8013598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801359c:	080135c5 	.word	0x080135c5
 80135a0:	080135c5 	.word	0x080135c5
 80135a4:	080135c5 	.word	0x080135c5
 80135a8:	08013637 	.word	0x08013637
 80135ac:	0801364b 	.word	0x0801364b
 80135b0:	08013693 	.word	0x08013693
 80135b4:	080135c5 	.word	0x080135c5
 80135b8:	080135c5 	.word	0x080135c5
 80135bc:	08013637 	.word	0x08013637
 80135c0:	0801364b 	.word	0x0801364b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80135c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135ca:	f043 0301 	orr.w	r3, r3, #1
 80135ce:	b2da      	uxtb	r2, r3
 80135d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80135d6:	68ba      	ldr	r2, [r7, #8]
 80135d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135da:	699b      	ldr	r3, [r3, #24]
 80135dc:	18d1      	adds	r1, r2, r3
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135e4:	f7ff ff5e 	bl	80134a4 <prvInsertTimerInActiveList>
 80135e8:	4603      	mov	r3, r0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d067      	beq.n	80136be <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f0:	6a1b      	ldr	r3, [r3, #32]
 80135f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135fc:	f003 0304 	and.w	r3, r3, #4
 8013600:	2b00      	cmp	r3, #0
 8013602:	d05c      	beq.n	80136be <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013604:	68ba      	ldr	r2, [r7, #8]
 8013606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013608:	699b      	ldr	r3, [r3, #24]
 801360a:	441a      	add	r2, r3
 801360c:	2300      	movs	r3, #0
 801360e:	9300      	str	r3, [sp, #0]
 8013610:	2300      	movs	r3, #0
 8013612:	2100      	movs	r1, #0
 8013614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013616:	f7ff fe09 	bl	801322c <xTimerGenericCommand>
 801361a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801361c:	6a3b      	ldr	r3, [r7, #32]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d14d      	bne.n	80136be <prvProcessReceivedCommands+0x196>
 8013622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013626:	f383 8811 	msr	BASEPRI, r3
 801362a:	f3bf 8f6f 	isb	sy
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	61bb      	str	r3, [r7, #24]
 8013634:	e7fe      	b.n	8013634 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801363c:	f023 0301 	bic.w	r3, r3, #1
 8013640:	b2da      	uxtb	r2, r3
 8013642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013648:	e039      	b.n	80136be <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013650:	f043 0301 	orr.w	r3, r3, #1
 8013654:	b2da      	uxtb	r2, r3
 8013656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013660:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013664:	699b      	ldr	r3, [r3, #24]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d109      	bne.n	801367e <prvProcessReceivedCommands+0x156>
 801366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	617b      	str	r3, [r7, #20]
 801367c:	e7fe      	b.n	801367c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013680:	699a      	ldr	r2, [r3, #24]
 8013682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013684:	18d1      	adds	r1, r2, r3
 8013686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801368a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801368c:	f7ff ff0a 	bl	80134a4 <prvInsertTimerInActiveList>
					break;
 8013690:	e015      	b.n	80136be <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013698:	f003 0302 	and.w	r3, r3, #2
 801369c:	2b00      	cmp	r3, #0
 801369e:	d103      	bne.n	80136a8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80136a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136a2:	f000 fbc7 	bl	8013e34 <vPortFree>
 80136a6:	e00a      	b.n	80136be <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80136a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136ae:	f023 0301 	bic.w	r3, r3, #1
 80136b2:	b2da      	uxtb	r2, r3
 80136b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80136ba:	e000      	b.n	80136be <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80136bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80136be:	4b07      	ldr	r3, [pc, #28]	; (80136dc <prvProcessReceivedCommands+0x1b4>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	1d39      	adds	r1, r7, #4
 80136c4:	2200      	movs	r2, #0
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fd fefc 	bl	80114c4 <xQueueReceive>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f47f af2e 	bne.w	8013530 <prvProcessReceivedCommands+0x8>
	}
}
 80136d4:	bf00      	nop
 80136d6:	3730      	adds	r7, #48	; 0x30
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	20002248 	.word	0x20002248

080136e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b088      	sub	sp, #32
 80136e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80136e6:	e047      	b.n	8013778 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80136e8:	4b2d      	ldr	r3, [pc, #180]	; (80137a0 <prvSwitchTimerLists+0xc0>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	68db      	ldr	r3, [r3, #12]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136f2:	4b2b      	ldr	r3, [pc, #172]	; (80137a0 <prvSwitchTimerLists+0xc0>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	3304      	adds	r3, #4
 8013700:	4618      	mov	r0, r3
 8013702:	f7fd fa45 	bl	8010b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	6a1b      	ldr	r3, [r3, #32]
 801370a:	68f8      	ldr	r0, [r7, #12]
 801370c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013714:	f003 0304 	and.w	r3, r3, #4
 8013718:	2b00      	cmp	r3, #0
 801371a:	d02d      	beq.n	8013778 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	699b      	ldr	r3, [r3, #24]
 8013720:	693a      	ldr	r2, [r7, #16]
 8013722:	4413      	add	r3, r2
 8013724:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	429a      	cmp	r2, r3
 801372c:	d90e      	bls.n	801374c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	68fa      	ldr	r2, [r7, #12]
 8013738:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801373a:	4b19      	ldr	r3, [pc, #100]	; (80137a0 <prvSwitchTimerLists+0xc0>)
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	3304      	adds	r3, #4
 8013742:	4619      	mov	r1, r3
 8013744:	4610      	mov	r0, r2
 8013746:	f7fd f9ea 	bl	8010b1e <vListInsert>
 801374a:	e015      	b.n	8013778 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801374c:	2300      	movs	r3, #0
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	2300      	movs	r3, #0
 8013752:	693a      	ldr	r2, [r7, #16]
 8013754:	2100      	movs	r1, #0
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f7ff fd68 	bl	801322c <xTimerGenericCommand>
 801375c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d109      	bne.n	8013778 <prvSwitchTimerLists+0x98>
 8013764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013768:	f383 8811 	msr	BASEPRI, r3
 801376c:	f3bf 8f6f 	isb	sy
 8013770:	f3bf 8f4f 	dsb	sy
 8013774:	603b      	str	r3, [r7, #0]
 8013776:	e7fe      	b.n	8013776 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013778:	4b09      	ldr	r3, [pc, #36]	; (80137a0 <prvSwitchTimerLists+0xc0>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d1b2      	bne.n	80136e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013782:	4b07      	ldr	r3, [pc, #28]	; (80137a0 <prvSwitchTimerLists+0xc0>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013788:	4b06      	ldr	r3, [pc, #24]	; (80137a4 <prvSwitchTimerLists+0xc4>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4a04      	ldr	r2, [pc, #16]	; (80137a0 <prvSwitchTimerLists+0xc0>)
 801378e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013790:	4a04      	ldr	r2, [pc, #16]	; (80137a4 <prvSwitchTimerLists+0xc4>)
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	6013      	str	r3, [r2, #0]
}
 8013796:	bf00      	nop
 8013798:	3718      	adds	r7, #24
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	20002240 	.word	0x20002240
 80137a4:	20002244 	.word	0x20002244

080137a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80137ae:	f000 f965 	bl	8013a7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80137b2:	4b15      	ldr	r3, [pc, #84]	; (8013808 <prvCheckForValidListAndQueue+0x60>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d120      	bne.n	80137fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80137ba:	4814      	ldr	r0, [pc, #80]	; (801380c <prvCheckForValidListAndQueue+0x64>)
 80137bc:	f7fd f95e 	bl	8010a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80137c0:	4813      	ldr	r0, [pc, #76]	; (8013810 <prvCheckForValidListAndQueue+0x68>)
 80137c2:	f7fd f95b 	bl	8010a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80137c6:	4b13      	ldr	r3, [pc, #76]	; (8013814 <prvCheckForValidListAndQueue+0x6c>)
 80137c8:	4a10      	ldr	r2, [pc, #64]	; (801380c <prvCheckForValidListAndQueue+0x64>)
 80137ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80137cc:	4b12      	ldr	r3, [pc, #72]	; (8013818 <prvCheckForValidListAndQueue+0x70>)
 80137ce:	4a10      	ldr	r2, [pc, #64]	; (8013810 <prvCheckForValidListAndQueue+0x68>)
 80137d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80137d2:	2300      	movs	r3, #0
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	4b11      	ldr	r3, [pc, #68]	; (801381c <prvCheckForValidListAndQueue+0x74>)
 80137d8:	4a11      	ldr	r2, [pc, #68]	; (8013820 <prvCheckForValidListAndQueue+0x78>)
 80137da:	2110      	movs	r1, #16
 80137dc:	200a      	movs	r0, #10
 80137de:	f7fd fa69 	bl	8010cb4 <xQueueGenericCreateStatic>
 80137e2:	4602      	mov	r2, r0
 80137e4:	4b08      	ldr	r3, [pc, #32]	; (8013808 <prvCheckForValidListAndQueue+0x60>)
 80137e6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80137e8:	4b07      	ldr	r3, [pc, #28]	; (8013808 <prvCheckForValidListAndQueue+0x60>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d005      	beq.n	80137fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80137f0:	4b05      	ldr	r3, [pc, #20]	; (8013808 <prvCheckForValidListAndQueue+0x60>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	490b      	ldr	r1, [pc, #44]	; (8013824 <prvCheckForValidListAndQueue+0x7c>)
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7fe fa10 	bl	8011c1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80137fc:	f000 f96c 	bl	8013ad8 <vPortExitCritical>
}
 8013800:	bf00      	nop
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	20002248 	.word	0x20002248
 801380c:	20002218 	.word	0x20002218
 8013810:	2000222c 	.word	0x2000222c
 8013814:	20002240 	.word	0x20002240
 8013818:	20002244 	.word	0x20002244
 801381c:	200022f4 	.word	0x200022f4
 8013820:	20002254 	.word	0x20002254
 8013824:	08016d48 	.word	0x08016d48

08013828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013828:	b480      	push	{r7}
 801382a:	b085      	sub	sp, #20
 801382c:	af00      	add	r7, sp, #0
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	3b04      	subs	r3, #4
 8013838:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	3b04      	subs	r3, #4
 8013846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	f023 0201 	bic.w	r2, r3, #1
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	3b04      	subs	r3, #4
 8013856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013858:	4a0c      	ldr	r2, [pc, #48]	; (801388c <pxPortInitialiseStack+0x64>)
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	3b14      	subs	r3, #20
 8013862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	3b04      	subs	r3, #4
 801386e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f06f 0202 	mvn.w	r2, #2
 8013876:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	3b20      	subs	r3, #32
 801387c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801387e:	68fb      	ldr	r3, [r7, #12]
}
 8013880:	4618      	mov	r0, r3
 8013882:	3714      	adds	r7, #20
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr
 801388c:	08013891 	.word	0x08013891

08013890 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013890:	b480      	push	{r7}
 8013892:	b085      	sub	sp, #20
 8013894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013896:	2300      	movs	r3, #0
 8013898:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801389a:	4b11      	ldr	r3, [pc, #68]	; (80138e0 <prvTaskExitError+0x50>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a2:	d009      	beq.n	80138b8 <prvTaskExitError+0x28>
 80138a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a8:	f383 8811 	msr	BASEPRI, r3
 80138ac:	f3bf 8f6f 	isb	sy
 80138b0:	f3bf 8f4f 	dsb	sy
 80138b4:	60fb      	str	r3, [r7, #12]
 80138b6:	e7fe      	b.n	80138b6 <prvTaskExitError+0x26>
 80138b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80138ca:	bf00      	nop
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d0fc      	beq.n	80138cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80138d2:	bf00      	nop
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop
 80138e0:	20000160 	.word	0x20000160
	...

080138f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80138f0:	4b07      	ldr	r3, [pc, #28]	; (8013910 <pxCurrentTCBConst2>)
 80138f2:	6819      	ldr	r1, [r3, #0]
 80138f4:	6808      	ldr	r0, [r1, #0]
 80138f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138fa:	f380 8809 	msr	PSP, r0
 80138fe:	f3bf 8f6f 	isb	sy
 8013902:	f04f 0000 	mov.w	r0, #0
 8013906:	f380 8811 	msr	BASEPRI, r0
 801390a:	4770      	bx	lr
 801390c:	f3af 8000 	nop.w

08013910 <pxCurrentTCBConst2>:
 8013910:	20001d18 	.word	0x20001d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013914:	bf00      	nop
 8013916:	bf00      	nop

08013918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013918:	4808      	ldr	r0, [pc, #32]	; (801393c <prvPortStartFirstTask+0x24>)
 801391a:	6800      	ldr	r0, [r0, #0]
 801391c:	6800      	ldr	r0, [r0, #0]
 801391e:	f380 8808 	msr	MSP, r0
 8013922:	f04f 0000 	mov.w	r0, #0
 8013926:	f380 8814 	msr	CONTROL, r0
 801392a:	b662      	cpsie	i
 801392c:	b661      	cpsie	f
 801392e:	f3bf 8f4f 	dsb	sy
 8013932:	f3bf 8f6f 	isb	sy
 8013936:	df00      	svc	0
 8013938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801393a:	bf00      	nop
 801393c:	e000ed08 	.word	0xe000ed08

08013940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b086      	sub	sp, #24
 8013944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013946:	4b44      	ldr	r3, [pc, #272]	; (8013a58 <xPortStartScheduler+0x118>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	4a44      	ldr	r2, [pc, #272]	; (8013a5c <xPortStartScheduler+0x11c>)
 801394c:	4293      	cmp	r3, r2
 801394e:	d109      	bne.n	8013964 <xPortStartScheduler+0x24>
 8013950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013954:	f383 8811 	msr	BASEPRI, r3
 8013958:	f3bf 8f6f 	isb	sy
 801395c:	f3bf 8f4f 	dsb	sy
 8013960:	613b      	str	r3, [r7, #16]
 8013962:	e7fe      	b.n	8013962 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013964:	4b3c      	ldr	r3, [pc, #240]	; (8013a58 <xPortStartScheduler+0x118>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	4a3d      	ldr	r2, [pc, #244]	; (8013a60 <xPortStartScheduler+0x120>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d109      	bne.n	8013982 <xPortStartScheduler+0x42>
 801396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013972:	f383 8811 	msr	BASEPRI, r3
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	f3bf 8f4f 	dsb	sy
 801397e:	60fb      	str	r3, [r7, #12]
 8013980:	e7fe      	b.n	8013980 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013982:	4b38      	ldr	r3, [pc, #224]	; (8013a64 <xPortStartScheduler+0x124>)
 8013984:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	b2db      	uxtb	r3, r3
 801398c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	22ff      	movs	r2, #255	; 0xff
 8013992:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	b2db      	uxtb	r3, r3
 801399a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801399c:	78fb      	ldrb	r3, [r7, #3]
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80139a4:	b2da      	uxtb	r2, r3
 80139a6:	4b30      	ldr	r3, [pc, #192]	; (8013a68 <xPortStartScheduler+0x128>)
 80139a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80139aa:	4b30      	ldr	r3, [pc, #192]	; (8013a6c <xPortStartScheduler+0x12c>)
 80139ac:	2207      	movs	r2, #7
 80139ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80139b0:	e009      	b.n	80139c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80139b2:	4b2e      	ldr	r3, [pc, #184]	; (8013a6c <xPortStartScheduler+0x12c>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	3b01      	subs	r3, #1
 80139b8:	4a2c      	ldr	r2, [pc, #176]	; (8013a6c <xPortStartScheduler+0x12c>)
 80139ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80139bc:	78fb      	ldrb	r3, [r7, #3]
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	b2db      	uxtb	r3, r3
 80139c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80139c6:	78fb      	ldrb	r3, [r7, #3]
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139ce:	2b80      	cmp	r3, #128	; 0x80
 80139d0:	d0ef      	beq.n	80139b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80139d2:	4b26      	ldr	r3, [pc, #152]	; (8013a6c <xPortStartScheduler+0x12c>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f1c3 0307 	rsb	r3, r3, #7
 80139da:	2b04      	cmp	r3, #4
 80139dc:	d009      	beq.n	80139f2 <xPortStartScheduler+0xb2>
 80139de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e2:	f383 8811 	msr	BASEPRI, r3
 80139e6:	f3bf 8f6f 	isb	sy
 80139ea:	f3bf 8f4f 	dsb	sy
 80139ee:	60bb      	str	r3, [r7, #8]
 80139f0:	e7fe      	b.n	80139f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80139f2:	4b1e      	ldr	r3, [pc, #120]	; (8013a6c <xPortStartScheduler+0x12c>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	021b      	lsls	r3, r3, #8
 80139f8:	4a1c      	ldr	r2, [pc, #112]	; (8013a6c <xPortStartScheduler+0x12c>)
 80139fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80139fc:	4b1b      	ldr	r3, [pc, #108]	; (8013a6c <xPortStartScheduler+0x12c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013a04:	4a19      	ldr	r2, [pc, #100]	; (8013a6c <xPortStartScheduler+0x12c>)
 8013a06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	b2da      	uxtb	r2, r3
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013a10:	4b17      	ldr	r3, [pc, #92]	; (8013a70 <xPortStartScheduler+0x130>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	4a16      	ldr	r2, [pc, #88]	; (8013a70 <xPortStartScheduler+0x130>)
 8013a16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013a1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013a1c:	4b14      	ldr	r3, [pc, #80]	; (8013a70 <xPortStartScheduler+0x130>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	4a13      	ldr	r2, [pc, #76]	; (8013a70 <xPortStartScheduler+0x130>)
 8013a22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013a26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013a28:	f000 f8d6 	bl	8013bd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013a2c:	4b11      	ldr	r3, [pc, #68]	; (8013a74 <xPortStartScheduler+0x134>)
 8013a2e:	2200      	movs	r2, #0
 8013a30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013a32:	f000 f8f5 	bl	8013c20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013a36:	4b10      	ldr	r3, [pc, #64]	; (8013a78 <xPortStartScheduler+0x138>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	4a0f      	ldr	r2, [pc, #60]	; (8013a78 <xPortStartScheduler+0x138>)
 8013a3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013a40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013a42:	f7ff ff69 	bl	8013918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013a46:	f7fe fd4f 	bl	80124e8 <vTaskSwitchContext>
	prvTaskExitError();
 8013a4a:	f7ff ff21 	bl	8013890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013a4e:	2300      	movs	r3, #0
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3718      	adds	r7, #24
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	e000ed00 	.word	0xe000ed00
 8013a5c:	410fc271 	.word	0x410fc271
 8013a60:	410fc270 	.word	0x410fc270
 8013a64:	e000e400 	.word	0xe000e400
 8013a68:	20002344 	.word	0x20002344
 8013a6c:	20002348 	.word	0x20002348
 8013a70:	e000ed20 	.word	0xe000ed20
 8013a74:	20000160 	.word	0x20000160
 8013a78:	e000ef34 	.word	0xe000ef34

08013a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a86:	f383 8811 	msr	BASEPRI, r3
 8013a8a:	f3bf 8f6f 	isb	sy
 8013a8e:	f3bf 8f4f 	dsb	sy
 8013a92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013a94:	4b0e      	ldr	r3, [pc, #56]	; (8013ad0 <vPortEnterCritical+0x54>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	3301      	adds	r3, #1
 8013a9a:	4a0d      	ldr	r2, [pc, #52]	; (8013ad0 <vPortEnterCritical+0x54>)
 8013a9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013a9e:	4b0c      	ldr	r3, [pc, #48]	; (8013ad0 <vPortEnterCritical+0x54>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b01      	cmp	r3, #1
 8013aa4:	d10e      	bne.n	8013ac4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013aa6:	4b0b      	ldr	r3, [pc, #44]	; (8013ad4 <vPortEnterCritical+0x58>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d009      	beq.n	8013ac4 <vPortEnterCritical+0x48>
 8013ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab4:	f383 8811 	msr	BASEPRI, r3
 8013ab8:	f3bf 8f6f 	isb	sy
 8013abc:	f3bf 8f4f 	dsb	sy
 8013ac0:	603b      	str	r3, [r7, #0]
 8013ac2:	e7fe      	b.n	8013ac2 <vPortEnterCritical+0x46>
	}
}
 8013ac4:	bf00      	nop
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr
 8013ad0:	20000160 	.word	0x20000160
 8013ad4:	e000ed04 	.word	0xe000ed04

08013ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013ade:	4b11      	ldr	r3, [pc, #68]	; (8013b24 <vPortExitCritical+0x4c>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d109      	bne.n	8013afa <vPortExitCritical+0x22>
 8013ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aea:	f383 8811 	msr	BASEPRI, r3
 8013aee:	f3bf 8f6f 	isb	sy
 8013af2:	f3bf 8f4f 	dsb	sy
 8013af6:	607b      	str	r3, [r7, #4]
 8013af8:	e7fe      	b.n	8013af8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8013afa:	4b0a      	ldr	r3, [pc, #40]	; (8013b24 <vPortExitCritical+0x4c>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	3b01      	subs	r3, #1
 8013b00:	4a08      	ldr	r2, [pc, #32]	; (8013b24 <vPortExitCritical+0x4c>)
 8013b02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013b04:	4b07      	ldr	r3, [pc, #28]	; (8013b24 <vPortExitCritical+0x4c>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d104      	bne.n	8013b16 <vPortExitCritical+0x3e>
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013b16:	bf00      	nop
 8013b18:	370c      	adds	r7, #12
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr
 8013b22:	bf00      	nop
 8013b24:	20000160 	.word	0x20000160
	...

08013b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013b30:	f3ef 8009 	mrs	r0, PSP
 8013b34:	f3bf 8f6f 	isb	sy
 8013b38:	4b15      	ldr	r3, [pc, #84]	; (8013b90 <pxCurrentTCBConst>)
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	f01e 0f10 	tst.w	lr, #16
 8013b40:	bf08      	it	eq
 8013b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b4a:	6010      	str	r0, [r2, #0]
 8013b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013b54:	f380 8811 	msr	BASEPRI, r0
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	f3bf 8f6f 	isb	sy
 8013b60:	f7fe fcc2 	bl	80124e8 <vTaskSwitchContext>
 8013b64:	f04f 0000 	mov.w	r0, #0
 8013b68:	f380 8811 	msr	BASEPRI, r0
 8013b6c:	bc09      	pop	{r0, r3}
 8013b6e:	6819      	ldr	r1, [r3, #0]
 8013b70:	6808      	ldr	r0, [r1, #0]
 8013b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b76:	f01e 0f10 	tst.w	lr, #16
 8013b7a:	bf08      	it	eq
 8013b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013b80:	f380 8809 	msr	PSP, r0
 8013b84:	f3bf 8f6f 	isb	sy
 8013b88:	4770      	bx	lr
 8013b8a:	bf00      	nop
 8013b8c:	f3af 8000 	nop.w

08013b90 <pxCurrentTCBConst>:
 8013b90:	20001d18 	.word	0x20001d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013b94:	bf00      	nop
 8013b96:	bf00      	nop

08013b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8013b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba2:	f383 8811 	msr	BASEPRI, r3
 8013ba6:	f3bf 8f6f 	isb	sy
 8013baa:	f3bf 8f4f 	dsb	sy
 8013bae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013bb0:	f7fe fbe2 	bl	8012378 <xTaskIncrementTick>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d003      	beq.n	8013bc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013bba:	4b06      	ldr	r3, [pc, #24]	; (8013bd4 <SysTick_Handler+0x3c>)
 8013bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bc0:	601a      	str	r2, [r3, #0]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013bcc:	bf00      	nop
 8013bce:	3708      	adds	r7, #8
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	e000ed04 	.word	0xe000ed04

08013bd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013bd8:	b480      	push	{r7}
 8013bda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013bdc:	4b0b      	ldr	r3, [pc, #44]	; (8013c0c <vPortSetupTimerInterrupt+0x34>)
 8013bde:	2200      	movs	r2, #0
 8013be0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013be2:	4b0b      	ldr	r3, [pc, #44]	; (8013c10 <vPortSetupTimerInterrupt+0x38>)
 8013be4:	2200      	movs	r2, #0
 8013be6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013be8:	4b0a      	ldr	r3, [pc, #40]	; (8013c14 <vPortSetupTimerInterrupt+0x3c>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	4a0a      	ldr	r2, [pc, #40]	; (8013c18 <vPortSetupTimerInterrupt+0x40>)
 8013bee:	fba2 2303 	umull	r2, r3, r2, r3
 8013bf2:	099b      	lsrs	r3, r3, #6
 8013bf4:	4a09      	ldr	r2, [pc, #36]	; (8013c1c <vPortSetupTimerInterrupt+0x44>)
 8013bf6:	3b01      	subs	r3, #1
 8013bf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013bfa:	4b04      	ldr	r3, [pc, #16]	; (8013c0c <vPortSetupTimerInterrupt+0x34>)
 8013bfc:	2207      	movs	r2, #7
 8013bfe:	601a      	str	r2, [r3, #0]
}
 8013c00:	bf00      	nop
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	e000e010 	.word	0xe000e010
 8013c10:	e000e018 	.word	0xe000e018
 8013c14:	20000044 	.word	0x20000044
 8013c18:	10624dd3 	.word	0x10624dd3
 8013c1c:	e000e014 	.word	0xe000e014

08013c20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013c20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013c30 <vPortEnableVFP+0x10>
 8013c24:	6801      	ldr	r1, [r0, #0]
 8013c26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013c2a:	6001      	str	r1, [r0, #0]
 8013c2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013c2e:	bf00      	nop
 8013c30:	e000ed88 	.word	0xe000ed88

08013c34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013c34:	b480      	push	{r7}
 8013c36:	b085      	sub	sp, #20
 8013c38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013c3a:	f3ef 8305 	mrs	r3, IPSR
 8013c3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2b0f      	cmp	r3, #15
 8013c44:	d913      	bls.n	8013c6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013c46:	4a16      	ldr	r2, [pc, #88]	; (8013ca0 <vPortValidateInterruptPriority+0x6c>)
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013c50:	4b14      	ldr	r3, [pc, #80]	; (8013ca4 <vPortValidateInterruptPriority+0x70>)
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	7afa      	ldrb	r2, [r7, #11]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d209      	bcs.n	8013c6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8013c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c5e:	f383 8811 	msr	BASEPRI, r3
 8013c62:	f3bf 8f6f 	isb	sy
 8013c66:	f3bf 8f4f 	dsb	sy
 8013c6a:	607b      	str	r3, [r7, #4]
 8013c6c:	e7fe      	b.n	8013c6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013c6e:	4b0e      	ldr	r3, [pc, #56]	; (8013ca8 <vPortValidateInterruptPriority+0x74>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013c76:	4b0d      	ldr	r3, [pc, #52]	; (8013cac <vPortValidateInterruptPriority+0x78>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d909      	bls.n	8013c92 <vPortValidateInterruptPriority+0x5e>
 8013c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c82:	f383 8811 	msr	BASEPRI, r3
 8013c86:	f3bf 8f6f 	isb	sy
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	603b      	str	r3, [r7, #0]
 8013c90:	e7fe      	b.n	8013c90 <vPortValidateInterruptPriority+0x5c>
	}
 8013c92:	bf00      	nop
 8013c94:	3714      	adds	r7, #20
 8013c96:	46bd      	mov	sp, r7
 8013c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9c:	4770      	bx	lr
 8013c9e:	bf00      	nop
 8013ca0:	e000e3f0 	.word	0xe000e3f0
 8013ca4:	20002344 	.word	0x20002344
 8013ca8:	e000ed0c 	.word	0xe000ed0c
 8013cac:	20002348 	.word	0x20002348

08013cb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b08a      	sub	sp, #40	; 0x28
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013cbc:	f7fe fa6a 	bl	8012194 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013cc0:	4b57      	ldr	r3, [pc, #348]	; (8013e20 <pvPortMalloc+0x170>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d101      	bne.n	8013ccc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013cc8:	f000 f90c 	bl	8013ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013ccc:	4b55      	ldr	r3, [pc, #340]	; (8013e24 <pvPortMalloc+0x174>)
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4013      	ands	r3, r2
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	f040 808c 	bne.w	8013df2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d01c      	beq.n	8013d1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013ce0:	2208      	movs	r2, #8
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f003 0307 	and.w	r3, r3, #7
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d013      	beq.n	8013d1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f023 0307 	bic.w	r3, r3, #7
 8013cf8:	3308      	adds	r3, #8
 8013cfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f003 0307 	and.w	r3, r3, #7
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d009      	beq.n	8013d1a <pvPortMalloc+0x6a>
 8013d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d0a:	f383 8811 	msr	BASEPRI, r3
 8013d0e:	f3bf 8f6f 	isb	sy
 8013d12:	f3bf 8f4f 	dsb	sy
 8013d16:	617b      	str	r3, [r7, #20]
 8013d18:	e7fe      	b.n	8013d18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d068      	beq.n	8013df2 <pvPortMalloc+0x142>
 8013d20:	4b41      	ldr	r3, [pc, #260]	; (8013e28 <pvPortMalloc+0x178>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d863      	bhi.n	8013df2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013d2a:	4b40      	ldr	r3, [pc, #256]	; (8013e2c <pvPortMalloc+0x17c>)
 8013d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013d2e:	4b3f      	ldr	r3, [pc, #252]	; (8013e2c <pvPortMalloc+0x17c>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d34:	e004      	b.n	8013d40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d903      	bls.n	8013d52 <pvPortMalloc+0xa2>
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d1f1      	bne.n	8013d36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013d52:	4b33      	ldr	r3, [pc, #204]	; (8013e20 <pvPortMalloc+0x170>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d04a      	beq.n	8013df2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013d5c:	6a3b      	ldr	r3, [r7, #32]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2208      	movs	r2, #8
 8013d62:	4413      	add	r3, r2
 8013d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d68:	681a      	ldr	r2, [r3, #0]
 8013d6a:	6a3b      	ldr	r3, [r7, #32]
 8013d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d70:	685a      	ldr	r2, [r3, #4]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	1ad2      	subs	r2, r2, r3
 8013d76:	2308      	movs	r3, #8
 8013d78:	005b      	lsls	r3, r3, #1
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d91e      	bls.n	8013dbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	4413      	add	r3, r2
 8013d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	f003 0307 	and.w	r3, r3, #7
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d009      	beq.n	8013da4 <pvPortMalloc+0xf4>
 8013d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d94:	f383 8811 	msr	BASEPRI, r3
 8013d98:	f3bf 8f6f 	isb	sy
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	613b      	str	r3, [r7, #16]
 8013da2:	e7fe      	b.n	8013da2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da6:	685a      	ldr	r2, [r3, #4]
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	1ad2      	subs	r2, r2, r3
 8013dac:	69bb      	ldr	r3, [r7, #24]
 8013dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013db6:	69b8      	ldr	r0, [r7, #24]
 8013db8:	f000 f8f6 	bl	8013fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013dbc:	4b1a      	ldr	r3, [pc, #104]	; (8013e28 <pvPortMalloc+0x178>)
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc2:	685b      	ldr	r3, [r3, #4]
 8013dc4:	1ad3      	subs	r3, r2, r3
 8013dc6:	4a18      	ldr	r2, [pc, #96]	; (8013e28 <pvPortMalloc+0x178>)
 8013dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013dca:	4b17      	ldr	r3, [pc, #92]	; (8013e28 <pvPortMalloc+0x178>)
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	4b18      	ldr	r3, [pc, #96]	; (8013e30 <pvPortMalloc+0x180>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d203      	bcs.n	8013dde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013dd6:	4b14      	ldr	r3, [pc, #80]	; (8013e28 <pvPortMalloc+0x178>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	4a15      	ldr	r2, [pc, #84]	; (8013e30 <pvPortMalloc+0x180>)
 8013ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de0:	685a      	ldr	r2, [r3, #4]
 8013de2:	4b10      	ldr	r3, [pc, #64]	; (8013e24 <pvPortMalloc+0x174>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	431a      	orrs	r2, r3
 8013de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dee:	2200      	movs	r2, #0
 8013df0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013df2:	f7fe fa15 	bl	8012220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013df6:	69fb      	ldr	r3, [r7, #28]
 8013df8:	f003 0307 	and.w	r3, r3, #7
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d009      	beq.n	8013e14 <pvPortMalloc+0x164>
 8013e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e04:	f383 8811 	msr	BASEPRI, r3
 8013e08:	f3bf 8f6f 	isb	sy
 8013e0c:	f3bf 8f4f 	dsb	sy
 8013e10:	60fb      	str	r3, [r7, #12]
 8013e12:	e7fe      	b.n	8013e12 <pvPortMalloc+0x162>
	return pvReturn;
 8013e14:	69fb      	ldr	r3, [r7, #28]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3728      	adds	r7, #40	; 0x28
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	20004a64 	.word	0x20004a64
 8013e24:	20004a70 	.word	0x20004a70
 8013e28:	20004a68 	.word	0x20004a68
 8013e2c:	20004a5c 	.word	0x20004a5c
 8013e30:	20004a6c 	.word	0x20004a6c

08013e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b086      	sub	sp, #24
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d046      	beq.n	8013ed4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013e46:	2308      	movs	r3, #8
 8013e48:	425b      	negs	r3, r3
 8013e4a:	697a      	ldr	r2, [r7, #20]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	685a      	ldr	r2, [r3, #4]
 8013e58:	4b20      	ldr	r3, [pc, #128]	; (8013edc <vPortFree+0xa8>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4013      	ands	r3, r2
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d109      	bne.n	8013e76 <vPortFree+0x42>
 8013e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e66:	f383 8811 	msr	BASEPRI, r3
 8013e6a:	f3bf 8f6f 	isb	sy
 8013e6e:	f3bf 8f4f 	dsb	sy
 8013e72:	60fb      	str	r3, [r7, #12]
 8013e74:	e7fe      	b.n	8013e74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d009      	beq.n	8013e92 <vPortFree+0x5e>
 8013e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	60bb      	str	r3, [r7, #8]
 8013e90:	e7fe      	b.n	8013e90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	685a      	ldr	r2, [r3, #4]
 8013e96:	4b11      	ldr	r3, [pc, #68]	; (8013edc <vPortFree+0xa8>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	4013      	ands	r3, r2
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d019      	beq.n	8013ed4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013ea0:	693b      	ldr	r3, [r7, #16]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d115      	bne.n	8013ed4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	685a      	ldr	r2, [r3, #4]
 8013eac:	4b0b      	ldr	r3, [pc, #44]	; (8013edc <vPortFree+0xa8>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	43db      	mvns	r3, r3
 8013eb2:	401a      	ands	r2, r3
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013eb8:	f7fe f96c 	bl	8012194 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	685a      	ldr	r2, [r3, #4]
 8013ec0:	4b07      	ldr	r3, [pc, #28]	; (8013ee0 <vPortFree+0xac>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	4a06      	ldr	r2, [pc, #24]	; (8013ee0 <vPortFree+0xac>)
 8013ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013eca:	6938      	ldr	r0, [r7, #16]
 8013ecc:	f000 f86c 	bl	8013fa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013ed0:	f7fe f9a6 	bl	8012220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013ed4:	bf00      	nop
 8013ed6:	3718      	adds	r7, #24
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	20004a70 	.word	0x20004a70
 8013ee0:	20004a68 	.word	0x20004a68

08013ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b085      	sub	sp, #20
 8013ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013eea:	f242 7310 	movw	r3, #10000	; 0x2710
 8013eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013ef0:	4b27      	ldr	r3, [pc, #156]	; (8013f90 <prvHeapInit+0xac>)
 8013ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f003 0307 	and.w	r3, r3, #7
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d00c      	beq.n	8013f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	3307      	adds	r3, #7
 8013f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	f023 0307 	bic.w	r3, r3, #7
 8013f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013f0c:	68ba      	ldr	r2, [r7, #8]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	1ad3      	subs	r3, r2, r3
 8013f12:	4a1f      	ldr	r2, [pc, #124]	; (8013f90 <prvHeapInit+0xac>)
 8013f14:	4413      	add	r3, r2
 8013f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013f1c:	4a1d      	ldr	r2, [pc, #116]	; (8013f94 <prvHeapInit+0xb0>)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013f22:	4b1c      	ldr	r3, [pc, #112]	; (8013f94 <prvHeapInit+0xb0>)
 8013f24:	2200      	movs	r2, #0
 8013f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	68ba      	ldr	r2, [r7, #8]
 8013f2c:	4413      	add	r3, r2
 8013f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013f30:	2208      	movs	r2, #8
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	1a9b      	subs	r3, r3, r2
 8013f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	f023 0307 	bic.w	r3, r3, #7
 8013f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	4a15      	ldr	r2, [pc, #84]	; (8013f98 <prvHeapInit+0xb4>)
 8013f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013f46:	4b14      	ldr	r3, [pc, #80]	; (8013f98 <prvHeapInit+0xb4>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013f4e:	4b12      	ldr	r3, [pc, #72]	; (8013f98 <prvHeapInit+0xb4>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2200      	movs	r2, #0
 8013f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	68fa      	ldr	r2, [r7, #12]
 8013f5e:	1ad2      	subs	r2, r2, r3
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013f64:	4b0c      	ldr	r3, [pc, #48]	; (8013f98 <prvHeapInit+0xb4>)
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	4a0a      	ldr	r2, [pc, #40]	; (8013f9c <prvHeapInit+0xb8>)
 8013f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	4a09      	ldr	r2, [pc, #36]	; (8013fa0 <prvHeapInit+0xbc>)
 8013f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013f7c:	4b09      	ldr	r3, [pc, #36]	; (8013fa4 <prvHeapInit+0xc0>)
 8013f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013f82:	601a      	str	r2, [r3, #0]
}
 8013f84:	bf00      	nop
 8013f86:	3714      	adds	r7, #20
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8e:	4770      	bx	lr
 8013f90:	2000234c 	.word	0x2000234c
 8013f94:	20004a5c 	.word	0x20004a5c
 8013f98:	20004a64 	.word	0x20004a64
 8013f9c:	20004a6c 	.word	0x20004a6c
 8013fa0:	20004a68 	.word	0x20004a68
 8013fa4:	20004a70 	.word	0x20004a70

08013fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b085      	sub	sp, #20
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013fb0:	4b28      	ldr	r3, [pc, #160]	; (8014054 <prvInsertBlockIntoFreeList+0xac>)
 8013fb2:	60fb      	str	r3, [r7, #12]
 8013fb4:	e002      	b.n	8013fbc <prvInsertBlockIntoFreeList+0x14>
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	60fb      	str	r3, [r7, #12]
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d8f7      	bhi.n	8013fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	685b      	ldr	r3, [r3, #4]
 8013fce:	68ba      	ldr	r2, [r7, #8]
 8013fd0:	4413      	add	r3, r2
 8013fd2:	687a      	ldr	r2, [r7, #4]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d108      	bne.n	8013fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	685a      	ldr	r2, [r3, #4]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	441a      	add	r2, r3
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	68ba      	ldr	r2, [r7, #8]
 8013ff4:	441a      	add	r2, r3
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d118      	bne.n	8014030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	4b15      	ldr	r3, [pc, #84]	; (8014058 <prvInsertBlockIntoFreeList+0xb0>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	429a      	cmp	r2, r3
 8014008:	d00d      	beq.n	8014026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	685a      	ldr	r2, [r3, #4]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	441a      	add	r2, r3
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	681a      	ldr	r2, [r3, #0]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	601a      	str	r2, [r3, #0]
 8014024:	e008      	b.n	8014038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014026:	4b0c      	ldr	r3, [pc, #48]	; (8014058 <prvInsertBlockIntoFreeList+0xb0>)
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	601a      	str	r2, [r3, #0]
 801402e:	e003      	b.n	8014038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	429a      	cmp	r2, r3
 801403e:	d002      	beq.n	8014046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014046:	bf00      	nop
 8014048:	3714      	adds	r7, #20
 801404a:	46bd      	mov	sp, r7
 801404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014050:	4770      	bx	lr
 8014052:	bf00      	nop
 8014054:	20004a5c 	.word	0x20004a5c
 8014058:	20004a64 	.word	0x20004a64

0801405c <APP_THREAD_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_THREAD_Init( void )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
  /* USER CODE END APP_THREAD_INIT_1 */

  SHCI_CmdStatus_t ThreadInitStatus;

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_THREAD_CheckWirelessFirmwareInfo();
 8014062:	f000 f985 	bl	8014370 <APP_THREAD_CheckWirelessFirmwareInfo>
#if (CFG_USB_INTERFACE_ENABLE != 0)
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

  /* Register cmdbuffer */
  APP_THREAD_RegisterCmdBuffer(&ThreadOtCmdBuffer);
 8014066:	480e      	ldr	r0, [pc, #56]	; (80140a0 <APP_THREAD_Init+0x44>)
 8014068:	f000 fbf2 	bl	8014850 <APP_THREAD_RegisterCmdBuffer>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_THREAD, UTIL_LPM_DISABLE);
 801406c:	2101      	movs	r1, #1
 801406e:	2002      	movs	r0, #2
 8014070:	f001 fd2e 	bl	8015ad0 <UTIL_LPM_SetOffMode>

  /* Init config buffer and call TL_THREAD_Init */
  APP_THREAD_TL_THREAD_INIT();
 8014074:	f000 fce4 	bl	8014a40 <APP_THREAD_TL_THREAD_INIT>

  /* Configure UART for sending CLI command from M4 */
  APP_THREAD_Init_UART_CLI();
 8014078:	f000 fcd0 	bl	8014a1c <APP_THREAD_Init_UART_CLI>

  /* Send Thread start system cmd to M0 */
  ThreadInitStatus = SHCI_C2_THREAD_Init();
 801407c:	f7f9 fffa 	bl	800e074 <SHCI_C2_THREAD_Init>
 8014080:	4603      	mov	r3, r0
 8014082:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN APP_THREAD_INIT_TIMER */

  /* USER CODE END APP_THREAD_INIT_TIMER */

  /* Create the different FreeRTOS tasks requested to run this Thread application*/
  OsTaskMsgM0ToM4Id = osThreadNew(APP_THREAD_FreeRTOSProcessMsgM0ToM4Task, NULL,&ThreadMsgM0ToM4Process_attr);
 8014084:	4a07      	ldr	r2, [pc, #28]	; (80140a4 <APP_THREAD_Init+0x48>)
 8014086:	2100      	movs	r1, #0
 8014088:	4807      	ldr	r0, [pc, #28]	; (80140a8 <APP_THREAD_Init+0x4c>)
 801408a:	f7fb fee9 	bl	800fe60 <osThreadNew>
 801408e:	4602      	mov	r2, r0
 8014090:	4b06      	ldr	r3, [pc, #24]	; (80140ac <APP_THREAD_Init+0x50>)
 8014092:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN APP_THREAD_INIT_FREERTOS */

  /* USER CODE END APP_THREAD_INIT_FREERTOS */

  /* Configure the Thread device at start */
  APP_THREAD_DeviceConfig();
 8014094:	f000 f86c 	bl	8014170 <APP_THREAD_DeviceConfig>

  /* USER CODE BEGIN APP_THREAD_INIT_2 */

  /* USER CODE END APP_THREAD_INIT_2 */
}
 8014098:	bf00      	nop
 801409a:	3708      	adds	r7, #8
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	20030834 	.word	0x20030834
 80140a4:	08017158 	.word	0x08017158
 80140a8:	0801442d 	.word	0x0801442d
 80140ac:	20004b88 	.word	0x20004b88

080140b0 <APP_THREAD_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_THREAD_Error(uint32_t ErrId, uint32_t ErrCode)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_THREAD_Error_1 */

  /* USER CODE END APP_THREAD_Error_1 */
  switch(ErrId)
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2b07      	cmp	r3, #7
 80140be:	d83b      	bhi.n	8014138 <APP_THREAD_Error+0x88>
 80140c0:	a201      	add	r2, pc, #4	; (adr r2, 80140c8 <APP_THREAD_Error+0x18>)
 80140c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140c6:	bf00      	nop
 80140c8:	080140e9 	.word	0x080140e9
 80140cc:	080140f3 	.word	0x080140f3
 80140d0:	080140fd 	.word	0x080140fd
 80140d4:	08014107 	.word	0x08014107
 80140d8:	08014111 	.word	0x08014111
 80140dc:	0801411b 	.word	0x0801411b
 80140e0:	08014125 	.word	0x08014125
 80140e4:	0801412f 	.word	0x0801412f
  {
  case ERR_REC_MULTI_MSG_FROM_M0 :
    APP_THREAD_TraceError("ERROR : ERR_REC_MULTI_MSG_FROM_M0 ", ErrCode);
 80140e8:	6839      	ldr	r1, [r7, #0]
 80140ea:	4818      	ldr	r0, [pc, #96]	; (801414c <APP_THREAD_Error+0x9c>)
 80140ec:	f000 f934 	bl	8014358 <APP_THREAD_TraceError>
    break;
 80140f0:	e027      	b.n	8014142 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_STATE_CB :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_STATE_CB ",ErrCode);
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	4816      	ldr	r0, [pc, #88]	; (8014150 <APP_THREAD_Error+0xa0>)
 80140f6:	f000 f92f 	bl	8014358 <APP_THREAD_TraceError>
    break;
 80140fa:	e022      	b.n	8014142 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_CHANNEL :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_CHANNEL ",ErrCode);
 80140fc:	6839      	ldr	r1, [r7, #0]
 80140fe:	4815      	ldr	r0, [pc, #84]	; (8014154 <APP_THREAD_Error+0xa4>)
 8014100:	f000 f92a 	bl	8014358 <APP_THREAD_TraceError>
    break;
 8014104:	e01d      	b.n	8014142 <APP_THREAD_Error+0x92>
  case ERR_THREAD_SET_PANID :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_SET_PANID ",ErrCode);
 8014106:	6839      	ldr	r1, [r7, #0]
 8014108:	4813      	ldr	r0, [pc, #76]	; (8014158 <APP_THREAD_Error+0xa8>)
 801410a:	f000 f925 	bl	8014358 <APP_THREAD_TraceError>
    break;
 801410e:	e018      	b.n	8014142 <APP_THREAD_Error+0x92>
  case ERR_THREAD_IPV6_ENABLE :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_IPV6_ENABLE ",ErrCode);
 8014110:	6839      	ldr	r1, [r7, #0]
 8014112:	4812      	ldr	r0, [pc, #72]	; (801415c <APP_THREAD_Error+0xac>)
 8014114:	f000 f920 	bl	8014358 <APP_THREAD_TraceError>
    break;
 8014118:	e013      	b.n	8014142 <APP_THREAD_Error+0x92>
  case ERR_THREAD_START :
    APP_THREAD_TraceError("ERROR: ERR_THREAD_START ", ErrCode);
 801411a:	6839      	ldr	r1, [r7, #0]
 801411c:	4810      	ldr	r0, [pc, #64]	; (8014160 <APP_THREAD_Error+0xb0>)
 801411e:	f000 f91b 	bl	8014358 <APP_THREAD_TraceError>
    break;
 8014122:	e00e      	b.n	8014142 <APP_THREAD_Error+0x92>
  case ERR_THREAD_ERASE_PERSISTENT_INFO :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_ERASE_PERSISTENT_INFO ",ErrCode);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	480f      	ldr	r0, [pc, #60]	; (8014164 <APP_THREAD_Error+0xb4>)
 8014128:	f000 f916 	bl	8014358 <APP_THREAD_TraceError>
    break;
 801412c:	e009      	b.n	8014142 <APP_THREAD_Error+0x92>
  case ERR_THREAD_CHECK_WIRELESS :
    APP_THREAD_TraceError("ERROR : ERR_THREAD_CHECK_WIRELESS ",ErrCode);
 801412e:	6839      	ldr	r1, [r7, #0]
 8014130:	480d      	ldr	r0, [pc, #52]	; (8014168 <APP_THREAD_Error+0xb8>)
 8014132:	f000 f911 	bl	8014358 <APP_THREAD_TraceError>
    break;
 8014136:	e004      	b.n	8014142 <APP_THREAD_Error+0x92>
  /* USER CODE BEGIN APP_THREAD_Error_2 */

  /* USER CODE END APP_THREAD_Error_2 */
  default :
    APP_THREAD_TraceError("ERROR Unknown ", 0);
 8014138:	2100      	movs	r1, #0
 801413a:	480c      	ldr	r0, [pc, #48]	; (801416c <APP_THREAD_Error+0xbc>)
 801413c:	f000 f90c 	bl	8014358 <APP_THREAD_TraceError>
    break;
 8014140:	bf00      	nop
  }
}
 8014142:	bf00      	nop
 8014144:	3708      	adds	r7, #8
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	08016da4 	.word	0x08016da4
 8014150:	08016dc8 	.word	0x08016dc8
 8014154:	08016dec 	.word	0x08016dec
 8014158:	08016e0c 	.word	0x08016e0c
 801415c:	08016e2c 	.word	0x08016e2c
 8014160:	08016e4c 	.word	0x08016e4c
 8014164:	08016e68 	.word	0x08016e68
 8014168:	08016e94 	.word	0x08016e94
 801416c:	08016eb8 	.word	0x08016eb8

08014170 <APP_THREAD_DeviceConfig>:
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
static void APP_THREAD_DeviceConfig(void)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
  otError error;
  error = otInstanceErasePersistentInfo(NULL);
 8014176:	2000      	movs	r0, #0
 8014178:	f7fa ffb2 	bl	800f0e0 <otInstanceErasePersistentInfo>
 801417c:	4603      	mov	r3, r0
 801417e:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 8014180:	79fb      	ldrb	r3, [r7, #7]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d004      	beq.n	8014190 <APP_THREAD_DeviceConfig+0x20>
  {
    APP_THREAD_Error(ERR_THREAD_ERASE_PERSISTENT_INFO,error);
 8014186:	79fb      	ldrb	r3, [r7, #7]
 8014188:	4619      	mov	r1, r3
 801418a:	2006      	movs	r0, #6
 801418c:	f7ff ff90 	bl	80140b0 <APP_THREAD_Error>
  }
  otInstanceFinalize(NULL);
 8014190:	2000      	movs	r0, #0
 8014192:	f7fa ff49 	bl	800f028 <otInstanceFinalize>
  otInstanceInitSingle();
 8014196:	f7fa ff20 	bl	800efda <otInstanceInitSingle>
  error = otSetStateChangedCallback(NULL, APP_THREAD_StateNotif, NULL);
 801419a:	2200      	movs	r2, #0
 801419c:	4955      	ldr	r1, [pc, #340]	; (80142f4 <APP_THREAD_DeviceConfig+0x184>)
 801419e:	2000      	movs	r0, #0
 80141a0:	f7fa ff68 	bl	800f074 <otSetStateChangedCallback>
 80141a4:	4603      	mov	r3, r0
 80141a6:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80141a8:	79fb      	ldrb	r3, [r7, #7]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d004      	beq.n	80141b8 <APP_THREAD_DeviceConfig+0x48>
  {
    APP_THREAD_Error(ERR_THREAD_SET_STATE_CB,error);
 80141ae:	79fb      	ldrb	r3, [r7, #7]
 80141b0:	4619      	mov	r1, r3
 80141b2:	2001      	movs	r0, #1
 80141b4:	f7ff ff7c 	bl	80140b0 <APP_THREAD_Error>
  }
  error = otLinkSetChannel(NULL, C_CHANNEL_NB);
 80141b8:	2117      	movs	r1, #23
 80141ba:	2000      	movs	r0, #0
 80141bc:	f7fb f898 	bl	800f2f0 <otLinkSetChannel>
 80141c0:	4603      	mov	r3, r0
 80141c2:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80141c4:	79fb      	ldrb	r3, [r7, #7]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d004      	beq.n	80141d4 <APP_THREAD_DeviceConfig+0x64>
  {
    APP_THREAD_Error(ERR_THREAD_SET_CHANNEL,error);
 80141ca:	79fb      	ldrb	r3, [r7, #7]
 80141cc:	4619      	mov	r1, r3
 80141ce:	2002      	movs	r0, #2
 80141d0:	f7ff ff6e 	bl	80140b0 <APP_THREAD_Error>
  }
  error = otLinkSetPanId(NULL, C_PANID);
 80141d4:	f241 2134 	movw	r1, #4660	; 0x1234
 80141d8:	2000      	movs	r0, #0
 80141da:	f7fb f8b9 	bl	800f350 <otLinkSetPanId>
 80141de:	4603      	mov	r3, r0
 80141e0:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80141e2:	79fb      	ldrb	r3, [r7, #7]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d004      	beq.n	80141f2 <APP_THREAD_DeviceConfig+0x82>
  {
    APP_THREAD_Error(ERR_THREAD_SET_PANID,error);
 80141e8:	79fb      	ldrb	r3, [r7, #7]
 80141ea:	4619      	mov	r1, r3
 80141ec:	2003      	movs	r0, #3
 80141ee:	f7ff ff5f 	bl	80140b0 <APP_THREAD_Error>
  }
  error = otIp6SetEnabled(NULL, true);
 80141f2:	2101      	movs	r1, #1
 80141f4:	2000      	movs	r0, #0
 80141f6:	f7fa ff9c 	bl	800f132 <otIp6SetEnabled>
 80141fa:	4603      	mov	r3, r0
 80141fc:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 80141fe:	79fb      	ldrb	r3, [r7, #7]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d004      	beq.n	801420e <APP_THREAD_DeviceConfig+0x9e>
  {
    APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE,error);
 8014204:	79fb      	ldrb	r3, [r7, #7]
 8014206:	4619      	mov	r1, r3
 8014208:	2004      	movs	r0, #4
 801420a:	f7ff ff51 	bl	80140b0 <APP_THREAD_Error>
  }
  error = otThreadSetEnabled(NULL, true);
 801420e:	2101      	movs	r1, #1
 8014210:	2000      	movs	r0, #0
 8014212:	f7fb fbd2 	bl	800f9ba <otThreadSetEnabled>
 8014216:	4603      	mov	r3, r0
 8014218:	71fb      	strb	r3, [r7, #7]
  if (error != OT_ERROR_NONE)
 801421a:	79fb      	ldrb	r3, [r7, #7]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d004      	beq.n	801422a <APP_THREAD_DeviceConfig+0xba>
  {
    APP_THREAD_Error(ERR_THREAD_START,error);
 8014220:	79fb      	ldrb	r3, [r7, #7]
 8014222:	4619      	mov	r1, r3
 8014224:	2005      	movs	r0, #5
 8014226:	f7ff ff43 	bl	80140b0 <APP_THREAD_Error>
  }

  /* USER CODE BEGIN DEVICECONFIG */
  error = otThreadSetEnabled(NULL, false);
 801422a:	2100      	movs	r1, #0
 801422c:	2000      	movs	r0, #0
 801422e:	f7fb fbc4 	bl	800f9ba <otThreadSetEnabled>
 8014232:	4603      	mov	r3, r0
 8014234:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8014236:	79fb      	ldrb	r3, [r7, #7]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d004      	beq.n	8014246 <APP_THREAD_DeviceConfig+0xd6>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 801423c:	79fb      	ldrb	r3, [r7, #7]
 801423e:	4619      	mov	r1, r3
 8014240:	2005      	movs	r0, #5
 8014242:	f7ff ff35 	bl	80140b0 <APP_THREAD_Error>
  	}


  	error = otPlatRadioSetTransmitPower(NULL, TRANSMIT_POWER);
 8014246:	2106      	movs	r1, #6
 8014248:	2000      	movs	r0, #0
 801424a:	f7fb fb83 	bl	800f954 <otPlatRadioSetTransmitPower>
 801424e:	4603      	mov	r3, r0
 8014250:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8014252:	79fb      	ldrb	r3, [r7, #7]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d004      	beq.n	8014262 <APP_THREAD_DeviceConfig+0xf2>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 8014258:	79fb      	ldrb	r3, [r7, #7]
 801425a:	4619      	mov	r1, r3
 801425c:	2002      	movs	r0, #2
 801425e:	f7ff ff27 	bl	80140b0 <APP_THREAD_Error>
  	}

  	otThreadSetChildTimeout(NULL, CHILD_SUPERVISION_TIMEOUT);
 8014262:	2103      	movs	r1, #3
 8014264:	2000      	movs	r0, #0
 8014266:	f7fb fbd8 	bl	800fa1a <otThreadSetChildTimeout>
//  	error = otThreadSetMasterKey(NULL, &masterKey);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otThreadSetNetworkName(NULL, networkName);
 801426a:	4923      	ldr	r1, [pc, #140]	; (80142f8 <APP_THREAD_DeviceConfig+0x188>)
 801426c:	2000      	movs	r0, #0
 801426e:	f7fb fc50 	bl	800fb12 <otThreadSetNetworkName>
 8014272:	4603      	mov	r3, r0
 8014274:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8014276:	79fb      	ldrb	r3, [r7, #7]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d004      	beq.n	8014286 <APP_THREAD_DeviceConfig+0x116>
  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
 801427c:	79fb      	ldrb	r3, [r7, #7]
 801427e:	4619      	mov	r1, r3
 8014280:	2002      	movs	r0, #2
 8014282:	f7ff ff15 	bl	80140b0 <APP_THREAD_Error>
//  	error = otThreadSetExtendedPanId(NULL, &extendedPanId);
//  	if (error != OT_ERROR_NONE) {
//  		APP_THREAD_Error(ERR_THREAD_SET_CHANNEL, error);
//  	}

  	error = otIp6SetEnabled(NULL, true);
 8014286:	2101      	movs	r1, #1
 8014288:	2000      	movs	r0, #0
 801428a:	f7fa ff52 	bl	800f132 <otIp6SetEnabled>
 801428e:	4603      	mov	r3, r0
 8014290:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 8014292:	79fb      	ldrb	r3, [r7, #7]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d004      	beq.n	80142a2 <APP_THREAD_DeviceConfig+0x132>
  		APP_THREAD_Error(ERR_THREAD_IPV6_ENABLE, error);
 8014298:	79fb      	ldrb	r3, [r7, #7]
 801429a:	4619      	mov	r1, r3
 801429c:	2004      	movs	r0, #4
 801429e:	f7ff ff07 	bl	80140b0 <APP_THREAD_Error>
  	}

  	error = otThreadSetEnabled(NULL, true);
 80142a2:	2101      	movs	r1, #1
 80142a4:	2000      	movs	r0, #0
 80142a6:	f7fb fb88 	bl	800f9ba <otThreadSetEnabled>
 80142aa:	4603      	mov	r3, r0
 80142ac:	71fb      	strb	r3, [r7, #7]
  	if (error != OT_ERROR_NONE) {
 80142ae:	79fb      	ldrb	r3, [r7, #7]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d004      	beq.n	80142be <APP_THREAD_DeviceConfig+0x14e>
  		APP_THREAD_Error(ERR_THREAD_START, error);
 80142b4:	79fb      	ldrb	r3, [r7, #7]
 80142b6:	4619      	mov	r1, r3
 80142b8:	2005      	movs	r0, #5
 80142ba:	f7ff fef9 	bl	80140b0 <APP_THREAD_Error>
  	}

  	error = otCoapStart(NULL, OT_DEFAULT_COAP_PORT);
 80142be:	f241 6133 	movw	r1, #5683	; 0x1633
 80142c2:	2000      	movs	r0, #0
 80142c4:	f7fa fdf7 	bl	800eeb6 <otCoapStart>
 80142c8:	4603      	mov	r3, r0
 80142ca:	71fb      	strb	r3, [r7, #7]
//  	error = otCoapAddResource(NULL, &OT_Lights_Complex_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Lights_Simple_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Border_Time_Ressource);
//  	error = otCoapAddResource(NULL, &OT_Node_Info_Ressource);

  	error = otCoapAddResource(NULL, &OT_Node_Cal_Ressource);
 80142cc:	490b      	ldr	r1, [pc, #44]	; (80142fc <APP_THREAD_DeviceConfig+0x18c>)
 80142ce:	2000      	movs	r0, #0
 80142d0:	f7fa fe21 	bl	800ef16 <otCoapAddResource>
 80142d4:	4603      	mov	r3, r0
 80142d6:	71fb      	strb	r3, [r7, #7]
  	error = otCoapAddResource(NULL, &OT_Node_Spot_Ressource);
 80142d8:	4909      	ldr	r1, [pc, #36]	; (8014300 <APP_THREAD_DeviceConfig+0x190>)
 80142da:	2000      	movs	r0, #0
 80142dc:	f7fa fe1b 	bl	800ef16 <otCoapAddResource>
 80142e0:	4603      	mov	r3, r0
 80142e2:	71fb      	strb	r3, [r7, #7]
  #ifndef DONGLE_CODE
//      error = otCoapAddResource(NULL, &OT_Toggle_Logging_Ressource);
  #endif
  	// set default multicast address for border router
  //    otIp6AddressFromString("ff03::1", &borderRouter.ipv6);
  	otIp6AddressFromString("ff03::1", &multicastAddr);
 80142e4:	4907      	ldr	r1, [pc, #28]	; (8014304 <APP_THREAD_DeviceConfig+0x194>)
 80142e6:	4808      	ldr	r0, [pc, #32]	; (8014308 <APP_THREAD_DeviceConfig+0x198>)
 80142e8:	f7fa ffd0 	bl	800f28c <otIp6AddressFromString>
  	// set UID in local state variable
  //	msgSendMyIP.uid = (uint32_t)  DBGMCU->IDCODE;
  //	 = UID64_BASE;
//  	stm32UID(msgSendMyIP.uid);
  /* USER CODE END DEVICECONFIG */
}
 80142ec:	bf00      	nop
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	0801430d 	.word	0x0801430d
 80142f8:	080171a0 	.word	0x080171a0
 80142fc:	20000164 	.word	0x20000164
 8014300:	20000174 	.word	0x20000174
 8014304:	20005138 	.word	0x20005138
 8014308:	08016ec8 	.word	0x08016ec8

0801430c <APP_THREAD_StateNotif>:
 *         aContext: Context
 *
 * @retval None
 */
static void APP_THREAD_StateNotif(uint32_t NotifFlags, void *pContext)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN APP_THREAD_STATENOTIF */

  /* USER CODE END APP_THREAD_STATENOTIF */

  if ((NotifFlags & (uint32_t)OT_CHANGED_THREAD_ROLE) == (uint32_t)OT_CHANGED_THREAD_ROLE)
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f003 0304 	and.w	r3, r3, #4
 801431c:	2b00      	cmp	r3, #0
 801431e:	d013      	beq.n	8014348 <APP_THREAD_StateNotif+0x3c>
  {
    switch (otThreadGetDeviceRole(NULL))
 8014320:	2000      	movs	r0, #0
 8014322:	f7fb fc25 	bl	800fb70 <otThreadGetDeviceRole>
 8014326:	4603      	mov	r3, r0
 8014328:	2b04      	cmp	r3, #4
 801432a:	d80f      	bhi.n	801434c <APP_THREAD_StateNotif+0x40>
 801432c:	a201      	add	r2, pc, #4	; (adr r2, 8014334 <APP_THREAD_StateNotif+0x28>)
 801432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014332:	bf00      	nop
 8014334:	0801434d 	.word	0x0801434d
 8014338:	0801434d 	.word	0x0801434d
 801433c:	0801434d 	.word	0x0801434d
 8014340:	0801434d 	.word	0x0801434d
 8014344:	0801434d 	.word	0x0801434d
      /* USER CODE BEGIN DEFAULT */

      /* USER CODE END DEFAULT */
      break;
    }
  }
 8014348:	bf00      	nop
 801434a:	e000      	b.n	801434e <APP_THREAD_StateNotif+0x42>
      break;
 801434c:	bf00      	nop
}
 801434e:	bf00      	nop
 8014350:	3708      	adds	r7, #8
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
 8014356:	bf00      	nop

08014358 <APP_THREAD_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_THREAD_TraceError(const char * pMess, uint32_t ErrCode)
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */

  /* USER CODE END TRACE_ERROR */
}
 8014362:	bf00      	nop
 8014364:	370c      	adds	r7, #12
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr
	...

08014370 <APP_THREAD_CheckWirelessFirmwareInfo>:
 *        and display associated informations
 * @param  None
 * @retval None
 */
static void APP_THREAD_CheckWirelessFirmwareInfo(void)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b088      	sub	sp, #32
 8014374:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8014376:	1d3b      	adds	r3, r7, #4
 8014378:	617b      	str	r3, [r7, #20]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 801437a:	6978      	ldr	r0, [r7, #20]
 801437c:	f7f9 fea6 	bl	800e0cc <SHCI_GetWirelessFwInfo>
 8014380:	4603      	mov	r3, r0
 8014382:	2b00      	cmp	r3, #0
 8014384:	d004      	beq.n	8014390 <APP_THREAD_CheckWirelessFirmwareInfo+0x20>
  {
    APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8014386:	2101      	movs	r1, #1
 8014388:	2007      	movs	r0, #7
 801438a:	f7ff fe91 	bl	80140b0 <APP_THREAD_Error>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
      break;
    }
    APP_DBG("**********************************************************");
  }
}
 801438e:	e03d      	b.n	801440c <APP_THREAD_CheckWirelessFirmwareInfo+0x9c>
    APP_DBG("**********************************************************");
 8014390:	4a20      	ldr	r2, [pc, #128]	; (8014414 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014392:	2101      	movs	r1, #1
 8014394:	2000      	movs	r0, #0
 8014396:	f7ef fe77 	bl	8004088 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 801439a:	4a1f      	ldr	r2, [pc, #124]	; (8014418 <APP_THREAD_CheckWirelessFirmwareInfo+0xa8>)
 801439c:	2101      	movs	r1, #1
 801439e:	2000      	movs	r0, #0
 80143a0:	f7ef fe72 	bl	8004088 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	4619      	mov	r1, r3
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	785b      	ldrb	r3, [r3, #1]
 80143ae:	461a      	mov	r2, r3
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	789b      	ldrb	r3, [r3, #2]
 80143b4:	9301      	str	r3, [sp, #4]
 80143b6:	9200      	str	r2, [sp, #0]
 80143b8:	460b      	mov	r3, r1
 80143ba:	4a18      	ldr	r2, [pc, #96]	; (801441c <APP_THREAD_CheckWirelessFirmwareInfo+0xac>)
 80143bc:	2101      	movs	r1, #1
 80143be:	2000      	movs	r0, #0
 80143c0:	f7ef fe62 	bl	8004088 <logApplication>
    switch(p_wireless_info->StackType)
 80143c4:	697b      	ldr	r3, [r7, #20]
 80143c6:	7a5b      	ldrb	r3, [r3, #9]
 80143c8:	2b11      	cmp	r3, #17
 80143ca:	d009      	beq.n	80143e0 <APP_THREAD_CheckWirelessFirmwareInfo+0x70>
 80143cc:	2b50      	cmp	r3, #80	; 0x50
 80143ce:	d00d      	beq.n	80143ec <APP_THREAD_CheckWirelessFirmwareInfo+0x7c>
 80143d0:	2b10      	cmp	r3, #16
 80143d2:	d111      	bne.n	80143f8 <APP_THREAD_CheckWirelessFirmwareInfo+0x88>
      APP_DBG("FW Type : Thread FTD");
 80143d4:	4a12      	ldr	r2, [pc, #72]	; (8014420 <APP_THREAD_CheckWirelessFirmwareInfo+0xb0>)
 80143d6:	2101      	movs	r1, #1
 80143d8:	2000      	movs	r0, #0
 80143da:	f7ef fe55 	bl	8004088 <logApplication>
      break;
 80143de:	e010      	b.n	8014402 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Thread MTD");
 80143e0:	4a10      	ldr	r2, [pc, #64]	; (8014424 <APP_THREAD_CheckWirelessFirmwareInfo+0xb4>)
 80143e2:	2101      	movs	r1, #1
 80143e4:	2000      	movs	r0, #0
 80143e6:	f7ef fe4f 	bl	8004088 <logApplication>
      break;
 80143ea:	e00a      	b.n	8014402 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_DBG("FW Type : Static Concurrent Mode BLE/Thread");
 80143ec:	4a0e      	ldr	r2, [pc, #56]	; (8014428 <APP_THREAD_CheckWirelessFirmwareInfo+0xb8>)
 80143ee:	2101      	movs	r1, #1
 80143f0:	2000      	movs	r0, #0
 80143f2:	f7ef fe49 	bl	8004088 <logApplication>
      break;
 80143f6:	e004      	b.n	8014402 <APP_THREAD_CheckWirelessFirmwareInfo+0x92>
      APP_THREAD_Error((uint32_t)ERR_THREAD_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80143f8:	2101      	movs	r1, #1
 80143fa:	2007      	movs	r0, #7
 80143fc:	f7ff fe58 	bl	80140b0 <APP_THREAD_Error>
      break;
 8014400:	bf00      	nop
    APP_DBG("**********************************************************");
 8014402:	4a04      	ldr	r2, [pc, #16]	; (8014414 <APP_THREAD_CheckWirelessFirmwareInfo+0xa4>)
 8014404:	2101      	movs	r1, #1
 8014406:	2000      	movs	r0, #0
 8014408:	f7ef fe3e 	bl	8004088 <logApplication>
}
 801440c:	bf00      	nop
 801440e:	3718      	adds	r7, #24
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	08016ed0 	.word	0x08016ed0
 8014418:	08016f0c 	.word	0x08016f0c
 801441c:	08016f28 	.word	0x08016f28
 8014420:	08016f40 	.word	0x08016f40
 8014424:	08016f58 	.word	0x08016f58
 8014428:	08016f70 	.word	0x08016f70

0801442c <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void APP_THREAD_FreeRTOSProcessMsgM0ToM4Task(void *argument)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */

    /* USER END END APP_THREAD_FREERTOS_PROCESS_MSG_M0_TO_M4_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014434:	f04f 32ff 	mov.w	r2, #4294967295
 8014438:	2101      	movs	r1, #1
 801443a:	2001      	movs	r0, #1
 801443c:	f7fb fe18 	bl	8010070 <osThreadFlagsWait>
    APP_THREAD_ProcessMsgM0ToM4();
 8014440:	f000 fb30 	bl	8014aa4 <APP_THREAD_ProcessMsgM0ToM4>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 8014444:	e7f6      	b.n	8014434 <APP_THREAD_FreeRTOSProcessMsgM0ToM4Task+0x8>

08014446 <APP_THREAD_FreeRTOSSendCLIToM0Task>:
  }
}

#if (CFG_FULL_LOW_POWER == 0)
static void APP_THREAD_FreeRTOSSendCLIToM0Task(void *argument)
{
 8014446:	b580      	push	{r7, lr}
 8014448:	b082      	sub	sp, #8
 801444a:	af00      	add	r7, sp, #0
 801444c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */

    /* USER END END APP_THREAD_FREERTOS_SEND_CLI_TO_M0_1 */
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801444e:	f04f 32ff 	mov.w	r2, #4294967295
 8014452:	2101      	movs	r1, #1
 8014454:	2001      	movs	r0, #1
 8014456:	f7fb fe0b 	bl	8010070 <osThreadFlagsWait>
    Send_CLI_To_M0();
 801445a:	f000 faa5 	bl	80149a8 <Send_CLI_To_M0>
    osThreadFlagsWait(1,osFlagsWaitAll,osWaitForever);
 801445e:	e7f6      	b.n	801444e <APP_THREAD_FreeRTOSSendCLIToM0Task+0x8>

08014460 <APP_THREAD_CoapNodeSpotRequestHandler>:
//}

static void APP_THREAD_CoapNodeSpotRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 8014460:	b580      	push	{r7, lr}
 8014462:	b08a      	sub	sp, #40	; 0x28
 8014464:	af00      	add	r7, sp, #0
 8014466:	60f8      	str	r0, [r7, #12]
 8014468:	60b9      	str	r1, [r7, #8]
 801446a:	607a      	str	r2, [r7, #4]
 801446c:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif
		struct MeasMsg receivedMeasMsg;
		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedMeasMsg, sizeof(receivedMeasMsg))
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f7fa ffc9 	bl	800f406 <otMessageGetOffset>
 8014474:	4603      	mov	r3, r0
 8014476:	4619      	mov	r1, r3
 8014478:	f107 0214 	add.w	r2, r7, #20
 801447c:	2314      	movs	r3, #20
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f7fb f826 	bl	800f4d0 <otMessageRead>
 8014484:	4603      	mov	r3, r0
 8014486:	2b14      	cmp	r3, #20
 8014488:	d121      	bne.n	80144ce <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
				== sizeof(receivedMeasMsg)) {


			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 801448a:	68b8      	ldr	r0, [r7, #8]
 801448c:	f7fa fbf4 	bl	800ec78 <otCoapHeaderGetCode>
 8014490:	4603      	mov	r3, r0
 8014492:	2b03      	cmp	r3, #3
 8014494:	d111      	bne.n	80144ba <APP_THREAD_CoapNodeSpotRequestHandler+0x5a>
			{
//				measMsgReceivedFromNode(&receivedMeasMsg);
				toggleLed(1,1,1);
 8014496:	2201      	movs	r2, #1
 8014498:	2101      	movs	r1, #1
 801449a:	2001      	movs	r0, #1
 801449c:	f7ee fdfc 	bl	8003098 <toggleLed>
				osMessageQueuePut (msgQueueHandle, &receivedMeasMsg, NULL, 0);
 80144a0:	4b0d      	ldr	r3, [pc, #52]	; (80144d8 <APP_THREAD_CoapNodeSpotRequestHandler+0x78>)
 80144a2:	6818      	ldr	r0, [r3, #0]
 80144a4:	f107 0114 	add.w	r1, r7, #20
 80144a8:	2300      	movs	r3, #0
 80144aa:	2200      	movs	r2, #0
 80144ac:	f7fc f9cc 	bl	8010848 <osMessageQueuePut>
				toggleLed(0,0,1);
 80144b0:	2201      	movs	r2, #1
 80144b2:	2100      	movs	r1, #0
 80144b4:	2000      	movs	r0, #0
 80144b6:	f7ee fdef 	bl	8003098 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 80144ba:	68b8      	ldr	r0, [r7, #8]
 80144bc:	f7fa fbae 	bl	800ec1c <otCoapHeaderGetType>
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d103      	bne.n	80144ce <APP_THREAD_CoapNodeSpotRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 80144c6:	6839      	ldr	r1, [r7, #0]
 80144c8:	68b8      	ldr	r0, [r7, #8]
 80144ca:	f000 f845 	bl	8014558 <APP_THREAD_CoapSendDataResponse>
			}

		}
}
 80144ce:	bf00      	nop
 80144d0:	3728      	adds	r7, #40	; 0x28
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop
 80144d8:	2000032c 	.word	0x2000032c

080144dc <APP_THREAD_CoapNodeCalRequestHandler>:

struct CalMsg receivedCalMsg;
static void APP_THREAD_CoapNodeCalRequestHandler(void                * pContext,
													otCoapHeader        * pHeader,
													otMessage           * pMessage,
													const otMessageInfo * pMessageInfo) {
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
 80144e8:	603b      	str	r3, [r7, #0]
#ifdef DONGLE_CODE
		BSP_LED_Toggle(LED_RED);
#endif

		if (otMessageRead(pMessage, otMessageGetOffset(pMessage), &receivedCalMsg, sizeof(receivedCalMsg))
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7fa ff8b 	bl	800f406 <otMessageGetOffset>
 80144f0:	4603      	mov	r3, r0
 80144f2:	4619      	mov	r1, r3
 80144f4:	230c      	movs	r3, #12
 80144f6:	4a17      	ldr	r2, [pc, #92]	; (8014554 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7fa ffe9 	bl	800f4d0 <otMessageRead>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b0c      	cmp	r3, #12
 8014502:	d122      	bne.n	801454a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
				== sizeof(receivedCalMsg)) {

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_PUT)
 8014504:	68b8      	ldr	r0, [r7, #8]
 8014506:	f7fa fbb7 	bl	800ec78 <otCoapHeaderGetCode>
 801450a:	4603      	mov	r3, r0
 801450c:	2b03      	cmp	r3, #3
 801450e:	d107      	bne.n	8014520 <APP_THREAD_CoapNodeCalRequestHandler+0x44>
			{
				if(receivedCalMsg.cal_fcn == CALIBRATION_START_COMMAND){
 8014510:	4b10      	ldr	r3, [pc, #64]	; (8014554 <APP_THREAD_CoapNodeCalRequestHandler+0x78>)
 8014512:	789b      	ldrb	r3, [r3, #2]
 8014514:	2b01      	cmp	r3, #1
					// TODO: start calibration

				}else if(receivedCalMsg.cal_fcn == CALIBRATION_STOP_COMMAND){
					// TODO: stop calibration
				}
				toggleLed(0,0,1);
 8014516:	2201      	movs	r2, #1
 8014518:	2100      	movs	r1, #0
 801451a:	2000      	movs	r0, #0
 801451c:	f7ee fdbc 	bl	8003098 <toggleLed>
			}

			if (otCoapHeaderGetCode(pHeader) == OT_COAP_CODE_GET)
 8014520:	68b8      	ldr	r0, [r7, #8]
 8014522:	f7fa fba9 	bl	800ec78 <otCoapHeaderGetCode>
 8014526:	4603      	mov	r3, r0
 8014528:	2b01      	cmp	r3, #1
 801452a:	d104      	bne.n	8014536 <APP_THREAD_CoapNodeCalRequestHandler+0x5a>
					// 		TODO this can be done in an ACK but doing it now in a separate PUT request to the nodeSpot resource
#ifdef SOLAR_SENSOR_NODE
					sendPowerMeasurement(pMessageInfo->mPeerAddr, receivedCalMsg.angle_1, receivedCalMsg.angle_2);
#endif
				}
				toggleLed(1,0,0);
 801452c:	2200      	movs	r2, #0
 801452e:	2100      	movs	r1, #0
 8014530:	2001      	movs	r0, #1
 8014532:	f7ee fdb1 	bl	8003098 <toggleLed>
			}

			if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE)
 8014536:	68b8      	ldr	r0, [r7, #8]
 8014538:	f7fa fb70 	bl	800ec1c <otCoapHeaderGetType>
 801453c:	4603      	mov	r3, r0
 801453e:	2b00      	cmp	r3, #0
 8014540:	d103      	bne.n	801454a <APP_THREAD_CoapNodeCalRequestHandler+0x6e>
			{
				APP_THREAD_CoapSendDataResponse(pHeader, pMessageInfo);
 8014542:	6839      	ldr	r1, [r7, #0]
 8014544:	68b8      	ldr	r0, [r7, #8]
 8014546:	f000 f807 	bl	8014558 <APP_THREAD_CoapSendDataResponse>
//
//		if (otCoapHeaderGetType(pHeader) == OT_COAP_TYPE_CONFIRMABLE) {
//			APP_THREAD_SendDataResponse(NULL, 0, pHeader, pMessageInfo);
//		}

}
 801454a:	bf00      	nop
 801454c:	3710      	adds	r7, #16
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	20005154 	.word	0x20005154

08014558 <APP_THREAD_CoapSendDataResponse>:
 * @param  pMessageInfo message info pointer
 * @retval None
 */
static void APP_THREAD_CoapSendDataResponse(otCoapHeader    * pRequestHeader,
    const otMessageInfo * pMessageInfo)
{
 8014558:	b590      	push	{r4, r7, lr}
 801455a:	b085      	sub	sp, #20
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
  otError  error = OT_ERROR_NONE;
 8014562:	2300      	movs	r3, #0
 8014564:	73fb      	strb	r3, [r7, #15]

  do{
    APP_DBG(" ********* APP_THREAD_CoapSendDataResponse ********* ");
 8014566:	4a25      	ldr	r2, [pc, #148]	; (80145fc <APP_THREAD_CoapSendDataResponse+0xa4>)
 8014568:	2101      	movs	r1, #1
 801456a:	2000      	movs	r0, #0
 801456c:	f7ef fd8c 	bl	8004088 <logApplication>
    otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_ACKNOWLEDGMENT, OT_COAP_CODE_CHANGED);
 8014570:	2244      	movs	r2, #68	; 0x44
 8014572:	2120      	movs	r1, #32
 8014574:	4822      	ldr	r0, [pc, #136]	; (8014600 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8014576:	f7fa f9f5 	bl	800e964 <otCoapHeaderInit>
    otCoapHeaderSetMessageId(&OT_Header, otCoapHeaderGetMessageId(pRequestHeader));
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7fa fbaa 	bl	800ecd4 <otCoapHeaderGetMessageId>
 8014580:	4603      	mov	r3, r0
 8014582:	4619      	mov	r1, r3
 8014584:	481e      	ldr	r0, [pc, #120]	; (8014600 <APP_THREAD_CoapSendDataResponse+0xa8>)
 8014586:	f7fa fb19 	bl	800ebbc <otCoapHeaderSetMessageId>
    otCoapHeaderSetToken(&OT_Header,
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f7fa fbfe 	bl	800ed8c <otCoapHeaderGetToken>
 8014590:	4604      	mov	r4, r0
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f7fa fbcc 	bl	800ed30 <otCoapHeaderGetTokenLength>
 8014598:	4603      	mov	r3, r0
 801459a:	461a      	mov	r2, r3
 801459c:	4621      	mov	r1, r4
 801459e:	4818      	ldr	r0, [pc, #96]	; (8014600 <APP_THREAD_CoapSendDataResponse+0xa8>)
 80145a0:	f7fa fa15 	bl	800e9ce <otCoapHeaderSetToken>
        otCoapHeaderGetToken(pRequestHeader),
        otCoapHeaderGetTokenLength(pRequestHeader));

    pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80145a4:	4916      	ldr	r1, [pc, #88]	; (8014600 <APP_THREAD_CoapSendDataResponse+0xa8>)
 80145a6:	2000      	movs	r0, #0
 80145a8:	f7fa fc1d 	bl	800ede6 <otCoapNewMessage>
 80145ac:	4602      	mov	r2, r0
 80145ae:	4b15      	ldr	r3, [pc, #84]	; (8014604 <APP_THREAD_CoapSendDataResponse+0xac>)
 80145b0:	601a      	str	r2, [r3, #0]
    if (pOT_Message == NULL)
 80145b2:	4b14      	ldr	r3, [pc, #80]	; (8014604 <APP_THREAD_CoapSendDataResponse+0xac>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d106      	bne.n	80145c8 <APP_THREAD_CoapSendDataResponse+0x70>
    {
      APP_DBG("WARNING : pOT_Message = NULL ! -> exit now");
 80145ba:	4a13      	ldr	r2, [pc, #76]	; (8014608 <APP_THREAD_CoapSendDataResponse+0xb0>)
 80145bc:	2101      	movs	r1, #1
 80145be:	2000      	movs	r0, #0
 80145c0:	f7ef fd62 	bl	8004088 <logApplication>
      break;
 80145c4:	bf00      	nop
    {
      otMessageFree(pOT_Message);
//      APP_THREAD_Error(ERR_THREAD_COAP_DATA_RESPONSE,error);
    }
  }while(false);
}
 80145c6:	e014      	b.n	80145f2 <APP_THREAD_CoapSendDataResponse+0x9a>
    error = otCoapSendResponse(NULL, pOT_Message, pMessageInfo);
 80145c8:	4b0e      	ldr	r3, [pc, #56]	; (8014604 <APP_THREAD_CoapSendDataResponse+0xac>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	683a      	ldr	r2, [r7, #0]
 80145ce:	4619      	mov	r1, r3
 80145d0:	2000      	movs	r0, #0
 80145d2:	f7fa fccf 	bl	800ef74 <otCoapSendResponse>
 80145d6:	4603      	mov	r3, r0
 80145d8:	73fb      	strb	r3, [r7, #15]
    if (error != OT_ERROR_NONE && pOT_Message != NULL)
 80145da:	7bfb      	ldrb	r3, [r7, #15]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d008      	beq.n	80145f2 <APP_THREAD_CoapSendDataResponse+0x9a>
 80145e0:	4b08      	ldr	r3, [pc, #32]	; (8014604 <APP_THREAD_CoapSendDataResponse+0xac>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d004      	beq.n	80145f2 <APP_THREAD_CoapSendDataResponse+0x9a>
      otMessageFree(pOT_Message);
 80145e8:	4b06      	ldr	r3, [pc, #24]	; (8014604 <APP_THREAD_CoapSendDataResponse+0xac>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7fa fedf 	bl	800f3b0 <otMessageFree>
}
 80145f2:	bf00      	nop
 80145f4:	3714      	adds	r7, #20
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd90      	pop	{r4, r7, pc}
 80145fa:	bf00      	nop
 80145fc:	08016f9c 	.word	0x08016f9c
 8014600:	20004bdc 	.word	0x20004bdc
 8014604:	20004b90 	.word	0x20004b90
 8014608:	08016fd4 	.word	0x08016fd4

0801460c <APP_THREAD_SendCoapMsg>:
//		//APP_THREAD_Error(ERR_THREAD_DATA_RESPONSE,error);
//	}
//}

void APP_THREAD_SendCoapMsg(void *message, uint16_t msgSize, otIp6Address *ipv6_addr, const char *resource,
		uint8_t request_ack, otCoapCode coapCode, uint8_t msgID) {
 801460c:	b590      	push	{r4, r7, lr}
 801460e:	b087      	sub	sp, #28
 8014610:	af02      	add	r7, sp, #8
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	607a      	str	r2, [r7, #4]
 8014616:	603b      	str	r3, [r7, #0]
 8014618:	460b      	mov	r3, r1
 801461a:	817b      	strh	r3, [r7, #10]
	/************ SET MESSAGE INFO (WHERE THE PACKET GOES) ************/
	// https://openthread.io/reference/struct/ot-message-info.html#structot_message_info
	do {
		// REMOVE BELOW CALLS (ONLY FOR DEBUGGING)
			  myRloc16 = otThreadGetRloc16(NULL);
 801461c:	2000      	movs	r0, #0
 801461e:	f7fb fad0 	bl	800fbc2 <otThreadGetRloc16>
 8014622:	4603      	mov	r3, r0
 8014624:	461a      	mov	r2, r3
 8014626:	4b7e      	ldr	r3, [pc, #504]	; (8014820 <APP_THREAD_SendCoapMsg+0x214>)
 8014628:	801a      	strh	r2, [r3, #0]
			  unicastAddresses = otIp6GetUnicastAddresses(NULL);
 801462a:	2000      	movs	r0, #0
 801462c:	f7fa fdde 	bl	800f1ec <otIp6GetUnicastAddresses>
 8014630:	4602      	mov	r2, r0
 8014632:	4b7c      	ldr	r3, [pc, #496]	; (8014824 <APP_THREAD_SendCoapMsg+0x218>)
 8014634:	601a      	str	r2, [r3, #0]
			  isEnabledIpv6 = otIp6IsEnabled(NULL);
 8014636:	2000      	movs	r0, #0
 8014638:	f7fa fdab 	bl	800f192 <otIp6IsEnabled>
 801463c:	4603      	mov	r3, r0
 801463e:	461a      	mov	r2, r3
 8014640:	4b79      	ldr	r3, [pc, #484]	; (8014828 <APP_THREAD_SendCoapMsg+0x21c>)
 8014642:	701a      	strb	r2, [r3, #0]
			  multicastAddresses = otIp6GetMulticastAddresses(NULL);
 8014644:	2000      	movs	r0, #0
 8014646:	f7fa fdf9 	bl	800f23c <otIp6GetMulticastAddresses>
 801464a:	4602      	mov	r2, r0
 801464c:	4b77      	ldr	r3, [pc, #476]	; (801482c <APP_THREAD_SendCoapMsg+0x220>)
 801464e:	601a      	str	r2, [r3, #0]
			  meshLocalEID =  otThreadGetMeshLocalEid(NULL);
 8014650:	2000      	movs	r0, #0
 8014652:	f7fb fa0e 	bl	800fa72 <otThreadGetMeshLocalEid>
 8014656:	4602      	mov	r2, r0
 8014658:	4b75      	ldr	r3, [pc, #468]	; (8014830 <APP_THREAD_SendCoapMsg+0x224>)
 801465a:	601a      	str	r2, [r3, #0]
			  linkLocalIPV6 = otThreadGetLinkLocalIp6Address(NULL);
 801465c:	2000      	movs	r0, #0
 801465e:	f7fb fa30 	bl	800fac2 <otThreadGetLinkLocalIp6Address>
 8014662:	4602      	mov	r2, r0
 8014664:	4b73      	ldr	r3, [pc, #460]	; (8014834 <APP_THREAD_SendCoapMsg+0x228>)
 8014666:	601a      	str	r2, [r3, #0]

		// clear info
		memset(&OT_MessageInfo, 0, sizeof(OT_MessageInfo));
 8014668:	222c      	movs	r2, #44	; 0x2c
 801466a:	2100      	movs	r1, #0
 801466c:	4872      	ldr	r0, [pc, #456]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 801466e:	f002 faea 	bl	8016c46 <memset>

		// add destination IPv6 address to header
		// TODO : swap the below statements once ST has their shit fixed

		if(msgSize > 100){ // TODO : semd to borderRouter if the message is a log message (this is a temporary fix)
 8014672:	897b      	ldrh	r3, [r7, #10]
 8014674:	2b64      	cmp	r3, #100	; 0x64
 8014676:	d914      	bls.n	80146a2 <APP_THREAD_SendCoapMsg+0x96>
#ifndef BORDER_ROUTER_NODE_TRANSMITTER
			memcpy(&OT_MessageInfo.mPeerAddr, &borderRouter.ipv6, sizeof(otIp6Address));
 8014678:	4b6f      	ldr	r3, [pc, #444]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 801467a:	4a70      	ldr	r2, [pc, #448]	; (801483c <APP_THREAD_SendCoapMsg+0x230>)
 801467c:	f103 0410 	add.w	r4, r3, #16
 8014680:	4613      	mov	r3, r2
 8014682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 8014688:	2000      	movs	r0, #0
 801468a:	f7fb f9f2 	bl	800fa72 <otThreadGetMeshLocalEid>
 801468e:	4602      	mov	r2, r0
 8014690:	4b69      	ldr	r3, [pc, #420]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 8014692:	461c      	mov	r4, r3
 8014694:	4613      	mov	r3, r2
 8014696:	6818      	ldr	r0, [r3, #0]
 8014698:	6859      	ldr	r1, [r3, #4]
 801469a:	689a      	ldr	r2, [r3, #8]
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146a0:	e015      	b.n	80146ce <APP_THREAD_SendCoapMsg+0xc2>
//			otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);
#else
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
#endif
		}else{
			memcpy(&OT_MessageInfo.mPeerAddr, &multicastAddr, sizeof(otIp6Address));
 80146a2:	4b65      	ldr	r3, [pc, #404]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 80146a4:	4a66      	ldr	r2, [pc, #408]	; (8014840 <APP_THREAD_SendCoapMsg+0x234>)
 80146a6:	f103 0410 	add.w	r4, r3, #16
 80146aa:	4613      	mov	r3, r2
 80146ac:	6818      	ldr	r0, [r3, #0]
 80146ae:	6859      	ldr	r1, [r3, #4]
 80146b0:	689a      	ldr	r2, [r3, #8]
 80146b2:	68db      	ldr	r3, [r3, #12]
 80146b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			memcpy(&OT_MessageInfo.mSockAddr, otThreadGetMeshLocalEid(NULL), sizeof(OT_MessageInfo.mSockAddr));
 80146b6:	2000      	movs	r0, #0
 80146b8:	f7fb f9db 	bl	800fa72 <otThreadGetMeshLocalEid>
 80146bc:	4602      	mov	r2, r0
 80146be:	4b5e      	ldr	r3, [pc, #376]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 80146c0:	461c      	mov	r4, r3
 80146c2:	4613      	mov	r3, r2
 80146c4:	6818      	ldr	r0, [r3, #0]
 80146c6:	6859      	ldr	r1, [r3, #4]
 80146c8:	689a      	ldr	r2, [r3, #8]
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
//			  otIp6AddressFromString("fd11:22::c34c:7994:19f2:4b82", &OT_MessageInfo.mSockAddr);

//			  otIp6AddressFromString("fd11:22::c34c:7994:cccc:4b82", &OT_MessageInfo.mSockAddr);

		// populate message information
		OT_MessageInfo.mInterfaceId = OT_NETIF_INTERFACE_ID_THREAD;
 80146ce:	4b5a      	ldr	r3, [pc, #360]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 80146d0:	2201      	movs	r2, #1
 80146d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		OT_MessageInfo.mPeerPort = OT_DEFAULT_COAP_PORT;
 80146d6:	4b58      	ldr	r3, [pc, #352]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 80146d8:	f241 6233 	movw	r2, #5683	; 0x1633
 80146dc:	845a      	strh	r2, [r3, #34]	; 0x22
		OT_MessageInfo.mHopLimit = 64;
 80146de:	4b56      	ldr	r3, [pc, #344]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 80146e0:	2240      	movs	r2, #64	; 0x40
 80146e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		/************** CREATE NEW MESSAGE ********************ifco*/

		// create header
		if (request_ack && (coapCode == OT_COAP_CODE_PUT))
 80146e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d009      	beq.n	8014702 <APP_THREAD_SendCoapMsg+0xf6>
 80146ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80146f2:	2b03      	cmp	r3, #3
 80146f4:	d105      	bne.n	8014702 <APP_THREAD_SendCoapMsg+0xf6>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_PUT);
 80146f6:	2203      	movs	r2, #3
 80146f8:	2100      	movs	r1, #0
 80146fa:	4852      	ldr	r0, [pc, #328]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 80146fc:	f7fa f932 	bl	800e964 <otCoapHeaderInit>
 8014700:	e04a      	b.n	8014798 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_GET))
 8014702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d009      	beq.n	801471e <APP_THREAD_SendCoapMsg+0x112>
 801470a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801470e:	2b01      	cmp	r3, #1
 8014710:	d105      	bne.n	801471e <APP_THREAD_SendCoapMsg+0x112>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_GET);
 8014712:	2201      	movs	r2, #1
 8014714:	2100      	movs	r1, #0
 8014716:	484b      	ldr	r0, [pc, #300]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 8014718:	f7fa f924 	bl	800e964 <otCoapHeaderInit>
 801471c:	e03c      	b.n	8014798 <APP_THREAD_SendCoapMsg+0x18c>
		else if (request_ack && (coapCode == OT_COAP_CODE_POST))
 801471e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d009      	beq.n	801473a <APP_THREAD_SendCoapMsg+0x12e>
 8014726:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801472a:	2b02      	cmp	r3, #2
 801472c:	d105      	bne.n	801473a <APP_THREAD_SendCoapMsg+0x12e>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_CONFIRMABLE, OT_COAP_CODE_POST);
 801472e:	2202      	movs	r2, #2
 8014730:	2100      	movs	r1, #0
 8014732:	4844      	ldr	r0, [pc, #272]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 8014734:	f7fa f916 	bl	800e964 <otCoapHeaderInit>
 8014738:	e02e      	b.n	8014798 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_PUT))
 801473a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d109      	bne.n	8014756 <APP_THREAD_SendCoapMsg+0x14a>
 8014742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014746:	2b03      	cmp	r3, #3
 8014748:	d105      	bne.n	8014756 <APP_THREAD_SendCoapMsg+0x14a>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_PUT);
 801474a:	2203      	movs	r2, #3
 801474c:	2110      	movs	r1, #16
 801474e:	483d      	ldr	r0, [pc, #244]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 8014750:	f7fa f908 	bl	800e964 <otCoapHeaderInit>
 8014754:	e020      	b.n	8014798 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_GET))
 8014756:	f897 3020 	ldrb.w	r3, [r7, #32]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d109      	bne.n	8014772 <APP_THREAD_SendCoapMsg+0x166>
 801475e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014762:	2b01      	cmp	r3, #1
 8014764:	d105      	bne.n	8014772 <APP_THREAD_SendCoapMsg+0x166>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_GET);
 8014766:	2201      	movs	r2, #1
 8014768:	2110      	movs	r1, #16
 801476a:	4836      	ldr	r0, [pc, #216]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 801476c:	f7fa f8fa 	bl	800e964 <otCoapHeaderInit>
 8014770:	e012      	b.n	8014798 <APP_THREAD_SendCoapMsg+0x18c>
		else if (!request_ack && (coapCode == OT_COAP_CODE_POST))
 8014772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d109      	bne.n	801478e <APP_THREAD_SendCoapMsg+0x182>
 801477a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801477e:	2b02      	cmp	r3, #2
 8014780:	d105      	bne.n	801478e <APP_THREAD_SendCoapMsg+0x182>
			otCoapHeaderInit(&OT_Header, OT_COAP_TYPE_NON_CONFIRMABLE, OT_COAP_CODE_POST);
 8014782:	2202      	movs	r2, #2
 8014784:	2110      	movs	r1, #16
 8014786:	482f      	ldr	r0, [pc, #188]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 8014788:	f7fa f8ec 	bl	800e964 <otCoapHeaderInit>
 801478c:	e004      	b.n	8014798 <APP_THREAD_SendCoapMsg+0x18c>
		else
			return // this return should never happen

//			  otCoapHeaderSetMessageId(&OT_Header, msgID); `//may not need since sendRequest should set to 0
			otCoapHeaderGenerateToken(&OT_Header, 2U); //This function sets the Token length and randomizes its value.
 801478e:	2102      	movs	r1, #2
 8014790:	482c      	ldr	r0, [pc, #176]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 8014792:	f7fa f950 	bl	800ea36 <otCoapHeaderGenerateToken>
 8014796:	e040      	b.n	801481a <APP_THREAD_SendCoapMsg+0x20e>

		// add the name of the resource
		error = otCoapHeaderAppendUriPathOptions(&OT_Header, resource);
 8014798:	6839      	ldr	r1, [r7, #0]
 801479a:	482a      	ldr	r0, [pc, #168]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 801479c:	f7fa f9ae 	bl	800eafc <otCoapHeaderAppendUriPathOptions>
 80147a0:	4603      	mov	r3, r0
 80147a2:	461a      	mov	r2, r3
 80147a4:	4b28      	ldr	r3, [pc, #160]	; (8014848 <APP_THREAD_SendCoapMsg+0x23c>)
 80147a6:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// need this so the coap server doesnt try to parse as 'utf-8' and error out
		otCoapHeaderAppendContentFormatOption(&OT_Header, OT_COAP_OPTION_CONTENT_FORMAT_OCTET_STREAM);
 80147a8:	212a      	movs	r1, #42	; 0x2a
 80147aa:	4826      	ldr	r0, [pc, #152]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 80147ac:	f7fa f973 	bl	800ea96 <otCoapHeaderAppendContentFormatOption>
//			  if (error != OT_ERROR_NONE) while(1);

		// This function adds Payload Marker indicating beginning of the payload to the CoAP header
		if (msgSize > 0) {
 80147b0:	897b      	ldrh	r3, [r7, #10]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d002      	beq.n	80147bc <APP_THREAD_SendCoapMsg+0x1b0>
			otCoapHeaderSetPayloadMarker(&OT_Header); //TODO: if no msg, dont set marker and remove empty message below
 80147b6:	4823      	ldr	r0, [pc, #140]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 80147b8:	f7fa f9d2 	bl	800eb60 <otCoapHeaderSetPayloadMarker>
		}

		// creates new message with headers but with empty payload
		pOT_Message = otCoapNewMessage(NULL, &OT_Header);
 80147bc:	4921      	ldr	r1, [pc, #132]	; (8014844 <APP_THREAD_SendCoapMsg+0x238>)
 80147be:	2000      	movs	r0, #0
 80147c0:	f7fa fb11 	bl	800ede6 <otCoapNewMessage>
 80147c4:	4602      	mov	r2, r0
 80147c6:	4b21      	ldr	r3, [pc, #132]	; (801484c <APP_THREAD_SendCoapMsg+0x240>)
 80147c8:	601a      	str	r2, [r3, #0]
//			while (1);

		// Append bytes to a message (this is where the payload gets added)

		// append message if there was one given
		if (msgSize > 0) {
 80147ca:	897b      	ldrh	r3, [r7, #10]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d00a      	beq.n	80147e6 <APP_THREAD_SendCoapMsg+0x1da>
			error = otMessageAppend(pOT_Message, message, msgSize);
 80147d0:	4b1e      	ldr	r3, [pc, #120]	; (801484c <APP_THREAD_SendCoapMsg+0x240>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	897a      	ldrh	r2, [r7, #10]
 80147d6:	68f9      	ldr	r1, [r7, #12]
 80147d8:	4618      	mov	r0, r3
 80147da:	f7fa fe42 	bl	800f462 <otMessageAppend>
 80147de:	4603      	mov	r3, r0
 80147e0:	461a      	mov	r2, r3
 80147e2:	4b19      	ldr	r3, [pc, #100]	; (8014848 <APP_THREAD_SendCoapMsg+0x23c>)
 80147e4:	701a      	strb	r2, [r3, #0]
//			  if (error != OT_ERROR_NONE) while(1);

		// TODO: the response function should only be used for the border update event (I think only if message is embedded in ACK)?


		error = otCoapSendRequest(NULL,
 80147e6:	4b19      	ldr	r3, [pc, #100]	; (801484c <APP_THREAD_SendCoapMsg+0x240>)
 80147e8:	6819      	ldr	r1, [r3, #0]
 80147ea:	2300      	movs	r3, #0
 80147ec:	9300      	str	r3, [sp, #0]
 80147ee:	2300      	movs	r3, #0
 80147f0:	4a11      	ldr	r2, [pc, #68]	; (8014838 <APP_THREAD_SendCoapMsg+0x22c>)
 80147f2:	2000      	movs	r0, #0
 80147f4:	f7fa fb25 	bl	800ee42 <otCoapSendRequest>
 80147f8:	4603      	mov	r3, r0
 80147fa:	461a      	mov	r2, r3
 80147fc:	4b12      	ldr	r3, [pc, #72]	; (8014848 <APP_THREAD_SendCoapMsg+0x23c>)
 80147fe:	701a      	strb	r2, [r3, #0]
								NULL,
								(void*) NULL);


		// if error: free allocated message buffer if one was allocated
		if (error != OT_ERROR_NONE && pOT_Message != NULL) {
 8014800:	4b11      	ldr	r3, [pc, #68]	; (8014848 <APP_THREAD_SendCoapMsg+0x23c>)
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d008      	beq.n	801481a <APP_THREAD_SendCoapMsg+0x20e>
 8014808:	4b10      	ldr	r3, [pc, #64]	; (801484c <APP_THREAD_SendCoapMsg+0x240>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d004      	beq.n	801481a <APP_THREAD_SendCoapMsg+0x20e>
			otMessageFree(pOT_Message);
 8014810:	4b0e      	ldr	r3, [pc, #56]	; (801484c <APP_THREAD_SendCoapMsg+0x240>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	4618      	mov	r0, r3
 8014816:	f7fa fdcb 	bl	800f3b0 <otMessageFree>
		}

	} while (false);
}
 801481a:	3714      	adds	r7, #20
 801481c:	46bd      	mov	sp, r7
 801481e:	bd90      	pop	{r4, r7, pc}
 8014820:	20005164 	.word	0x20005164
 8014824:	20005168 	.word	0x20005168
 8014828:	20005148 	.word	0x20005148
 801482c:	20005130 	.word	0x20005130
 8014830:	20005160 	.word	0x20005160
 8014834:	20005134 	.word	0x20005134
 8014838:	20004bb0 	.word	0x20004bb0
 801483c:	20004b98 	.word	0x20004b98
 8014840:	20005138 	.word	0x20005138
 8014844:	20004bdc 	.word	0x20004bdc
 8014848:	20004b94 	.word	0x20004b94
 801484c:	20004b90 	.word	0x20004b90

08014850 <APP_THREAD_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_THREAD_RegisterCmdBuffer(TL_CmdPacket_t* p_buffer)
{
 8014850:	b480      	push	{r7}
 8014852:	b083      	sub	sp, #12
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  p_thread_otcmdbuffer = p_buffer;
 8014858:	4a04      	ldr	r2, [pc, #16]	; (801486c <APP_THREAD_RegisterCmdBuffer+0x1c>)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	6013      	str	r3, [r2, #0]
}
 801485e:	bf00      	nop
 8014860:	370c      	adds	r7, #12
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop
 801486c:	20004b78 	.word	0x20004b78

08014870 <THREAD_Get_OTCmdPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdPayloadBuffer(void)
{
 8014870:	b480      	push	{r7}
 8014872:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)p_thread_otcmdbuffer->cmdserial.cmd.payload;
 8014874:	4b03      	ldr	r3, [pc, #12]	; (8014884 <THREAD_Get_OTCmdPayloadBuffer+0x14>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	330c      	adds	r3, #12
}
 801487a:	4618      	mov	r0, r3
 801487c:	46bd      	mov	sp, r7
 801487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014882:	4770      	bx	lr
 8014884:	20004b78 	.word	0x20004b78

08014888 <THREAD_Get_OTCmdRspPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_OTCmdRspPayloadBuffer(void)
{
 8014888:	b480      	push	{r7}
 801488a:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)((TL_EvtPacket_t *)p_thread_otcmdbuffer)->evtserial.evt.payload;
 801488c:	4b03      	ldr	r3, [pc, #12]	; (801489c <THREAD_Get_OTCmdRspPayloadBuffer+0x14>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	330b      	adds	r3, #11
}
 8014892:	4618      	mov	r0, r3
 8014894:	46bd      	mov	sp, r7
 8014896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489a:	4770      	bx	lr
 801489c:	20004b78 	.word	0x20004b78

080148a0 <THREAD_Get_NotificationPayloadBuffer>:

Thread_OT_Cmd_Request_t* THREAD_Get_NotificationPayloadBuffer(void)
{
 80148a0:	b480      	push	{r7}
 80148a2:	af00      	add	r7, sp, #0
  return (Thread_OT_Cmd_Request_t*)(p_thread_notif_M0_to_M4)->evtserial.evt.payload;
 80148a4:	4b03      	ldr	r3, [pc, #12]	; (80148b4 <THREAD_Get_NotificationPayloadBuffer+0x14>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	330b      	adds	r3, #11
}
 80148aa:	4618      	mov	r0, r3
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr
 80148b4:	20004b7c 	.word	0x20004b7c

080148b8 <Ot_Cmd_Transfer>:
 *
 * @param   None
 * @return  None
 */
void Ot_Cmd_Transfer(void)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
  /* OpenThread OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_thread_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80148be:	4b0f      	ldr	r3, [pc, #60]	; (80148fc <Ot_Cmd_Transfer+0x44>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	2200      	movs	r2, #0
 80148c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80148c8:	725a      	strb	r2, [r3, #9]
 80148ca:	2200      	movs	r2, #0
 80148cc:	f042 0202 	orr.w	r2, r2, #2
 80148d0:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  uint32_t l_size = ((Thread_OT_Cmd_Request_t*)(p_thread_otcmdbuffer->cmdserial.cmd.payload))->Size * 4U + 8U;
 80148d2:	4b0a      	ldr	r3, [pc, #40]	; (80148fc <Ot_Cmd_Transfer+0x44>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	330c      	adds	r3, #12
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	3302      	adds	r3, #2
 80148dc:	009b      	lsls	r3, r3, #2
 80148de:	607b      	str	r3, [r7, #4]
  p_thread_otcmdbuffer->cmdserial.cmd.plen = l_size;
 80148e0:	4b06      	ldr	r3, [pc, #24]	; (80148fc <Ot_Cmd_Transfer+0x44>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	687a      	ldr	r2, [r7, #4]
 80148e6:	b2d2      	uxtb	r2, r2
 80148e8:	72da      	strb	r2, [r3, #11]

  TL_OT_SendCmd();
 80148ea:	f7f9 fee5 	bl	800e6b8 <TL_OT_SendCmd>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80148ee:	f000 f829 	bl	8014944 <Wait_Getting_Ack_From_M0>
}
 80148f2:	bf00      	nop
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	20004b78 	.word	0x20004b78

08014900 <TL_OT_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_OT_CmdEvtReceived( TL_EvtPacket_t * Otbuffer )
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8014908:	f000 f82e 	bl	8014968 <Receive_Ack_From_M0>
}
 801490c:	bf00      	nop
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <TL_THREAD_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_NotReceived( TL_EvtPacket_t * Notbuffer )
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  p_thread_notif_M0_to_M4 = Notbuffer;
 801491c:	4a04      	ldr	r2, [pc, #16]	; (8014930 <TL_THREAD_NotReceived+0x1c>)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8014922:	f000 f82d 	bl	8014980 <Receive_Notification_From_M0>
}
 8014926:	bf00      	nop
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	20004b7c 	.word	0x20004b7c

08014934 <Pre_OtCmdProcessing>:
  *         pending before sending a new ot command.
  * @param  None
  * @retval None
  */
void Pre_OtCmdProcessing(void)
{
 8014934:	b480      	push	{r7}
 8014936:	af00      	add	r7, sp, #0

}
 8014938:	bf00      	nop
 801493a:	46bd      	mov	sp, r7
 801493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014940:	4770      	bx	lr
	...

08014944 <Wait_Getting_Ack_From_M0>:
  *
  * @param  None
  * @retval None
  */
static void Wait_Getting_Ack_From_M0(void)
{
 8014944:	b480      	push	{r7}
 8014946:	af00      	add	r7, sp, #0
  while (FlagReceiveAckFromM0 == 0)
 8014948:	bf00      	nop
 801494a:	4b06      	ldr	r3, [pc, #24]	; (8014964 <Wait_Getting_Ack_From_M0+0x20>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d0fb      	beq.n	801494a <Wait_Getting_Ack_From_M0+0x6>
  {
  }
  FlagReceiveAckFromM0 = 0;
 8014952:	4b04      	ldr	r3, [pc, #16]	; (8014964 <Wait_Getting_Ack_From_M0+0x20>)
 8014954:	2200      	movs	r2, #0
 8014956:	601a      	str	r2, [r3, #0]
}
 8014958:	bf00      	nop
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr
 8014962:	bf00      	nop
 8014964:	20004b84 	.word	0x20004b84

08014968 <Receive_Ack_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Ack_From_M0(void)
{
 8014968:	b480      	push	{r7}
 801496a:	af00      	add	r7, sp, #0
  FlagReceiveAckFromM0 = 1;
 801496c:	4b03      	ldr	r3, [pc, #12]	; (801497c <Receive_Ack_From_M0+0x14>)
 801496e:	2201      	movs	r2, #1
 8014970:	601a      	str	r2, [r3, #0]
}
 8014972:	bf00      	nop
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr
 801497c:	20004b84 	.word	0x20004b84

08014980 <Receive_Notification_From_M0>:
  *         This function is called under interrupt.
  * @param  None
  * @retval None
  */
static void Receive_Notification_From_M0(void)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	af00      	add	r7, sp, #0
  CptReceiveMsgFromM0++;
 8014984:	4b06      	ldr	r3, [pc, #24]	; (80149a0 <Receive_Notification_From_M0+0x20>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	3301      	adds	r3, #1
 801498a:	4a05      	ldr	r2, [pc, #20]	; (80149a0 <Receive_Notification_From_M0+0x20>)
 801498c:	6013      	str	r3, [r2, #0]
  osThreadFlagsSet(OsTaskMsgM0ToM4Id,1);
 801498e:	4b05      	ldr	r3, [pc, #20]	; (80149a4 <Receive_Notification_From_M0+0x24>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2101      	movs	r1, #1
 8014994:	4618      	mov	r0, r3
 8014996:	f7fb fb09 	bl	800ffac <osThreadFlagsSet>
}
 801499a:	bf00      	nop
 801499c:	bd80      	pop	{r7, pc}
 801499e:	bf00      	nop
 80149a0:	20004b80 	.word	0x20004b80
 80149a4:	20004b88 	.word	0x20004b88

080149a8 <Send_CLI_To_M0>:
 * @brief Process sends receive CLI command to M0.
 * @param  None
 * @retval None
 */
static void Send_CLI_To_M0(void)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	af00      	add	r7, sp, #0
  memset(ThreadCliCmdBuffer.cmdserial.cmd.payload, 0x0U, 255U);
 80149ac:	22ff      	movs	r2, #255	; 0xff
 80149ae:	2100      	movs	r1, #0
 80149b0:	4812      	ldr	r0, [pc, #72]	; (80149fc <Send_CLI_To_M0+0x54>)
 80149b2:	f002 f948 	bl	8016c46 <memset>
  memcpy(ThreadCliCmdBuffer.cmdserial.cmd.payload, CommandString, indexReceiveChar);
 80149b6:	4b12      	ldr	r3, [pc, #72]	; (8014a00 <Send_CLI_To_M0+0x58>)
 80149b8:	881b      	ldrh	r3, [r3, #0]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	461a      	mov	r2, r3
 80149be:	4911      	ldr	r1, [pc, #68]	; (8014a04 <Send_CLI_To_M0+0x5c>)
 80149c0:	480e      	ldr	r0, [pc, #56]	; (80149fc <Send_CLI_To_M0+0x54>)
 80149c2:	f002 f935 	bl	8016c30 <memcpy>
  ThreadCliCmdBuffer.cmdserial.cmd.plen = indexReceiveChar;
 80149c6:	4b0e      	ldr	r3, [pc, #56]	; (8014a00 <Send_CLI_To_M0+0x58>)
 80149c8:	881b      	ldrh	r3, [r3, #0]
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	b2da      	uxtb	r2, r3
 80149ce:	4b0e      	ldr	r3, [pc, #56]	; (8014a08 <Send_CLI_To_M0+0x60>)
 80149d0:	72da      	strb	r2, [r3, #11]
  ThreadCliCmdBuffer.cmdserial.cmd.cmdcode = 0x0;
 80149d2:	4b0d      	ldr	r3, [pc, #52]	; (8014a08 <Send_CLI_To_M0+0x60>)
 80149d4:	2200      	movs	r2, #0
 80149d6:	725a      	strb	r2, [r3, #9]
 80149d8:	2200      	movs	r2, #0
 80149da:	729a      	strb	r2, [r3, #10]

  /* Clear receive buffer, character counter and command complete */
  CptReceiveCmdFromUser = 0;
 80149dc:	4b0b      	ldr	r3, [pc, #44]	; (8014a0c <Send_CLI_To_M0+0x64>)
 80149de:	2200      	movs	r2, #0
 80149e0:	801a      	strh	r2, [r3, #0]
  indexReceiveChar = 0;
 80149e2:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <Send_CLI_To_M0+0x58>)
 80149e4:	2200      	movs	r2, #0
 80149e6:	801a      	strh	r2, [r3, #0]
  memset(CommandString, 0, C_SIZE_CMD_STRING);
 80149e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80149ec:	2100      	movs	r1, #0
 80149ee:	4805      	ldr	r0, [pc, #20]	; (8014a04 <Send_CLI_To_M0+0x5c>)
 80149f0:	f002 f929 	bl	8016c46 <memset>

  TL_CLI_SendCmd();
 80149f4:	f7f9 fe6e 	bl	800e6d4 <TL_CLI_SendCmd>
}
 80149f8:	bf00      	nop
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	20030a58 	.word	0x20030a58
 8014a00:	20004b74 	.word	0x20004b74
 8014a04:	20004a74 	.word	0x20004a74
 8014a08:	20030a4c 	.word	0x20030a4c
 8014a0c:	20004b76 	.word	0x20004b76

08014a10 <Send_CLI_Ack_For_OT>:
 * @brief Send notification for CLI TL Channel.
 * @param  None
 * @retval None
 */
static void Send_CLI_Ack_For_OT(void)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0

  /* Notify M0 that characters have been sent to UART */
  TL_THREAD_CliSendAck();
 8014a14:	f7f9 fe7a 	bl	800e70c <TL_THREAD_CliSendAck>
}
 8014a18:	bf00      	nop
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <APP_THREAD_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_THREAD_Init_UART_CLI(void)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	af00      	add	r7, sp, #0
#if (CFG_FULL_LOW_POWER == 0)
  OsTaskCliId = osThreadNew(APP_THREAD_FreeRTOSSendCLIToM0Task, NULL,&ThreadCliProcess_attr);
 8014a20:	4a04      	ldr	r2, [pc, #16]	; (8014a34 <APP_THREAD_Init_UART_CLI+0x18>)
 8014a22:	2100      	movs	r1, #0
 8014a24:	4804      	ldr	r0, [pc, #16]	; (8014a38 <APP_THREAD_Init_UART_CLI+0x1c>)
 8014a26:	f7fb fa1b 	bl	800fe60 <osThreadNew>
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	4b03      	ldr	r3, [pc, #12]	; (8014a3c <APP_THREAD_Init_UART_CLI+0x20>)
 8014a2e:	601a      	str	r2, [r3, #0]
#else
#if (CFG_FULL_LOW_POWER == 0)
//  HW_UART_Receive_IT(CFG_CLI_UART, aRxBuffer, 1, RxCpltCallback);
#endif /* (CFG_FULL_LOW_POWER == 0) */
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */
}
 8014a30:	bf00      	nop
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	0801717c 	.word	0x0801717c
 8014a38:	08014447 	.word	0x08014447
 8014a3c:	20004b8c 	.word	0x20004b8c

08014a40 <APP_THREAD_TL_THREAD_INIT>:
 * @brief Perform initialization of TL for THREAD.
 * @param  None
 * @retval None
 */
void APP_THREAD_TL_THREAD_INIT(void)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	af00      	add	r7, sp, #0
  ThreadConfigBuffer.p_ThreadOtCmdRspBuffer = (uint8_t*)&ThreadOtCmdBuffer;
 8014a44:	4b06      	ldr	r3, [pc, #24]	; (8014a60 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a46:	4a07      	ldr	r2, [pc, #28]	; (8014a64 <APP_THREAD_TL_THREAD_INIT+0x24>)
 8014a48:	601a      	str	r2, [r3, #0]
  ThreadConfigBuffer.p_ThreadNotAckBuffer = (uint8_t*)ThreadNotifRspEvtBuffer;
 8014a4a:	4b05      	ldr	r3, [pc, #20]	; (8014a60 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a4c:	4a06      	ldr	r2, [pc, #24]	; (8014a68 <APP_THREAD_TL_THREAD_INIT+0x28>)
 8014a4e:	609a      	str	r2, [r3, #8]
  ThreadConfigBuffer.p_ThreadCliRspBuffer = (uint8_t*)&ThreadCliCmdBuffer;
 8014a50:	4b03      	ldr	r3, [pc, #12]	; (8014a60 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a52:	4a06      	ldr	r2, [pc, #24]	; (8014a6c <APP_THREAD_TL_THREAD_INIT+0x2c>)
 8014a54:	605a      	str	r2, [r3, #4]

  TL_THREAD_Init( &ThreadConfigBuffer );
 8014a56:	4802      	ldr	r0, [pc, #8]	; (8014a60 <APP_THREAD_TL_THREAD_INIT+0x20>)
 8014a58:	f7f9 fe12 	bl	800e680 <TL_THREAD_Init>
}
 8014a5c:	bf00      	nop
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	200300d4 	.word	0x200300d4
 8014a64:	20030834 	.word	0x20030834
 8014a68:	20030940 	.word	0x20030940
 8014a6c:	20030a4c 	.word	0x20030a4c

08014a70 <TL_THREAD_CliNotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_THREAD_CliNotReceived( TL_EvtPacket_t * Notbuffer )
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	60fb      	str	r3, [r7, #12]
  uint8_t l_size = l_CliBuffer->cmdserial.cmd.plen;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	7adb      	ldrb	r3, [r3, #11]
 8014a80:	72fb      	strb	r3, [r7, #11]

  /* WORKAROUND: if string to output is "> " then respond directly to M0 and do not output it */
  if (strcmp((const char *)l_CliBuffer->cmdserial.cmd.payload, "> ") != 0)
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	330c      	adds	r3, #12
 8014a86:	4906      	ldr	r1, [pc, #24]	; (8014aa0 <TL_THREAD_CliNotReceived+0x30>)
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7eb fb79 	bl	8000180 <strcmp>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d101      	bne.n	8014a98 <TL_THREAD_CliNotReceived+0x28>
//    HW_UART_Transmit_IT(CFG_CLI_UART, l_CliBuffer->cmdserial.cmd.payload, l_size, HostTxCb);
#endif /*USAGE_OF_VCP */
  }
  else
  {
    Send_CLI_Ack_For_OT();
 8014a94:	f7ff ffbc 	bl	8014a10 <Send_CLI_Ack_For_OT>
  }
}
 8014a98:	bf00      	nop
 8014a9a:	3710      	adds	r7, #16
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	08017000 	.word	0x08017000

08014aa4 <APP_THREAD_ProcessMsgM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
void APP_THREAD_ProcessMsgM0ToM4(void)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	af00      	add	r7, sp, #0
  if (CptReceiveMsgFromM0 != 0)
 8014aa8:	4b09      	ldr	r3, [pc, #36]	; (8014ad0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d00d      	beq.n	8014acc <APP_THREAD_ProcessMsgM0ToM4+0x28>
  {
    /* If CptReceiveMsgFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveMsgFromM0 > 1U)
 8014ab0:	4b07      	ldr	r3, [pc, #28]	; (8014ad0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b01      	cmp	r3, #1
 8014ab6:	d904      	bls.n	8014ac2 <APP_THREAD_ProcessMsgM0ToM4+0x1e>
    {
      APP_THREAD_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8014ab8:	2100      	movs	r1, #0
 8014aba:	2000      	movs	r0, #0
 8014abc:	f7ff faf8 	bl	80140b0 <APP_THREAD_Error>
 8014ac0:	e001      	b.n	8014ac6 <APP_THREAD_ProcessMsgM0ToM4+0x22>
    }
    else
    {
      OpenThread_CallBack_Processing();
 8014ac2:	f7fa fd41 	bl	800f548 <OpenThread_CallBack_Processing>
    }
    /* Reset counter */
    CptReceiveMsgFromM0 = 0;
 8014ac6:	4b02      	ldr	r3, [pc, #8]	; (8014ad0 <APP_THREAD_ProcessMsgM0ToM4+0x2c>)
 8014ac8:	2200      	movs	r2, #0
 8014aca:	601a      	str	r2, [r3, #0]
  }
}
 8014acc:	bf00      	nop
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	20004b80 	.word	0x20004b80

08014ad4 <LL_PWR_EnableBootC2>:
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8014ad8:	4b05      	ldr	r3, [pc, #20]	; (8014af0 <LL_PWR_EnableBootC2+0x1c>)
 8014ada:	68db      	ldr	r3, [r3, #12]
 8014adc:	4a04      	ldr	r2, [pc, #16]	; (8014af0 <LL_PWR_EnableBootC2+0x1c>)
 8014ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014ae2:	60d3      	str	r3, [r2, #12]
}
 8014ae4:	bf00      	nop
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aec:	4770      	bx	lr
 8014aee:	bf00      	nop
 8014af0:	58000400 	.word	0x58000400

08014af4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014af4:	b480      	push	{r7}
 8014af6:	b083      	sub	sp, #12
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014afc:	4b06      	ldr	r3, [pc, #24]	; (8014b18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014afe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8014b02:	4905      	ldr	r1, [pc, #20]	; (8014b18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	4313      	orrs	r3, r2
 8014b08:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8014b0c:	bf00      	nop
 8014b0e:	370c      	adds	r7, #12
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr
 8014b18:	58000800 	.word	0x58000800

08014b1c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b083      	sub	sp, #12
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014b24:	4b05      	ldr	r3, [pc, #20]	; (8014b3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014b26:	6a1a      	ldr	r2, [r3, #32]
 8014b28:	4904      	ldr	r1, [pc, #16]	; (8014b3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	4313      	orrs	r3, r2
 8014b2e:	620b      	str	r3, [r1, #32]
}
 8014b30:	bf00      	nop
 8014b32:	370c      	adds	r7, #12
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr
 8014b3c:	58000800 	.word	0x58000800

08014b40 <LL_AHB3_GRP1_EnableClock>:
{
 8014b40:	b480      	push	{r7}
 8014b42:	b085      	sub	sp, #20
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	4313      	orrs	r3, r2
 8014b56:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	4013      	ands	r3, r2
 8014b62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014b64:	68fb      	ldr	r3, [r7, #12]
}
 8014b66:	bf00      	nop
 8014b68:	3714      	adds	r7, #20
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr

08014b72 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8014b72:	b480      	push	{r7}
 8014b74:	b085      	sub	sp, #20
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b7e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8014b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	4313      	orrs	r3, r2
 8014b8a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8014b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014b92:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	4013      	ands	r3, r2
 8014b9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
}
 8014b9e:	bf00      	nop
 8014ba0:	3714      	adds	r7, #20
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr

08014baa <LL_C1_IPCC_EnableIT_TXF>:
{
 8014baa:	b480      	push	{r7}
 8014bac:	b083      	sub	sp, #12
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	601a      	str	r2, [r3, #0]
}
 8014bbe:	bf00      	nop
 8014bc0:	370c      	adds	r7, #12
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc8:	4770      	bx	lr

08014bca <LL_C1_IPCC_EnableIT_RXO>:
{
 8014bca:	b480      	push	{r7}
 8014bcc:	b083      	sub	sp, #12
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f043 0201 	orr.w	r2, r3, #1
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	601a      	str	r2, [r3, #0]
}
 8014bde:	bf00      	nop
 8014be0:	370c      	adds	r7, #12
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr

08014bea <LL_C1_IPCC_EnableTransmitChannel>:
{
 8014bea:	b480      	push	{r7}
 8014bec:	b083      	sub	sp, #12
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	6078      	str	r0, [r7, #4]
 8014bf2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	685a      	ldr	r2, [r3, #4]
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	041b      	lsls	r3, r3, #16
 8014bfc:	43db      	mvns	r3, r3
 8014bfe:	401a      	ands	r2, r3
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	605a      	str	r2, [r3, #4]
}
 8014c04:	bf00      	nop
 8014c06:	370c      	adds	r7, #12
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8014c10:	b480      	push	{r7}
 8014c12:	b083      	sub	sp, #12
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	685a      	ldr	r2, [r3, #4]
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	041b      	lsls	r3, r3, #16
 8014c22:	431a      	orrs	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	605a      	str	r2, [r3, #4]
}
 8014c28:	bf00      	nop
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	685a      	ldr	r2, [r3, #4]
 8014c42:	683b      	ldr	r3, [r7, #0]
 8014c44:	43db      	mvns	r3, r3
 8014c46:	401a      	ands	r2, r3
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	605a      	str	r2, [r3, #4]
}
 8014c4c:	bf00      	nop
 8014c4e:	370c      	adds	r7, #12
 8014c50:	46bd      	mov	sp, r7
 8014c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c56:	4770      	bx	lr

08014c58 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b083      	sub	sp, #12
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	685a      	ldr	r2, [r3, #4]
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	431a      	orrs	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	605a      	str	r2, [r3, #4]
}
 8014c6e:	bf00      	nop
 8014c70:	370c      	adds	r7, #12
 8014c72:	46bd      	mov	sp, r7
 8014c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c78:	4770      	bx	lr

08014c7a <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014c7a:	b480      	push	{r7}
 8014c7c:	b083      	sub	sp, #12
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	6078      	str	r0, [r7, #4]
 8014c82:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	683a      	ldr	r2, [r7, #0]
 8014c88:	609a      	str	r2, [r3, #8]
}
 8014c8a:	bf00      	nop
 8014c8c:	370c      	adds	r7, #12
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr

08014c96 <LL_C1_IPCC_SetFlag_CHx>:
{
 8014c96:	b480      	push	{r7}
 8014c98:	b083      	sub	sp, #12
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
 8014c9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	041a      	lsls	r2, r3, #16
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	609a      	str	r2, [r3, #8]
}
 8014ca8:	bf00      	nop
 8014caa:	370c      	adds	r7, #12
 8014cac:	46bd      	mov	sp, r7
 8014cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb2:	4770      	bx	lr

08014cb4 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b083      	sub	sp, #12
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	68da      	ldr	r2, [r3, #12]
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	4013      	ands	r3, r2
 8014cc6:	683a      	ldr	r2, [r7, #0]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d101      	bne.n	8014cd0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014ccc:	2301      	movs	r3, #1
 8014cce:	e000      	b.n	8014cd2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8014cd0:	2300      	movs	r3, #0
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	370c      	adds	r7, #12
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr

08014cde <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014cde:	b480      	push	{r7}
 8014ce0:	b083      	sub	sp, #12
 8014ce2:	af00      	add	r7, sp, #0
 8014ce4:	6078      	str	r0, [r7, #4]
 8014ce6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	69da      	ldr	r2, [r3, #28]
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	4013      	ands	r3, r2
 8014cf0:	683a      	ldr	r2, [r7, #0]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d101      	bne.n	8014cfa <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8014cf6:	2301      	movs	r3, #1
 8014cf8:	e000      	b.n	8014cfc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014cfa:	2300      	movs	r3, #0
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	370c      	adds	r7, #12
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr

08014d08 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014d0c:	2102      	movs	r1, #2
 8014d0e:	482a      	ldr	r0, [pc, #168]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d10:	f7ff ffe5 	bl	8014cde <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d14:	4603      	mov	r3, r0
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d009      	beq.n	8014d2e <HW_IPCC_Rx_Handler+0x26>
 8014d1a:	4b27      	ldr	r3, [pc, #156]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	43db      	mvns	r3, r3
 8014d20:	f003 0302 	and.w	r3, r3, #2
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d002      	beq.n	8014d2e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8014d28:	f000 f90a 	bl	8014f40 <HW_IPCC_SYS_EvtHandler>
 8014d2c:	e041      	b.n	8014db2 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_MAC_802_15_4_NotEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL ))
 8014d2e:	2104      	movs	r1, #4
 8014d30:	4821      	ldr	r0, [pc, #132]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d32:	f7ff ffd4 	bl	8014cde <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d36:	4603      	mov	r3, r0
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d009      	beq.n	8014d50 <HW_IPCC_Rx_Handler+0x48>
 8014d3c:	4b1e      	ldr	r3, [pc, #120]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d3e:	685b      	ldr	r3, [r3, #4]
 8014d40:	43db      	mvns	r3, r3
 8014d42:	f003 0304 	and.w	r3, r3, #4
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d002      	beq.n	8014d50 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_THREAD_NotEvtHandler();
 8014d4a:	f000 f953 	bl	8014ff4 <HW_IPCC_THREAD_NotEvtHandler>
 8014d4e:	e030      	b.n	8014db2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
 8014d50:	2110      	movs	r1, #16
 8014d52:	4819      	ldr	r0, [pc, #100]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d54:	f7ff ffc3 	bl	8014cde <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d009      	beq.n	8014d72 <HW_IPCC_Rx_Handler+0x6a>
 8014d5e:	4b16      	ldr	r3, [pc, #88]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d60:	685b      	ldr	r3, [r3, #4]
 8014d62:	43db      	mvns	r3, r3
 8014d64:	f003 0310 	and.w	r3, r3, #16
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d002      	beq.n	8014d72 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
 8014d6c:	f000 f94e 	bl	801500c <HW_IPCC_THREAD_CliNotEvtHandler>
 8014d70:	e01f      	b.n	8014db2 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014d72:	2101      	movs	r1, #1
 8014d74:	4810      	ldr	r0, [pc, #64]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d76:	f7ff ffb2 	bl	8014cde <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d008      	beq.n	8014d92 <HW_IPCC_Rx_Handler+0x8a>
 8014d80:	4b0d      	ldr	r3, [pc, #52]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	f003 0301 	and.w	r3, r3, #1
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d102      	bne.n	8014d92 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8014d8c:	f000 f89c 	bl	8014ec8 <HW_IPCC_BLE_EvtHandler>
 8014d90:	e00f      	b.n	8014db2 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014d92:	2108      	movs	r1, #8
 8014d94:	4808      	ldr	r0, [pc, #32]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014d96:	f7ff ffa2 	bl	8014cde <LL_C2_IPCC_IsActiveFlag_CHx>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d009      	beq.n	8014db4 <HW_IPCC_Rx_Handler+0xac>
 8014da0:	4b05      	ldr	r3, [pc, #20]	; (8014db8 <HW_IPCC_Rx_Handler+0xb0>)
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	43db      	mvns	r3, r3
 8014da6:	f003 0308 	and.w	r3, r3, #8
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d002      	beq.n	8014db4 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014dae:	f000 f979 	bl	80150a4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014db2:	bf00      	nop
 8014db4:	bf00      	nop
}
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	58000c00 	.word	0x58000c00

08014dbc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014dc0:	2102      	movs	r1, #2
 8014dc2:	482b      	ldr	r0, [pc, #172]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014dc4:	f7ff ff76 	bl	8014cb4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d109      	bne.n	8014de2 <HW_IPCC_Tx_Handler+0x26>
 8014dce:	4b28      	ldr	r3, [pc, #160]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	43db      	mvns	r3, r3
 8014dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d002      	beq.n	8014de2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014ddc:	f000 f8a4 	bl	8014f28 <HW_IPCC_SYS_CmdEvtHandler>
 8014de0:	e042      	b.n	8014e68 <HW_IPCC_Tx_Handler+0xac>
  {
    HW_IPCC_MAC_802_15_4_CmdEvtHandler();
  }
#endif /* MAC_802_15_4_WB */
#ifdef THREAD_WB
  else if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
 8014de2:	2104      	movs	r1, #4
 8014de4:	4822      	ldr	r0, [pc, #136]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014de6:	f7ff ff65 	bl	8014cb4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014dea:	4603      	mov	r3, r0
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d109      	bne.n	8014e04 <HW_IPCC_Tx_Handler+0x48>
 8014df0:	4b1f      	ldr	r3, [pc, #124]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	43db      	mvns	r3, r3
 8014df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d002      	beq.n	8014e04 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_OT_CmdEvtHandler();
 8014dfe:	f000 f8ed 	bl	8014fdc <HW_IPCC_OT_CmdEvtHandler>
 8014e02:	e031      	b.n	8014e68 <HW_IPCC_Tx_Handler+0xac>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014e04:	2102      	movs	r1, #2
 8014e06:	481a      	ldr	r0, [pc, #104]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014e08:	f7ff ff54 	bl	8014cb4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d109      	bne.n	8014e26 <HW_IPCC_Tx_Handler+0x6a>
 8014e12:	4b17      	ldr	r3, [pc, #92]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	43db      	mvns	r3, r3
 8014e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d002      	beq.n	8014e26 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8014e20:	f000 f882 	bl	8014f28 <HW_IPCC_SYS_CmdEvtHandler>
 8014e24:	e020      	b.n	8014e68 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014e26:	2108      	movs	r1, #8
 8014e28:	4811      	ldr	r0, [pc, #68]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014e2a:	f7ff ff43 	bl	8014cb4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d109      	bne.n	8014e48 <HW_IPCC_Tx_Handler+0x8c>
 8014e34:	4b0e      	ldr	r3, [pc, #56]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	43db      	mvns	r3, r3
 8014e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d002      	beq.n	8014e48 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_MM_FreeBufHandler();
 8014e42:	f000 f911 	bl	8015068 <HW_IPCC_MM_FreeBufHandler>
 8014e46:	e00f      	b.n	8014e68 <HW_IPCC_Tx_Handler+0xac>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014e48:	2120      	movs	r1, #32
 8014e4a:	4809      	ldr	r0, [pc, #36]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014e4c:	f7ff ff32 	bl	8014cb4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8014e50:	4603      	mov	r3, r0
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d109      	bne.n	8014e6a <HW_IPCC_Tx_Handler+0xae>
 8014e56:	4b06      	ldr	r3, [pc, #24]	; (8014e70 <HW_IPCC_Tx_Handler+0xb4>)
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	43db      	mvns	r3, r3
 8014e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d002      	beq.n	8014e6a <HW_IPCC_Tx_Handler+0xae>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8014e64:	f000 f83c 	bl	8014ee0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8014e68:	bf00      	nop
 8014e6a:	bf00      	nop
}
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	58000c00 	.word	0x58000c00

08014e74 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8014e78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014e7c:	f7ff fe79 	bl	8014b72 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8014e80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014e84:	f7ff fe36 	bl	8014af4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8014e88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014e8c:	f7ff fe46 	bl	8014b1c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8014e90:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8014e92:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8014e94:	f7ff fe1e 	bl	8014ad4 <LL_PWR_EnableBootC2>

  return;
 8014e98:	bf00      	nop
}
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8014ea0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014ea4:	f7ff fe4c 	bl	8014b40 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8014ea8:	4806      	ldr	r0, [pc, #24]	; (8014ec4 <HW_IPCC_Init+0x28>)
 8014eaa:	f7ff fe8e 	bl	8014bca <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8014eae:	4805      	ldr	r0, [pc, #20]	; (8014ec4 <HW_IPCC_Init+0x28>)
 8014eb0:	f7ff fe7b 	bl	8014baa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8014eb4:	202c      	movs	r0, #44	; 0x2c
 8014eb6:	f7f0 ff2e 	bl	8005d16 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8014eba:	202d      	movs	r0, #45	; 0x2d
 8014ebc:	f7f0 ff2b 	bl	8005d16 <HAL_NVIC_EnableIRQ>

  return;
 8014ec0:	bf00      	nop
}
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	58000c00 	.word	0x58000c00

08014ec8 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8014ecc:	f7f9 fb20 	bl	800e510 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014ed0:	2101      	movs	r1, #1
 8014ed2:	4802      	ldr	r0, [pc, #8]	; (8014edc <HW_IPCC_BLE_EvtHandler+0x14>)
 8014ed4:	f7ff fed1 	bl	8014c7a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014ed8:	bf00      	nop
}
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	58000c00 	.word	0x58000c00

08014ee0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014ee4:	2120      	movs	r1, #32
 8014ee6:	4803      	ldr	r0, [pc, #12]	; (8014ef4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014ee8:	f7ff fe92 	bl	8014c10 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8014eec:	f7f9 fb40 	bl	800e570 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014ef0:	bf00      	nop
}
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	58000c00 	.word	0x58000c00

08014ef8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014efc:	2102      	movs	r1, #2
 8014efe:	4802      	ldr	r0, [pc, #8]	; (8014f08 <HW_IPCC_SYS_Init+0x10>)
 8014f00:	f7ff fe98 	bl	8014c34 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014f04:	bf00      	nop
}
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	58000c00 	.word	0x58000c00

08014f0c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014f10:	2102      	movs	r1, #2
 8014f12:	4804      	ldr	r0, [pc, #16]	; (8014f24 <HW_IPCC_SYS_SendCmd+0x18>)
 8014f14:	f7ff febf 	bl	8014c96 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014f18:	2102      	movs	r1, #2
 8014f1a:	4802      	ldr	r0, [pc, #8]	; (8014f24 <HW_IPCC_SYS_SendCmd+0x18>)
 8014f1c:	f7ff fe65 	bl	8014bea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014f20:	bf00      	nop
}
 8014f22:	bd80      	pop	{r7, pc}
 8014f24:	58000c00 	.word	0x58000c00

08014f28 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014f2c:	2102      	movs	r1, #2
 8014f2e:	4803      	ldr	r0, [pc, #12]	; (8014f3c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014f30:	f7ff fe6e 	bl	8014c10 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014f34:	f7f9 fb6c 	bl	800e610 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014f38:	bf00      	nop
}
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	58000c00 	.word	0x58000c00

08014f40 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014f44:	f7f9 fb7a 	bl	800e63c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014f48:	2102      	movs	r1, #2
 8014f4a:	4802      	ldr	r0, [pc, #8]	; (8014f54 <HW_IPCC_SYS_EvtHandler+0x14>)
 8014f4c:	f7ff fe95 	bl	8014c7a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014f50:	bf00      	nop
}
 8014f52:	bd80      	pop	{r7, pc}
 8014f54:	58000c00 	.word	0x58000c00

08014f58 <HW_IPCC_THREAD_Init>:
/******************************************************************************
 * THREAD
 ******************************************************************************/
#ifdef THREAD_WB
void HW_IPCC_THREAD_Init( void )
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014f5c:	2104      	movs	r1, #4
 8014f5e:	4804      	ldr	r0, [pc, #16]	; (8014f70 <HW_IPCC_THREAD_Init+0x18>)
 8014f60:	f7ff fe68 	bl	8014c34 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014f64:	2110      	movs	r1, #16
 8014f66:	4802      	ldr	r0, [pc, #8]	; (8014f70 <HW_IPCC_THREAD_Init+0x18>)
 8014f68:	f7ff fe64 	bl	8014c34 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014f6c:	bf00      	nop
}
 8014f6e:	bd80      	pop	{r7, pc}
 8014f70:	58000c00 	.word	0x58000c00

08014f74 <HW_IPCC_OT_SendCmd>:

void HW_IPCC_OT_SendCmd( void )
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8014f78:	2104      	movs	r1, #4
 8014f7a:	4804      	ldr	r0, [pc, #16]	; (8014f8c <HW_IPCC_OT_SendCmd+0x18>)
 8014f7c:	f7ff fe8b 	bl	8014c96 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8014f80:	2104      	movs	r1, #4
 8014f82:	4802      	ldr	r0, [pc, #8]	; (8014f8c <HW_IPCC_OT_SendCmd+0x18>)
 8014f84:	f7ff fe31 	bl	8014bea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014f88:	bf00      	nop
}
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	58000c00 	.word	0x58000c00

08014f90 <HW_IPCC_CLI_SendCmd>:

void HW_IPCC_CLI_SendCmd( void )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_CMD_CHANNEL );
 8014f94:	2110      	movs	r1, #16
 8014f96:	4802      	ldr	r0, [pc, #8]	; (8014fa0 <HW_IPCC_CLI_SendCmd+0x10>)
 8014f98:	f7ff fe7d 	bl	8014c96 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014f9c:	bf00      	nop
}
 8014f9e:	bd80      	pop	{r7, pc}
 8014fa0:	58000c00 	.word	0x58000c00

08014fa4 <HW_IPCC_THREAD_SendAck>:

void HW_IPCC_THREAD_SendAck( void )
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014fa8:	2104      	movs	r1, #4
 8014faa:	4804      	ldr	r0, [pc, #16]	; (8014fbc <HW_IPCC_THREAD_SendAck+0x18>)
 8014fac:	f7ff fe65 	bl	8014c7a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014fb0:	2104      	movs	r1, #4
 8014fb2:	4802      	ldr	r0, [pc, #8]	; (8014fbc <HW_IPCC_THREAD_SendAck+0x18>)
 8014fb4:	f7ff fe3e 	bl	8014c34 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014fb8:	bf00      	nop
}
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	58000c00 	.word	0x58000c00

08014fc0 <HW_IPCC_THREAD_CliSendAck>:

void HW_IPCC_THREAD_CliSendAck( void )
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014fc4:	2110      	movs	r1, #16
 8014fc6:	4804      	ldr	r0, [pc, #16]	; (8014fd8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8014fc8:	f7ff fe57 	bl	8014c7a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8014fcc:	2110      	movs	r1, #16
 8014fce:	4802      	ldr	r0, [pc, #8]	; (8014fd8 <HW_IPCC_THREAD_CliSendAck+0x18>)
 8014fd0:	f7ff fe30 	bl	8014c34 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014fd4:	bf00      	nop
}
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	58000c00 	.word	0x58000c00

08014fdc <HW_IPCC_OT_CmdEvtHandler>:

static void HW_IPCC_OT_CmdEvtHandler( void )
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL );
 8014fe0:	2104      	movs	r1, #4
 8014fe2:	4803      	ldr	r0, [pc, #12]	; (8014ff0 <HW_IPCC_OT_CmdEvtHandler+0x14>)
 8014fe4:	f7ff fe14 	bl	8014c10 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_OT_CmdEvtNot();
 8014fe8:	f7f9 fb9e 	bl	800e728 <HW_IPCC_OT_CmdEvtNot>

  return;
 8014fec:	bf00      	nop
}
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	58000c00 	.word	0x58000c00

08014ff4 <HW_IPCC_THREAD_NotEvtHandler>:

static void HW_IPCC_THREAD_NotEvtHandler( void )
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_NOTIFICATION_ACK_CHANNEL );
 8014ff8:	2104      	movs	r1, #4
 8014ffa:	4803      	ldr	r0, [pc, #12]	; (8015008 <HW_IPCC_THREAD_NotEvtHandler+0x14>)
 8014ffc:	f7ff fe2c 	bl	8014c58 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_EvtNot();
 8015000:	f7f9 fb9e 	bl	800e740 <HW_IPCC_THREAD_EvtNot>

  return;
 8015004:	bf00      	nop
}
 8015006:	bd80      	pop	{r7, pc}
 8015008:	58000c00 	.word	0x58000c00

0801500c <HW_IPCC_THREAD_CliNotEvtHandler>:

static void HW_IPCC_THREAD_CliNotEvtHandler( void )
{
 801500c:	b580      	push	{r7, lr}
 801500e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL );
 8015010:	2110      	movs	r1, #16
 8015012:	4803      	ldr	r0, [pc, #12]	; (8015020 <HW_IPCC_THREAD_CliNotEvtHandler+0x14>)
 8015014:	f7ff fe20 	bl	8014c58 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_THREAD_CliEvtNot();
 8015018:	f7f9 fb9e 	bl	800e758 <HW_IPCC_THREAD_CliEvtNot>

  return;
 801501c:	bf00      	nop
}
 801501e:	bd80      	pop	{r7, pc}
 8015020:	58000c00 	.word	0x58000c00

08015024 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b082      	sub	sp, #8
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801502c:	2108      	movs	r1, #8
 801502e:	480c      	ldr	r0, [pc, #48]	; (8015060 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015030:	f7ff fe40 	bl	8014cb4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8015034:	4603      	mov	r3, r0
 8015036:	2b00      	cmp	r3, #0
 8015038:	d007      	beq.n	801504a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801503a:	4a0a      	ldr	r2, [pc, #40]	; (8015064 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015040:	2108      	movs	r1, #8
 8015042:	4807      	ldr	r0, [pc, #28]	; (8015060 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015044:	f7ff fdd1 	bl	8014bea <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8015048:	e006      	b.n	8015058 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801504e:	2108      	movs	r1, #8
 8015050:	4803      	ldr	r0, [pc, #12]	; (8015060 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015052:	f7ff fe20 	bl	8014c96 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8015056:	bf00      	nop
}
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	58000c00 	.word	0x58000c00
 8015064:	20004c6c 	.word	0x20004c6c

08015068 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801506c:	2108      	movs	r1, #8
 801506e:	4806      	ldr	r0, [pc, #24]	; (8015088 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015070:	f7ff fdce 	bl	8014c10 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8015074:	4b05      	ldr	r3, [pc, #20]	; (801508c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801507a:	2108      	movs	r1, #8
 801507c:	4802      	ldr	r0, [pc, #8]	; (8015088 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801507e:	f7ff fe0a 	bl	8014c96 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015082:	bf00      	nop
}
 8015084:	bd80      	pop	{r7, pc}
 8015086:	bf00      	nop
 8015088:	58000c00 	.word	0x58000c00
 801508c:	20004c6c 	.word	0x20004c6c

08015090 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015094:	2108      	movs	r1, #8
 8015096:	4802      	ldr	r0, [pc, #8]	; (80150a0 <HW_IPCC_TRACES_Init+0x10>)
 8015098:	f7ff fdcc 	bl	8014c34 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801509c:	bf00      	nop
}
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	58000c00 	.word	0x58000c00

080150a4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80150a8:	f7f9 fbe8 	bl	800e87c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80150ac:	2108      	movs	r1, #8
 80150ae:	4802      	ldr	r0, [pc, #8]	; (80150b8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80150b0:	f7ff fde3 	bl	8014c7a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80150b4:	bf00      	nop
}
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	58000c00 	.word	0x58000c00

080150bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80150c0:	2200      	movs	r2, #0
 80150c2:	4912      	ldr	r1, [pc, #72]	; (801510c <MX_USB_Device_Init+0x50>)
 80150c4:	4812      	ldr	r0, [pc, #72]	; (8015110 <MX_USB_Device_Init+0x54>)
 80150c6:	f7f7 feed 	bl	800cea4 <USBD_Init>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d001      	beq.n	80150d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80150d0:	f7ee fbbe 	bl	8003850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80150d4:	490f      	ldr	r1, [pc, #60]	; (8015114 <MX_USB_Device_Init+0x58>)
 80150d6:	480e      	ldr	r0, [pc, #56]	; (8015110 <MX_USB_Device_Init+0x54>)
 80150d8:	f7f7 ff14 	bl	800cf04 <USBD_RegisterClass>
 80150dc:	4603      	mov	r3, r0
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d001      	beq.n	80150e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80150e2:	f7ee fbb5 	bl	8003850 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80150e6:	490c      	ldr	r1, [pc, #48]	; (8015118 <MX_USB_Device_Init+0x5c>)
 80150e8:	4809      	ldr	r0, [pc, #36]	; (8015110 <MX_USB_Device_Init+0x54>)
 80150ea:	f7f7 fe35 	bl	800cd58 <USBD_CDC_RegisterInterface>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80150f4:	f7ee fbac 	bl	8003850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80150f8:	4805      	ldr	r0, [pc, #20]	; (8015110 <MX_USB_Device_Init+0x54>)
 80150fa:	f7f7 ff2a 	bl	800cf52 <USBD_Start>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d001      	beq.n	8015108 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015104:	f7ee fba4 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015108:	bf00      	nop
 801510a:	bd80      	pop	{r7, pc}
 801510c:	20000198 	.word	0x20000198
 8015110:	2000516c 	.word	0x2000516c
 8015114:	2000005c 	.word	0x2000005c
 8015118:	20000184 	.word	0x20000184

0801511c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015120:	2200      	movs	r2, #0
 8015122:	4905      	ldr	r1, [pc, #20]	; (8015138 <CDC_Init_FS+0x1c>)
 8015124:	4805      	ldr	r0, [pc, #20]	; (801513c <CDC_Init_FS+0x20>)
 8015126:	f7f7 fe2c 	bl	800cd82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801512a:	4905      	ldr	r1, [pc, #20]	; (8015140 <CDC_Init_FS+0x24>)
 801512c:	4803      	ldr	r0, [pc, #12]	; (801513c <CDC_Init_FS+0x20>)
 801512e:	f7f7 fe46 	bl	800cdbe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015132:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015134:	4618      	mov	r0, r3
 8015136:	bd80      	pop	{r7, pc}
 8015138:	20005c3c 	.word	0x20005c3c
 801513c:	2000516c 	.word	0x2000516c
 8015140:	2000543c 	.word	0x2000543c

08015144 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015144:	b480      	push	{r7}
 8015146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015148:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801514a:	4618      	mov	r0, r3
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr

08015154 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	6039      	str	r1, [r7, #0]
 801515e:	71fb      	strb	r3, [r7, #7]
 8015160:	4613      	mov	r3, r2
 8015162:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015164:	79fb      	ldrb	r3, [r7, #7]
 8015166:	2b23      	cmp	r3, #35	; 0x23
 8015168:	d84a      	bhi.n	8015200 <CDC_Control_FS+0xac>
 801516a:	a201      	add	r2, pc, #4	; (adr r2, 8015170 <CDC_Control_FS+0x1c>)
 801516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015170:	08015201 	.word	0x08015201
 8015174:	08015201 	.word	0x08015201
 8015178:	08015201 	.word	0x08015201
 801517c:	08015201 	.word	0x08015201
 8015180:	08015201 	.word	0x08015201
 8015184:	08015201 	.word	0x08015201
 8015188:	08015201 	.word	0x08015201
 801518c:	08015201 	.word	0x08015201
 8015190:	08015201 	.word	0x08015201
 8015194:	08015201 	.word	0x08015201
 8015198:	08015201 	.word	0x08015201
 801519c:	08015201 	.word	0x08015201
 80151a0:	08015201 	.word	0x08015201
 80151a4:	08015201 	.word	0x08015201
 80151a8:	08015201 	.word	0x08015201
 80151ac:	08015201 	.word	0x08015201
 80151b0:	08015201 	.word	0x08015201
 80151b4:	08015201 	.word	0x08015201
 80151b8:	08015201 	.word	0x08015201
 80151bc:	08015201 	.word	0x08015201
 80151c0:	08015201 	.word	0x08015201
 80151c4:	08015201 	.word	0x08015201
 80151c8:	08015201 	.word	0x08015201
 80151cc:	08015201 	.word	0x08015201
 80151d0:	08015201 	.word	0x08015201
 80151d4:	08015201 	.word	0x08015201
 80151d8:	08015201 	.word	0x08015201
 80151dc:	08015201 	.word	0x08015201
 80151e0:	08015201 	.word	0x08015201
 80151e4:	08015201 	.word	0x08015201
 80151e8:	08015201 	.word	0x08015201
 80151ec:	08015201 	.word	0x08015201
 80151f0:	08015201 	.word	0x08015201
 80151f4:	08015201 	.word	0x08015201
 80151f8:	08015201 	.word	0x08015201
 80151fc:	08015201 	.word	0x08015201
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015200:	bf00      	nop
  }

  return (USBD_OK);
 8015202:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015204:	4618      	mov	r0, r3
 8015206:	370c      	adds	r7, #12
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801521a:	6879      	ldr	r1, [r7, #4]
 801521c:	4805      	ldr	r0, [pc, #20]	; (8015234 <CDC_Receive_FS+0x24>)
 801521e:	f7f7 fdce 	bl	800cdbe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015222:	4804      	ldr	r0, [pc, #16]	; (8015234 <CDC_Receive_FS+0x24>)
 8015224:	f7f7 fe14 	bl	800ce50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015228:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801522a:	4618      	mov	r0, r3
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	2000516c 	.word	0x2000516c

08015238 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	460b      	mov	r3, r1
 8015242:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015244:	2300      	movs	r3, #0
 8015246:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015248:	4b0d      	ldr	r3, [pc, #52]	; (8015280 <CDC_Transmit_FS+0x48>)
 801524a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801524e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015256:	2b00      	cmp	r3, #0
 8015258:	d001      	beq.n	801525e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801525a:	2301      	movs	r3, #1
 801525c:	e00b      	b.n	8015276 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801525e:	887b      	ldrh	r3, [r7, #2]
 8015260:	461a      	mov	r2, r3
 8015262:	6879      	ldr	r1, [r7, #4]
 8015264:	4806      	ldr	r0, [pc, #24]	; (8015280 <CDC_Transmit_FS+0x48>)
 8015266:	f7f7 fd8c 	bl	800cd82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801526a:	4805      	ldr	r0, [pc, #20]	; (8015280 <CDC_Transmit_FS+0x48>)
 801526c:	f7f7 fdc0 	bl	800cdf0 <USBD_CDC_TransmitPacket>
 8015270:	4603      	mov	r3, r0
 8015272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015274:	7bfb      	ldrb	r3, [r7, #15]
}
 8015276:	4618      	mov	r0, r3
 8015278:	3710      	adds	r7, #16
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}
 801527e:	bf00      	nop
 8015280:	2000516c 	.word	0x2000516c

08015284 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015284:	b480      	push	{r7}
 8015286:	b087      	sub	sp, #28
 8015288:	af00      	add	r7, sp, #0
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
 801528e:	4613      	mov	r3, r2
 8015290:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015292:	2300      	movs	r3, #0
 8015294:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015296:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801529a:	4618      	mov	r0, r3
 801529c:	371c      	adds	r7, #28
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr
	...

080152a8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	6039      	str	r1, [r7, #0]
 80152b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	2212      	movs	r2, #18
 80152b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80152ba:	4b03      	ldr	r3, [pc, #12]	; (80152c8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80152bc:	4618      	mov	r0, r3
 80152be:	370c      	adds	r7, #12
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr
 80152c8:	200001b4 	.word	0x200001b4

080152cc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152cc:	b480      	push	{r7}
 80152ce:	b083      	sub	sp, #12
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	4603      	mov	r3, r0
 80152d4:	6039      	str	r1, [r7, #0]
 80152d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	2204      	movs	r2, #4
 80152dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80152de:	4b03      	ldr	r3, [pc, #12]	; (80152ec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80152e0:	4618      	mov	r0, r3
 80152e2:	370c      	adds	r7, #12
 80152e4:	46bd      	mov	sp, r7
 80152e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ea:	4770      	bx	lr
 80152ec:	200001c8 	.word	0x200001c8

080152f0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	4603      	mov	r3, r0
 80152f8:	6039      	str	r1, [r7, #0]
 80152fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152fc:	79fb      	ldrb	r3, [r7, #7]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d105      	bne.n	801530e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015302:	683a      	ldr	r2, [r7, #0]
 8015304:	4907      	ldr	r1, [pc, #28]	; (8015324 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015306:	4808      	ldr	r0, [pc, #32]	; (8015328 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015308:	f7f8 fdd4 	bl	800deb4 <USBD_GetString>
 801530c:	e004      	b.n	8015318 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801530e:	683a      	ldr	r2, [r7, #0]
 8015310:	4904      	ldr	r1, [pc, #16]	; (8015324 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015312:	4805      	ldr	r0, [pc, #20]	; (8015328 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015314:	f7f8 fdce 	bl	800deb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015318:	4b02      	ldr	r3, [pc, #8]	; (8015324 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801531a:	4618      	mov	r0, r3
 801531c:	3708      	adds	r7, #8
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	2000643c 	.word	0x2000643c
 8015328:	08017004 	.word	0x08017004

0801532c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	4603      	mov	r3, r0
 8015334:	6039      	str	r1, [r7, #0]
 8015336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015338:	683a      	ldr	r2, [r7, #0]
 801533a:	4904      	ldr	r1, [pc, #16]	; (801534c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801533c:	4804      	ldr	r0, [pc, #16]	; (8015350 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801533e:	f7f8 fdb9 	bl	800deb4 <USBD_GetString>
  return USBD_StrDesc;
 8015342:	4b02      	ldr	r3, [pc, #8]	; (801534c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015344:	4618      	mov	r0, r3
 8015346:	3708      	adds	r7, #8
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	2000643c 	.word	0x2000643c
 8015350:	08017010 	.word	0x08017010

08015354 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	4603      	mov	r3, r0
 801535c:	6039      	str	r1, [r7, #0]
 801535e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	221a      	movs	r2, #26
 8015364:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015366:	f000 f843 	bl	80153f0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801536a:	4b02      	ldr	r3, [pc, #8]	; (8015374 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801536c:	4618      	mov	r0, r3
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	200001cc 	.word	0x200001cc

08015378 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	4603      	mov	r3, r0
 8015380:	6039      	str	r1, [r7, #0]
 8015382:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015384:	79fb      	ldrb	r3, [r7, #7]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d105      	bne.n	8015396 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801538a:	683a      	ldr	r2, [r7, #0]
 801538c:	4907      	ldr	r1, [pc, #28]	; (80153ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 801538e:	4808      	ldr	r0, [pc, #32]	; (80153b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015390:	f7f8 fd90 	bl	800deb4 <USBD_GetString>
 8015394:	e004      	b.n	80153a0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015396:	683a      	ldr	r2, [r7, #0]
 8015398:	4904      	ldr	r1, [pc, #16]	; (80153ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 801539a:	4805      	ldr	r0, [pc, #20]	; (80153b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801539c:	f7f8 fd8a 	bl	800deb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153a0:	4b02      	ldr	r3, [pc, #8]	; (80153ac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3708      	adds	r7, #8
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
 80153aa:	bf00      	nop
 80153ac:	2000643c 	.word	0x2000643c
 80153b0:	08017018 	.word	0x08017018

080153b4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	4603      	mov	r3, r0
 80153bc:	6039      	str	r1, [r7, #0]
 80153be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153c0:	79fb      	ldrb	r3, [r7, #7]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d105      	bne.n	80153d2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80153c6:	683a      	ldr	r2, [r7, #0]
 80153c8:	4907      	ldr	r1, [pc, #28]	; (80153e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80153ca:	4808      	ldr	r0, [pc, #32]	; (80153ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80153cc:	f7f8 fd72 	bl	800deb4 <USBD_GetString>
 80153d0:	e004      	b.n	80153dc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80153d2:	683a      	ldr	r2, [r7, #0]
 80153d4:	4904      	ldr	r1, [pc, #16]	; (80153e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80153d6:	4805      	ldr	r0, [pc, #20]	; (80153ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80153d8:	f7f8 fd6c 	bl	800deb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153dc:	4b02      	ldr	r3, [pc, #8]	; (80153e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3708      	adds	r7, #8
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}
 80153e6:	bf00      	nop
 80153e8:	2000643c 	.word	0x2000643c
 80153ec:	08017024 	.word	0x08017024

080153f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153f6:	4b0f      	ldr	r3, [pc, #60]	; (8015434 <Get_SerialNum+0x44>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80153fc:	4b0e      	ldr	r3, [pc, #56]	; (8015438 <Get_SerialNum+0x48>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015402:	4b0e      	ldr	r3, [pc, #56]	; (801543c <Get_SerialNum+0x4c>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015408:	68fa      	ldr	r2, [r7, #12]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	4413      	add	r3, r2
 801540e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d009      	beq.n	801542a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015416:	2208      	movs	r2, #8
 8015418:	4909      	ldr	r1, [pc, #36]	; (8015440 <Get_SerialNum+0x50>)
 801541a:	68f8      	ldr	r0, [r7, #12]
 801541c:	f000 f814 	bl	8015448 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015420:	2204      	movs	r2, #4
 8015422:	4908      	ldr	r1, [pc, #32]	; (8015444 <Get_SerialNum+0x54>)
 8015424:	68b8      	ldr	r0, [r7, #8]
 8015426:	f000 f80f 	bl	8015448 <IntToUnicode>
  }
}
 801542a:	bf00      	nop
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	1fff7590 	.word	0x1fff7590
 8015438:	1fff7594 	.word	0x1fff7594
 801543c:	1fff7598 	.word	0x1fff7598
 8015440:	200001ce 	.word	0x200001ce
 8015444:	200001de 	.word	0x200001de

08015448 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015448:	b480      	push	{r7}
 801544a:	b087      	sub	sp, #28
 801544c:	af00      	add	r7, sp, #0
 801544e:	60f8      	str	r0, [r7, #12]
 8015450:	60b9      	str	r1, [r7, #8]
 8015452:	4613      	mov	r3, r2
 8015454:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015456:	2300      	movs	r3, #0
 8015458:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801545a:	2300      	movs	r3, #0
 801545c:	75fb      	strb	r3, [r7, #23]
 801545e:	e027      	b.n	80154b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	0f1b      	lsrs	r3, r3, #28
 8015464:	2b09      	cmp	r3, #9
 8015466:	d80b      	bhi.n	8015480 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	0f1b      	lsrs	r3, r3, #28
 801546c:	b2da      	uxtb	r2, r3
 801546e:	7dfb      	ldrb	r3, [r7, #23]
 8015470:	005b      	lsls	r3, r3, #1
 8015472:	4619      	mov	r1, r3
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	440b      	add	r3, r1
 8015478:	3230      	adds	r2, #48	; 0x30
 801547a:	b2d2      	uxtb	r2, r2
 801547c:	701a      	strb	r2, [r3, #0]
 801547e:	e00a      	b.n	8015496 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	0f1b      	lsrs	r3, r3, #28
 8015484:	b2da      	uxtb	r2, r3
 8015486:	7dfb      	ldrb	r3, [r7, #23]
 8015488:	005b      	lsls	r3, r3, #1
 801548a:	4619      	mov	r1, r3
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	440b      	add	r3, r1
 8015490:	3237      	adds	r2, #55	; 0x37
 8015492:	b2d2      	uxtb	r2, r2
 8015494:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	011b      	lsls	r3, r3, #4
 801549a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801549c:	7dfb      	ldrb	r3, [r7, #23]
 801549e:	005b      	lsls	r3, r3, #1
 80154a0:	3301      	adds	r3, #1
 80154a2:	68ba      	ldr	r2, [r7, #8]
 80154a4:	4413      	add	r3, r2
 80154a6:	2200      	movs	r2, #0
 80154a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80154aa:	7dfb      	ldrb	r3, [r7, #23]
 80154ac:	3301      	adds	r3, #1
 80154ae:	75fb      	strb	r3, [r7, #23]
 80154b0:	7dfa      	ldrb	r2, [r7, #23]
 80154b2:	79fb      	ldrb	r3, [r7, #7]
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d3d3      	bcc.n	8015460 <IntToUnicode+0x18>
  }
}
 80154b8:	bf00      	nop
 80154ba:	371c      	adds	r7, #28
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr

080154c4 <LL_AHB2_GRP1_EnableClock>:
{
 80154c4:	b480      	push	{r7}
 80154c6:	b085      	sub	sp, #20
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80154cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	4313      	orrs	r3, r2
 80154da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80154dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	4013      	ands	r3, r2
 80154e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80154e8:	68fb      	ldr	r3, [r7, #12]
}
 80154ea:	bf00      	nop
 80154ec:	3714      	adds	r7, #20
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <LL_APB1_GRP1_EnableClock>:
{
 80154f6:	b480      	push	{r7}
 80154f8:	b085      	sub	sp, #20
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80154fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015502:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	4313      	orrs	r3, r2
 801550c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801550e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8015512:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	4013      	ands	r3, r2
 8015518:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801551a:	68fb      	ldr	r3, [r7, #12]
}
 801551c:	bf00      	nop
 801551e:	3714      	adds	r7, #20
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b088      	sub	sp, #32
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015530:	f107 030c 	add.w	r3, r7, #12
 8015534:	2200      	movs	r2, #0
 8015536:	601a      	str	r2, [r3, #0]
 8015538:	605a      	str	r2, [r3, #4]
 801553a:	609a      	str	r2, [r3, #8]
 801553c:	60da      	str	r2, [r3, #12]
 801553e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	4a13      	ldr	r2, [pc, #76]	; (8015594 <HAL_PCD_MspInit+0x6c>)
 8015546:	4293      	cmp	r3, r2
 8015548:	d120      	bne.n	801558c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801554a:	2001      	movs	r0, #1
 801554c:	f7ff ffba 	bl	80154c4 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015550:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015554:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015556:	2302      	movs	r3, #2
 8015558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801555a:	2300      	movs	r3, #0
 801555c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801555e:	2303      	movs	r3, #3
 8015560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8015562:	230a      	movs	r3, #10
 8015564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015566:	f107 030c 	add.w	r3, r7, #12
 801556a:	4619      	mov	r1, r3
 801556c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8015570:	f7f0 fe82 	bl	8006278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015574:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015578:	f7ff ffbd 	bl	80154f6 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801557c:	2200      	movs	r2, #0
 801557e:	2105      	movs	r1, #5
 8015580:	2014      	movs	r0, #20
 8015582:	f7f0 fbae 	bl	8005ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015586:	2014      	movs	r0, #20
 8015588:	f7f0 fbc5 	bl	8005d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801558c:	bf00      	nop
 801558e:	3720      	adds	r7, #32
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	40006800 	.word	0x40006800

08015598 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80155ac:	4619      	mov	r1, r3
 80155ae:	4610      	mov	r0, r2
 80155b0:	f7f7 fd1a 	bl	800cfe8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80155b4:	bf00      	nop
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	460b      	mov	r3, r1
 80155c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80155ce:	78fb      	ldrb	r3, [r7, #3]
 80155d0:	687a      	ldr	r2, [r7, #4]
 80155d2:	015b      	lsls	r3, r3, #5
 80155d4:	4413      	add	r3, r2
 80155d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	78fb      	ldrb	r3, [r7, #3]
 80155de:	4619      	mov	r1, r3
 80155e0:	f7f7 fd55 	bl	800d08e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80155e4:	bf00      	nop
 80155e6:	3708      	adds	r7, #8
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}

080155ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b082      	sub	sp, #8
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
 80155f4:	460b      	mov	r3, r1
 80155f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80155fe:	78fb      	ldrb	r3, [r7, #3]
 8015600:	687a      	ldr	r2, [r7, #4]
 8015602:	015b      	lsls	r3, r3, #5
 8015604:	4413      	add	r3, r2
 8015606:	333c      	adds	r3, #60	; 0x3c
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	78fb      	ldrb	r3, [r7, #3]
 801560c:	4619      	mov	r1, r3
 801560e:	f7f7 fda1 	bl	800d154 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015612:	bf00      	nop
 8015614:	3708      	adds	r7, #8
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801561a:	b580      	push	{r7, lr}
 801561c:	b082      	sub	sp, #8
 801561e:	af00      	add	r7, sp, #0
 8015620:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015628:	4618      	mov	r0, r3
 801562a:	f7f7 feb5 	bl	800d398 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801562e:	bf00      	nop
 8015630:	3708      	adds	r7, #8
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b084      	sub	sp, #16
 801563a:	af00      	add	r7, sp, #0
 801563c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801563e:	2301      	movs	r3, #1
 8015640:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	689b      	ldr	r3, [r3, #8]
 8015646:	2b02      	cmp	r3, #2
 8015648:	d001      	beq.n	801564e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801564a:	f7ee f901 	bl	8003850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015654:	7bfa      	ldrb	r2, [r7, #15]
 8015656:	4611      	mov	r1, r2
 8015658:	4618      	mov	r0, r3
 801565a:	f7f7 fe5f 	bl	800d31c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015664:	4618      	mov	r0, r3
 8015666:	f7f7 fe0b 	bl	800d280 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801566a:	bf00      	nop
 801566c:	3710      	adds	r7, #16
 801566e:	46bd      	mov	sp, r7
 8015670:	bd80      	pop	{r7, pc}
	...

08015674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8015682:	4618      	mov	r0, r3
 8015684:	f7f7 fe5a 	bl	800d33c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	699b      	ldr	r3, [r3, #24]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d005      	beq.n	801569c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015690:	4b04      	ldr	r3, [pc, #16]	; (80156a4 <HAL_PCD_SuspendCallback+0x30>)
 8015692:	691b      	ldr	r3, [r3, #16]
 8015694:	4a03      	ldr	r2, [pc, #12]	; (80156a4 <HAL_PCD_SuspendCallback+0x30>)
 8015696:	f043 0306 	orr.w	r3, r3, #6
 801569a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801569c:	bf00      	nop
 801569e:	3708      	adds	r7, #8
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	e000ed00 	.word	0xe000ed00

080156a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	699b      	ldr	r3, [r3, #24]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d007      	beq.n	80156c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156b8:	4b08      	ldr	r3, [pc, #32]	; (80156dc <HAL_PCD_ResumeCallback+0x34>)
 80156ba:	691b      	ldr	r3, [r3, #16]
 80156bc:	4a07      	ldr	r2, [pc, #28]	; (80156dc <HAL_PCD_ResumeCallback+0x34>)
 80156be:	f023 0306 	bic.w	r3, r3, #6
 80156c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80156c4:	f000 f9be 	bl	8015a44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7f7 fe4a 	bl	800d368 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80156d4:	bf00      	nop
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}
 80156dc:	e000ed00 	.word	0xe000ed00

080156e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b082      	sub	sp, #8
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80156e8:	4a2c      	ldr	r2, [pc, #176]	; (801579c <USBD_LL_Init+0xbc>)
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	4a2a      	ldr	r2, [pc, #168]	; (801579c <USBD_LL_Init+0xbc>)
 80156f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80156f8:	f7f2 fc3e 	bl	8007f78 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80156fc:	4b27      	ldr	r3, [pc, #156]	; (801579c <USBD_LL_Init+0xbc>)
 80156fe:	4a28      	ldr	r2, [pc, #160]	; (80157a0 <USBD_LL_Init+0xc0>)
 8015700:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015702:	4b26      	ldr	r3, [pc, #152]	; (801579c <USBD_LL_Init+0xbc>)
 8015704:	2208      	movs	r2, #8
 8015706:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015708:	4b24      	ldr	r3, [pc, #144]	; (801579c <USBD_LL_Init+0xbc>)
 801570a:	2202      	movs	r2, #2
 801570c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801570e:	4b23      	ldr	r3, [pc, #140]	; (801579c <USBD_LL_Init+0xbc>)
 8015710:	2202      	movs	r2, #2
 8015712:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015714:	4b21      	ldr	r3, [pc, #132]	; (801579c <USBD_LL_Init+0xbc>)
 8015716:	2200      	movs	r2, #0
 8015718:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801571a:	4b20      	ldr	r3, [pc, #128]	; (801579c <USBD_LL_Init+0xbc>)
 801571c:	2200      	movs	r2, #0
 801571e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015720:	4b1e      	ldr	r3, [pc, #120]	; (801579c <USBD_LL_Init+0xbc>)
 8015722:	2200      	movs	r2, #0
 8015724:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015726:	4b1d      	ldr	r3, [pc, #116]	; (801579c <USBD_LL_Init+0xbc>)
 8015728:	2200      	movs	r2, #0
 801572a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801572c:	481b      	ldr	r0, [pc, #108]	; (801579c <USBD_LL_Init+0xbc>)
 801572e:	f7f1 fcc0 	bl	80070b2 <HAL_PCD_Init>
 8015732:	4603      	mov	r3, r0
 8015734:	2b00      	cmp	r3, #0
 8015736:	d001      	beq.n	801573c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015738:	f7ee f88a 	bl	8003850 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015742:	2318      	movs	r3, #24
 8015744:	2200      	movs	r2, #0
 8015746:	2100      	movs	r1, #0
 8015748:	f7f2 fb85 	bl	8007e56 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015752:	2358      	movs	r3, #88	; 0x58
 8015754:	2200      	movs	r2, #0
 8015756:	2180      	movs	r1, #128	; 0x80
 8015758:	f7f2 fb7d 	bl	8007e56 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015762:	23c0      	movs	r3, #192	; 0xc0
 8015764:	2200      	movs	r2, #0
 8015766:	2181      	movs	r1, #129	; 0x81
 8015768:	f7f2 fb75 	bl	8007e56 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015772:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015776:	2200      	movs	r2, #0
 8015778:	2101      	movs	r1, #1
 801577a:	f7f2 fb6c 	bl	8007e56 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015788:	2200      	movs	r2, #0
 801578a:	2182      	movs	r1, #130	; 0x82
 801578c:	f7f2 fb63 	bl	8007e56 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015790:	2300      	movs	r3, #0
}
 8015792:	4618      	mov	r0, r3
 8015794:	3708      	adds	r7, #8
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	2000663c 	.word	0x2000663c
 80157a0:	40006800 	.word	0x40006800

080157a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b084      	sub	sp, #16
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157ac:	2300      	movs	r3, #0
 80157ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157b0:	2300      	movs	r3, #0
 80157b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7f1 fd34 	bl	8007228 <HAL_PCD_Start>
 80157c0:	4603      	mov	r3, r0
 80157c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157c4:	7bfb      	ldrb	r3, [r7, #15]
 80157c6:	4618      	mov	r0, r3
 80157c8:	f000 f944 	bl	8015a54 <USBD_Get_USB_Status>
 80157cc:	4603      	mov	r3, r0
 80157ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3710      	adds	r7, #16
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}

080157da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80157da:	b580      	push	{r7, lr}
 80157dc:	b084      	sub	sp, #16
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
 80157e2:	4608      	mov	r0, r1
 80157e4:	4611      	mov	r1, r2
 80157e6:	461a      	mov	r2, r3
 80157e8:	4603      	mov	r3, r0
 80157ea:	70fb      	strb	r3, [r7, #3]
 80157ec:	460b      	mov	r3, r1
 80157ee:	70bb      	strb	r3, [r7, #2]
 80157f0:	4613      	mov	r3, r2
 80157f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157f4:	2300      	movs	r3, #0
 80157f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157f8:	2300      	movs	r3, #0
 80157fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015802:	78bb      	ldrb	r3, [r7, #2]
 8015804:	883a      	ldrh	r2, [r7, #0]
 8015806:	78f9      	ldrb	r1, [r7, #3]
 8015808:	f7f1 fea3 	bl	8007552 <HAL_PCD_EP_Open>
 801580c:	4603      	mov	r3, r0
 801580e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015810:	7bfb      	ldrb	r3, [r7, #15]
 8015812:	4618      	mov	r0, r3
 8015814:	f000 f91e 	bl	8015a54 <USBD_Get_USB_Status>
 8015818:	4603      	mov	r3, r0
 801581a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801581c:	7bbb      	ldrb	r3, [r7, #14]
}
 801581e:	4618      	mov	r0, r3
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015826:	b580      	push	{r7, lr}
 8015828:	b084      	sub	sp, #16
 801582a:	af00      	add	r7, sp, #0
 801582c:	6078      	str	r0, [r7, #4]
 801582e:	460b      	mov	r3, r1
 8015830:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015832:	2300      	movs	r3, #0
 8015834:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015836:	2300      	movs	r3, #0
 8015838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015840:	78fa      	ldrb	r2, [r7, #3]
 8015842:	4611      	mov	r1, r2
 8015844:	4618      	mov	r0, r3
 8015846:	f7f1 fee4 	bl	8007612 <HAL_PCD_EP_Close>
 801584a:	4603      	mov	r3, r0
 801584c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801584e:	7bfb      	ldrb	r3, [r7, #15]
 8015850:	4618      	mov	r0, r3
 8015852:	f000 f8ff 	bl	8015a54 <USBD_Get_USB_Status>
 8015856:	4603      	mov	r3, r0
 8015858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801585a:	7bbb      	ldrb	r3, [r7, #14]
}
 801585c:	4618      	mov	r0, r3
 801585e:	3710      	adds	r7, #16
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b084      	sub	sp, #16
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	460b      	mov	r3, r1
 801586e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015870:	2300      	movs	r3, #0
 8015872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015874:	2300      	movs	r3, #0
 8015876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801587e:	78fa      	ldrb	r2, [r7, #3]
 8015880:	4611      	mov	r1, r2
 8015882:	4618      	mov	r0, r3
 8015884:	f7f1 ff8f 	bl	80077a6 <HAL_PCD_EP_SetStall>
 8015888:	4603      	mov	r3, r0
 801588a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801588c:	7bfb      	ldrb	r3, [r7, #15]
 801588e:	4618      	mov	r0, r3
 8015890:	f000 f8e0 	bl	8015a54 <USBD_Get_USB_Status>
 8015894:	4603      	mov	r3, r0
 8015896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015898:	7bbb      	ldrb	r3, [r7, #14]
}
 801589a:	4618      	mov	r0, r3
 801589c:	3710      	adds	r7, #16
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158a2:	b580      	push	{r7, lr}
 80158a4:	b084      	sub	sp, #16
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]
 80158aa:	460b      	mov	r3, r1
 80158ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158ae:	2300      	movs	r3, #0
 80158b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158b2:	2300      	movs	r3, #0
 80158b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158bc:	78fa      	ldrb	r2, [r7, #3]
 80158be:	4611      	mov	r1, r2
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7f1 ffca 	bl	800785a <HAL_PCD_EP_ClrStall>
 80158c6:	4603      	mov	r3, r0
 80158c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158ca:	7bfb      	ldrb	r3, [r7, #15]
 80158cc:	4618      	mov	r0, r3
 80158ce:	f000 f8c1 	bl	8015a54 <USBD_Get_USB_Status>
 80158d2:	4603      	mov	r3, r0
 80158d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80158d8:	4618      	mov	r0, r3
 80158da:	3710      	adds	r7, #16
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}

080158e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158e0:	b480      	push	{r7}
 80158e2:	b085      	sub	sp, #20
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	460b      	mov	r3, r1
 80158ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80158f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80158f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	da08      	bge.n	801590e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80158fc:	78fb      	ldrb	r3, [r7, #3]
 80158fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015902:	68fa      	ldr	r2, [r7, #12]
 8015904:	015b      	lsls	r3, r3, #5
 8015906:	4413      	add	r3, r2
 8015908:	332a      	adds	r3, #42	; 0x2a
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	e008      	b.n	8015920 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801590e:	78fb      	ldrb	r3, [r7, #3]
 8015910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015914:	68fa      	ldr	r2, [r7, #12]
 8015916:	015b      	lsls	r3, r3, #5
 8015918:	4413      	add	r3, r2
 801591a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 801591e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015920:	4618      	mov	r0, r3
 8015922:	3714      	adds	r7, #20
 8015924:	46bd      	mov	sp, r7
 8015926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592a:	4770      	bx	lr

0801592c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	460b      	mov	r3, r1
 8015936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015938:	2300      	movs	r3, #0
 801593a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801593c:	2300      	movs	r3, #0
 801593e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015946:	78fa      	ldrb	r2, [r7, #3]
 8015948:	4611      	mov	r1, r2
 801594a:	4618      	mov	r0, r3
 801594c:	f7f1 fddc 	bl	8007508 <HAL_PCD_SetAddress>
 8015950:	4603      	mov	r3, r0
 8015952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015954:	7bfb      	ldrb	r3, [r7, #15]
 8015956:	4618      	mov	r0, r3
 8015958:	f000 f87c 	bl	8015a54 <USBD_Get_USB_Status>
 801595c:	4603      	mov	r3, r0
 801595e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015960:	7bbb      	ldrb	r3, [r7, #14]
}
 8015962:	4618      	mov	r0, r3
 8015964:	3710      	adds	r7, #16
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801596a:	b580      	push	{r7, lr}
 801596c:	b086      	sub	sp, #24
 801596e:	af00      	add	r7, sp, #0
 8015970:	60f8      	str	r0, [r7, #12]
 8015972:	607a      	str	r2, [r7, #4]
 8015974:	603b      	str	r3, [r7, #0]
 8015976:	460b      	mov	r3, r1
 8015978:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801597a:	2300      	movs	r3, #0
 801597c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801597e:	2300      	movs	r3, #0
 8015980:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015988:	7af9      	ldrb	r1, [r7, #11]
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	f7f1 fed1 	bl	8007734 <HAL_PCD_EP_Transmit>
 8015992:	4603      	mov	r3, r0
 8015994:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015996:	7dfb      	ldrb	r3, [r7, #23]
 8015998:	4618      	mov	r0, r3
 801599a:	f000 f85b 	bl	8015a54 <USBD_Get_USB_Status>
 801599e:	4603      	mov	r3, r0
 80159a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3718      	adds	r7, #24
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}

080159ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b086      	sub	sp, #24
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	60f8      	str	r0, [r7, #12]
 80159b4:	607a      	str	r2, [r7, #4]
 80159b6:	603b      	str	r3, [r7, #0]
 80159b8:	460b      	mov	r3, r1
 80159ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159bc:	2300      	movs	r3, #0
 80159be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159c0:	2300      	movs	r3, #0
 80159c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80159ca:	7af9      	ldrb	r1, [r7, #11]
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	f7f1 fe61 	bl	8007696 <HAL_PCD_EP_Receive>
 80159d4:	4603      	mov	r3, r0
 80159d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159d8:	7dfb      	ldrb	r3, [r7, #23]
 80159da:	4618      	mov	r0, r3
 80159dc:	f000 f83a 	bl	8015a54 <USBD_Get_USB_Status>
 80159e0:	4603      	mov	r3, r0
 80159e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	3718      	adds	r7, #24
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}

080159ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159ee:	b580      	push	{r7, lr}
 80159f0:	b082      	sub	sp, #8
 80159f2:	af00      	add	r7, sp, #0
 80159f4:	6078      	str	r0, [r7, #4]
 80159f6:	460b      	mov	r3, r1
 80159f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a00:	78fa      	ldrb	r2, [r7, #3]
 8015a02:	4611      	mov	r1, r2
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7f1 fe80 	bl	800770a <HAL_PCD_EP_GetRxCount>
 8015a0a:	4603      	mov	r3, r0
}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3708      	adds	r7, #8
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}

08015a14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015a1c:	4b03      	ldr	r3, [pc, #12]	; (8015a2c <USBD_static_malloc+0x18>)
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	370c      	adds	r7, #12
 8015a22:	46bd      	mov	sp, r7
 8015a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a28:	4770      	bx	lr
 8015a2a:	bf00      	nop
 8015a2c:	20004c70 	.word	0x20004c70

08015a30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015a30:	b480      	push	{r7}
 8015a32:	b083      	sub	sp, #12
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]

}
 8015a38:	bf00      	nop
 8015a3a:	370c      	adds	r7, #12
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015a44:	b480      	push	{r7}
 8015a46:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 8015a48:	bf00      	nop
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr
	...

08015a54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b085      	sub	sp, #20
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a62:	79fb      	ldrb	r3, [r7, #7]
 8015a64:	2b03      	cmp	r3, #3
 8015a66:	d817      	bhi.n	8015a98 <USBD_Get_USB_Status+0x44>
 8015a68:	a201      	add	r2, pc, #4	; (adr r2, 8015a70 <USBD_Get_USB_Status+0x1c>)
 8015a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a6e:	bf00      	nop
 8015a70:	08015a81 	.word	0x08015a81
 8015a74:	08015a87 	.word	0x08015a87
 8015a78:	08015a8d 	.word	0x08015a8d
 8015a7c:	08015a93 	.word	0x08015a93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a80:	2300      	movs	r3, #0
 8015a82:	73fb      	strb	r3, [r7, #15]
    break;
 8015a84:	e00b      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a86:	2303      	movs	r3, #3
 8015a88:	73fb      	strb	r3, [r7, #15]
    break;
 8015a8a:	e008      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8015a90:	e005      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015a92:	2303      	movs	r3, #3
 8015a94:	73fb      	strb	r3, [r7, #15]
    break;
 8015a96:	e002      	b.n	8015a9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015a98:	2303      	movs	r3, #3
 8015a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8015a9c:	bf00      	nop
  }
  return usb_status;
 8015a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3714      	adds	r7, #20
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8015aac:	b480      	push	{r7}
 8015aae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015ab0:	4b05      	ldr	r3, [pc, #20]	; (8015ac8 <UTIL_LPM_Init+0x1c>)
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015ab6:	4b05      	ldr	r3, [pc, #20]	; (8015acc <UTIL_LPM_Init+0x20>)
 8015ab8:	2200      	movs	r2, #0
 8015aba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015abc:	bf00      	nop
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac4:	4770      	bx	lr
 8015ac6:	bf00      	nop
 8015ac8:	20004e90 	.word	0x20004e90
 8015acc:	20004e94 	.word	0x20004e94

08015ad0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015ad0:	b480      	push	{r7}
 8015ad2:	b087      	sub	sp, #28
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	460b      	mov	r3, r1
 8015ada:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015adc:	f3ef 8310 	mrs	r3, PRIMASK
 8015ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8015ae2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015ae4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ae6:	b672      	cpsid	i
  
  switch(state)
 8015ae8:	78fb      	ldrb	r3, [r7, #3]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d009      	beq.n	8015b02 <UTIL_LPM_SetOffMode+0x32>
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	d000      	beq.n	8015af4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8015af2:	e00e      	b.n	8015b12 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8015af4:	4b0c      	ldr	r3, [pc, #48]	; (8015b28 <UTIL_LPM_SetOffMode+0x58>)
 8015af6:	681a      	ldr	r2, [r3, #0]
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	4313      	orrs	r3, r2
 8015afc:	4a0a      	ldr	r2, [pc, #40]	; (8015b28 <UTIL_LPM_SetOffMode+0x58>)
 8015afe:	6013      	str	r3, [r2, #0]
      break;
 8015b00:	e007      	b.n	8015b12 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	43da      	mvns	r2, r3
 8015b06:	4b08      	ldr	r3, [pc, #32]	; (8015b28 <UTIL_LPM_SetOffMode+0x58>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	4013      	ands	r3, r2
 8015b0c:	4a06      	ldr	r2, [pc, #24]	; (8015b28 <UTIL_LPM_SetOffMode+0x58>)
 8015b0e:	6013      	str	r3, [r2, #0]
      break;
 8015b10:	bf00      	nop
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015b1c:	bf00      	nop
 8015b1e:	371c      	adds	r7, #28
 8015b20:	46bd      	mov	sp, r7
 8015b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b26:	4770      	bx	lr
 8015b28:	20004e94 	.word	0x20004e94

08015b2c <pow>:
 8015b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b30:	ed2d 8b04 	vpush	{d8-d9}
 8015b34:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8015e08 <pow+0x2dc>
 8015b38:	b08d      	sub	sp, #52	; 0x34
 8015b3a:	ec57 6b10 	vmov	r6, r7, d0
 8015b3e:	ec55 4b11 	vmov	r4, r5, d1
 8015b42:	f000 f965 	bl	8015e10 <__ieee754_pow>
 8015b46:	f999 3000 	ldrsb.w	r3, [r9]
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8015b52:	eef0 8a60 	vmov.f32	s17, s1
 8015b56:	46c8      	mov	r8, r9
 8015b58:	d05f      	beq.n	8015c1a <pow+0xee>
 8015b5a:	4622      	mov	r2, r4
 8015b5c:	462b      	mov	r3, r5
 8015b5e:	4620      	mov	r0, r4
 8015b60:	4629      	mov	r1, r5
 8015b62:	f7ea ff6d 	bl	8000a40 <__aeabi_dcmpun>
 8015b66:	4683      	mov	fp, r0
 8015b68:	2800      	cmp	r0, #0
 8015b6a:	d156      	bne.n	8015c1a <pow+0xee>
 8015b6c:	4632      	mov	r2, r6
 8015b6e:	463b      	mov	r3, r7
 8015b70:	4630      	mov	r0, r6
 8015b72:	4639      	mov	r1, r7
 8015b74:	f7ea ff64 	bl	8000a40 <__aeabi_dcmpun>
 8015b78:	9001      	str	r0, [sp, #4]
 8015b7a:	b1e8      	cbz	r0, 8015bb8 <pow+0x8c>
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	2300      	movs	r3, #0
 8015b80:	4620      	mov	r0, r4
 8015b82:	4629      	mov	r1, r5
 8015b84:	f7ea ff2a 	bl	80009dc <__aeabi_dcmpeq>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	d046      	beq.n	8015c1a <pow+0xee>
 8015b8c:	2301      	movs	r3, #1
 8015b8e:	9302      	str	r3, [sp, #8]
 8015b90:	4b96      	ldr	r3, [pc, #600]	; (8015dec <pow+0x2c0>)
 8015b92:	9303      	str	r3, [sp, #12]
 8015b94:	4b96      	ldr	r3, [pc, #600]	; (8015df0 <pow+0x2c4>)
 8015b96:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015ba0:	9b00      	ldr	r3, [sp, #0]
 8015ba2:	2b02      	cmp	r3, #2
 8015ba4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015ba8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015bac:	d033      	beq.n	8015c16 <pow+0xea>
 8015bae:	a802      	add	r0, sp, #8
 8015bb0:	f000 fefd 	bl	80169ae <matherr>
 8015bb4:	bb48      	cbnz	r0, 8015c0a <pow+0xde>
 8015bb6:	e05d      	b.n	8015c74 <pow+0x148>
 8015bb8:	f04f 0a00 	mov.w	sl, #0
 8015bbc:	f04f 0b00 	mov.w	fp, #0
 8015bc0:	4652      	mov	r2, sl
 8015bc2:	465b      	mov	r3, fp
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	4639      	mov	r1, r7
 8015bc8:	f7ea ff08 	bl	80009dc <__aeabi_dcmpeq>
 8015bcc:	ec4b ab19 	vmov	d9, sl, fp
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	d054      	beq.n	8015c7e <pow+0x152>
 8015bd4:	4652      	mov	r2, sl
 8015bd6:	465b      	mov	r3, fp
 8015bd8:	4620      	mov	r0, r4
 8015bda:	4629      	mov	r1, r5
 8015bdc:	f7ea fefe 	bl	80009dc <__aeabi_dcmpeq>
 8015be0:	4680      	mov	r8, r0
 8015be2:	b318      	cbz	r0, 8015c2c <pow+0x100>
 8015be4:	2301      	movs	r3, #1
 8015be6:	9302      	str	r3, [sp, #8]
 8015be8:	4b80      	ldr	r3, [pc, #512]	; (8015dec <pow+0x2c0>)
 8015bea:	9303      	str	r3, [sp, #12]
 8015bec:	9b01      	ldr	r3, [sp, #4]
 8015bee:	930a      	str	r3, [sp, #40]	; 0x28
 8015bf0:	9b00      	ldr	r3, [sp, #0]
 8015bf2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015bf6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015bfa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d0d5      	beq.n	8015bae <pow+0x82>
 8015c02:	4b7b      	ldr	r3, [pc, #492]	; (8015df0 <pow+0x2c4>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c0c:	b11b      	cbz	r3, 8015c16 <pow+0xea>
 8015c0e:	f000 ffe5 	bl	8016bdc <__errno>
 8015c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c14:	6003      	str	r3, [r0, #0]
 8015c16:	ed9d 8b08 	vldr	d8, [sp, #32]
 8015c1a:	eeb0 0a48 	vmov.f32	s0, s16
 8015c1e:	eef0 0a68 	vmov.f32	s1, s17
 8015c22:	b00d      	add	sp, #52	; 0x34
 8015c24:	ecbd 8b04 	vpop	{d8-d9}
 8015c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c2c:	ec45 4b10 	vmov	d0, r4, r5
 8015c30:	f000 feb5 	bl	801699e <finite>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d0f0      	beq.n	8015c1a <pow+0xee>
 8015c38:	4652      	mov	r2, sl
 8015c3a:	465b      	mov	r3, fp
 8015c3c:	4620      	mov	r0, r4
 8015c3e:	4629      	mov	r1, r5
 8015c40:	f7ea fed6 	bl	80009f0 <__aeabi_dcmplt>
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d0e8      	beq.n	8015c1a <pow+0xee>
 8015c48:	2301      	movs	r3, #1
 8015c4a:	9302      	str	r3, [sp, #8]
 8015c4c:	4b67      	ldr	r3, [pc, #412]	; (8015dec <pow+0x2c0>)
 8015c4e:	9303      	str	r3, [sp, #12]
 8015c50:	f999 3000 	ldrsb.w	r3, [r9]
 8015c54:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8015c58:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015c5c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015c60:	b913      	cbnz	r3, 8015c68 <pow+0x13c>
 8015c62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015c66:	e7a2      	b.n	8015bae <pow+0x82>
 8015c68:	4962      	ldr	r1, [pc, #392]	; (8015df4 <pow+0x2c8>)
 8015c6a:	2000      	movs	r0, #0
 8015c6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015c70:	2b02      	cmp	r3, #2
 8015c72:	d19c      	bne.n	8015bae <pow+0x82>
 8015c74:	f000 ffb2 	bl	8016bdc <__errno>
 8015c78:	2321      	movs	r3, #33	; 0x21
 8015c7a:	6003      	str	r3, [r0, #0]
 8015c7c:	e7c5      	b.n	8015c0a <pow+0xde>
 8015c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8015c82:	eef0 0a68 	vmov.f32	s1, s17
 8015c86:	f000 fe8a 	bl	801699e <finite>
 8015c8a:	9000      	str	r0, [sp, #0]
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	f040 8081 	bne.w	8015d94 <pow+0x268>
 8015c92:	ec47 6b10 	vmov	d0, r6, r7
 8015c96:	f000 fe82 	bl	801699e <finite>
 8015c9a:	2800      	cmp	r0, #0
 8015c9c:	d07a      	beq.n	8015d94 <pow+0x268>
 8015c9e:	ec45 4b10 	vmov	d0, r4, r5
 8015ca2:	f000 fe7c 	bl	801699e <finite>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d074      	beq.n	8015d94 <pow+0x268>
 8015caa:	ec53 2b18 	vmov	r2, r3, d8
 8015cae:	ee18 0a10 	vmov	r0, s16
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	f7ea fec4 	bl	8000a40 <__aeabi_dcmpun>
 8015cb8:	f999 9000 	ldrsb.w	r9, [r9]
 8015cbc:	4b4b      	ldr	r3, [pc, #300]	; (8015dec <pow+0x2c0>)
 8015cbe:	b1b0      	cbz	r0, 8015cee <pow+0x1c2>
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015cc6:	9b00      	ldr	r3, [sp, #0]
 8015cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8015cca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015cce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015cd2:	f1b9 0f00 	cmp.w	r9, #0
 8015cd6:	d0c4      	beq.n	8015c62 <pow+0x136>
 8015cd8:	4652      	mov	r2, sl
 8015cda:	465b      	mov	r3, fp
 8015cdc:	4650      	mov	r0, sl
 8015cde:	4659      	mov	r1, fp
 8015ce0:	f7ea fd3e 	bl	8000760 <__aeabi_ddiv>
 8015ce4:	f1b9 0f02 	cmp.w	r9, #2
 8015ce8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015cec:	e7c1      	b.n	8015c72 <pow+0x146>
 8015cee:	2203      	movs	r2, #3
 8015cf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015cf4:	900a      	str	r0, [sp, #40]	; 0x28
 8015cf6:	4629      	mov	r1, r5
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	4b3e      	ldr	r3, [pc, #248]	; (8015df8 <pow+0x2cc>)
 8015cfe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015d02:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015d06:	f7ea fc01 	bl	800050c <__aeabi_dmul>
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	460d      	mov	r5, r1
 8015d0e:	f1b9 0f00 	cmp.w	r9, #0
 8015d12:	d124      	bne.n	8015d5e <pow+0x232>
 8015d14:	4b39      	ldr	r3, [pc, #228]	; (8015dfc <pow+0x2d0>)
 8015d16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015d1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d1e:	4630      	mov	r0, r6
 8015d20:	4652      	mov	r2, sl
 8015d22:	465b      	mov	r3, fp
 8015d24:	4639      	mov	r1, r7
 8015d26:	f7ea fe63 	bl	80009f0 <__aeabi_dcmplt>
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d056      	beq.n	8015ddc <pow+0x2b0>
 8015d2e:	ec45 4b10 	vmov	d0, r4, r5
 8015d32:	f000 fe49 	bl	80169c8 <rint>
 8015d36:	4622      	mov	r2, r4
 8015d38:	462b      	mov	r3, r5
 8015d3a:	ec51 0b10 	vmov	r0, r1, d0
 8015d3e:	f7ea fe4d 	bl	80009dc <__aeabi_dcmpeq>
 8015d42:	b920      	cbnz	r0, 8015d4e <pow+0x222>
 8015d44:	4b2e      	ldr	r3, [pc, #184]	; (8015e00 <pow+0x2d4>)
 8015d46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015d4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d4e:	f998 3000 	ldrsb.w	r3, [r8]
 8015d52:	2b02      	cmp	r3, #2
 8015d54:	d142      	bne.n	8015ddc <pow+0x2b0>
 8015d56:	f000 ff41 	bl	8016bdc <__errno>
 8015d5a:	2322      	movs	r3, #34	; 0x22
 8015d5c:	e78d      	b.n	8015c7a <pow+0x14e>
 8015d5e:	4b29      	ldr	r3, [pc, #164]	; (8015e04 <pow+0x2d8>)
 8015d60:	2200      	movs	r2, #0
 8015d62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d66:	4630      	mov	r0, r6
 8015d68:	4652      	mov	r2, sl
 8015d6a:	465b      	mov	r3, fp
 8015d6c:	4639      	mov	r1, r7
 8015d6e:	f7ea fe3f 	bl	80009f0 <__aeabi_dcmplt>
 8015d72:	2800      	cmp	r0, #0
 8015d74:	d0eb      	beq.n	8015d4e <pow+0x222>
 8015d76:	ec45 4b10 	vmov	d0, r4, r5
 8015d7a:	f000 fe25 	bl	80169c8 <rint>
 8015d7e:	4622      	mov	r2, r4
 8015d80:	462b      	mov	r3, r5
 8015d82:	ec51 0b10 	vmov	r0, r1, d0
 8015d86:	f7ea fe29 	bl	80009dc <__aeabi_dcmpeq>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d1df      	bne.n	8015d4e <pow+0x222>
 8015d8e:	2200      	movs	r2, #0
 8015d90:	4b18      	ldr	r3, [pc, #96]	; (8015df4 <pow+0x2c8>)
 8015d92:	e7da      	b.n	8015d4a <pow+0x21e>
 8015d94:	2200      	movs	r2, #0
 8015d96:	2300      	movs	r3, #0
 8015d98:	ec51 0b18 	vmov	r0, r1, d8
 8015d9c:	f7ea fe1e 	bl	80009dc <__aeabi_dcmpeq>
 8015da0:	2800      	cmp	r0, #0
 8015da2:	f43f af3a 	beq.w	8015c1a <pow+0xee>
 8015da6:	ec47 6b10 	vmov	d0, r6, r7
 8015daa:	f000 fdf8 	bl	801699e <finite>
 8015dae:	2800      	cmp	r0, #0
 8015db0:	f43f af33 	beq.w	8015c1a <pow+0xee>
 8015db4:	ec45 4b10 	vmov	d0, r4, r5
 8015db8:	f000 fdf1 	bl	801699e <finite>
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	f43f af2c 	beq.w	8015c1a <pow+0xee>
 8015dc2:	2304      	movs	r3, #4
 8015dc4:	9302      	str	r3, [sp, #8]
 8015dc6:	4b09      	ldr	r3, [pc, #36]	; (8015dec <pow+0x2c0>)
 8015dc8:	9303      	str	r3, [sp, #12]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	930a      	str	r3, [sp, #40]	; 0x28
 8015dce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015dd2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8015dd6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8015dda:	e7b8      	b.n	8015d4e <pow+0x222>
 8015ddc:	a802      	add	r0, sp, #8
 8015dde:	f000 fde6 	bl	80169ae <matherr>
 8015de2:	2800      	cmp	r0, #0
 8015de4:	f47f af11 	bne.w	8015c0a <pow+0xde>
 8015de8:	e7b5      	b.n	8015d56 <pow+0x22a>
 8015dea:	bf00      	nop
 8015dec:	080171c3 	.word	0x080171c3
 8015df0:	3ff00000 	.word	0x3ff00000
 8015df4:	fff00000 	.word	0xfff00000
 8015df8:	3fe00000 	.word	0x3fe00000
 8015dfc:	47efffff 	.word	0x47efffff
 8015e00:	c7efffff 	.word	0xc7efffff
 8015e04:	7ff00000 	.word	0x7ff00000
 8015e08:	200001e6 	.word	0x200001e6
 8015e0c:	00000000 	.word	0x00000000

08015e10 <__ieee754_pow>:
 8015e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e14:	b091      	sub	sp, #68	; 0x44
 8015e16:	ed8d 1b00 	vstr	d1, [sp]
 8015e1a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015e1e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8015e22:	ea58 0302 	orrs.w	r3, r8, r2
 8015e26:	ec57 6b10 	vmov	r6, r7, d0
 8015e2a:	f000 84be 	beq.w	80167aa <__ieee754_pow+0x99a>
 8015e2e:	4b7a      	ldr	r3, [pc, #488]	; (8016018 <__ieee754_pow+0x208>)
 8015e30:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8015e34:	429c      	cmp	r4, r3
 8015e36:	463d      	mov	r5, r7
 8015e38:	ee10 aa10 	vmov	sl, s0
 8015e3c:	dc09      	bgt.n	8015e52 <__ieee754_pow+0x42>
 8015e3e:	d103      	bne.n	8015e48 <__ieee754_pow+0x38>
 8015e40:	b93e      	cbnz	r6, 8015e52 <__ieee754_pow+0x42>
 8015e42:	45a0      	cmp	r8, r4
 8015e44:	dc0d      	bgt.n	8015e62 <__ieee754_pow+0x52>
 8015e46:	e001      	b.n	8015e4c <__ieee754_pow+0x3c>
 8015e48:	4598      	cmp	r8, r3
 8015e4a:	dc02      	bgt.n	8015e52 <__ieee754_pow+0x42>
 8015e4c:	4598      	cmp	r8, r3
 8015e4e:	d10e      	bne.n	8015e6e <__ieee754_pow+0x5e>
 8015e50:	b16a      	cbz	r2, 8015e6e <__ieee754_pow+0x5e>
 8015e52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015e56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015e5a:	ea54 030a 	orrs.w	r3, r4, sl
 8015e5e:	f000 84a4 	beq.w	80167aa <__ieee754_pow+0x99a>
 8015e62:	486e      	ldr	r0, [pc, #440]	; (801601c <__ieee754_pow+0x20c>)
 8015e64:	b011      	add	sp, #68	; 0x44
 8015e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6a:	f000 bda5 	b.w	80169b8 <nan>
 8015e6e:	2d00      	cmp	r5, #0
 8015e70:	da53      	bge.n	8015f1a <__ieee754_pow+0x10a>
 8015e72:	4b6b      	ldr	r3, [pc, #428]	; (8016020 <__ieee754_pow+0x210>)
 8015e74:	4598      	cmp	r8, r3
 8015e76:	dc4d      	bgt.n	8015f14 <__ieee754_pow+0x104>
 8015e78:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015e7c:	4598      	cmp	r8, r3
 8015e7e:	dd4c      	ble.n	8015f1a <__ieee754_pow+0x10a>
 8015e80:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015e84:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015e88:	2b14      	cmp	r3, #20
 8015e8a:	dd26      	ble.n	8015eda <__ieee754_pow+0xca>
 8015e8c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015e90:	fa22 f103 	lsr.w	r1, r2, r3
 8015e94:	fa01 f303 	lsl.w	r3, r1, r3
 8015e98:	4293      	cmp	r3, r2
 8015e9a:	d13e      	bne.n	8015f1a <__ieee754_pow+0x10a>
 8015e9c:	f001 0101 	and.w	r1, r1, #1
 8015ea0:	f1c1 0b02 	rsb	fp, r1, #2
 8015ea4:	2a00      	cmp	r2, #0
 8015ea6:	d15b      	bne.n	8015f60 <__ieee754_pow+0x150>
 8015ea8:	4b5b      	ldr	r3, [pc, #364]	; (8016018 <__ieee754_pow+0x208>)
 8015eaa:	4598      	cmp	r8, r3
 8015eac:	d124      	bne.n	8015ef8 <__ieee754_pow+0xe8>
 8015eae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8015eb2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8015eb6:	ea53 030a 	orrs.w	r3, r3, sl
 8015eba:	f000 8476 	beq.w	80167aa <__ieee754_pow+0x99a>
 8015ebe:	4b59      	ldr	r3, [pc, #356]	; (8016024 <__ieee754_pow+0x214>)
 8015ec0:	429c      	cmp	r4, r3
 8015ec2:	dd2d      	ble.n	8015f20 <__ieee754_pow+0x110>
 8015ec4:	f1b9 0f00 	cmp.w	r9, #0
 8015ec8:	f280 8473 	bge.w	80167b2 <__ieee754_pow+0x9a2>
 8015ecc:	2000      	movs	r0, #0
 8015ece:	2100      	movs	r1, #0
 8015ed0:	ec41 0b10 	vmov	d0, r0, r1
 8015ed4:	b011      	add	sp, #68	; 0x44
 8015ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eda:	2a00      	cmp	r2, #0
 8015edc:	d13e      	bne.n	8015f5c <__ieee754_pow+0x14c>
 8015ede:	f1c3 0314 	rsb	r3, r3, #20
 8015ee2:	fa48 f103 	asr.w	r1, r8, r3
 8015ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8015eea:	4543      	cmp	r3, r8
 8015eec:	f040 8469 	bne.w	80167c2 <__ieee754_pow+0x9b2>
 8015ef0:	f001 0101 	and.w	r1, r1, #1
 8015ef4:	f1c1 0b02 	rsb	fp, r1, #2
 8015ef8:	4b4b      	ldr	r3, [pc, #300]	; (8016028 <__ieee754_pow+0x218>)
 8015efa:	4598      	cmp	r8, r3
 8015efc:	d118      	bne.n	8015f30 <__ieee754_pow+0x120>
 8015efe:	f1b9 0f00 	cmp.w	r9, #0
 8015f02:	f280 845a 	bge.w	80167ba <__ieee754_pow+0x9aa>
 8015f06:	4948      	ldr	r1, [pc, #288]	; (8016028 <__ieee754_pow+0x218>)
 8015f08:	4632      	mov	r2, r6
 8015f0a:	463b      	mov	r3, r7
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	f7ea fc27 	bl	8000760 <__aeabi_ddiv>
 8015f12:	e7dd      	b.n	8015ed0 <__ieee754_pow+0xc0>
 8015f14:	f04f 0b02 	mov.w	fp, #2
 8015f18:	e7c4      	b.n	8015ea4 <__ieee754_pow+0x94>
 8015f1a:	f04f 0b00 	mov.w	fp, #0
 8015f1e:	e7c1      	b.n	8015ea4 <__ieee754_pow+0x94>
 8015f20:	f1b9 0f00 	cmp.w	r9, #0
 8015f24:	dad2      	bge.n	8015ecc <__ieee754_pow+0xbc>
 8015f26:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015f2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015f2e:	e7cf      	b.n	8015ed0 <__ieee754_pow+0xc0>
 8015f30:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8015f34:	d106      	bne.n	8015f44 <__ieee754_pow+0x134>
 8015f36:	4632      	mov	r2, r6
 8015f38:	463b      	mov	r3, r7
 8015f3a:	4610      	mov	r0, r2
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	f7ea fae5 	bl	800050c <__aeabi_dmul>
 8015f42:	e7c5      	b.n	8015ed0 <__ieee754_pow+0xc0>
 8015f44:	4b39      	ldr	r3, [pc, #228]	; (801602c <__ieee754_pow+0x21c>)
 8015f46:	4599      	cmp	r9, r3
 8015f48:	d10a      	bne.n	8015f60 <__ieee754_pow+0x150>
 8015f4a:	2d00      	cmp	r5, #0
 8015f4c:	db08      	blt.n	8015f60 <__ieee754_pow+0x150>
 8015f4e:	ec47 6b10 	vmov	d0, r6, r7
 8015f52:	b011      	add	sp, #68	; 0x44
 8015f54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f58:	f000 bc68 	b.w	801682c <__ieee754_sqrt>
 8015f5c:	f04f 0b00 	mov.w	fp, #0
 8015f60:	ec47 6b10 	vmov	d0, r6, r7
 8015f64:	f000 fd12 	bl	801698c <fabs>
 8015f68:	ec51 0b10 	vmov	r0, r1, d0
 8015f6c:	f1ba 0f00 	cmp.w	sl, #0
 8015f70:	d127      	bne.n	8015fc2 <__ieee754_pow+0x1b2>
 8015f72:	b124      	cbz	r4, 8015f7e <__ieee754_pow+0x16e>
 8015f74:	4b2c      	ldr	r3, [pc, #176]	; (8016028 <__ieee754_pow+0x218>)
 8015f76:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d121      	bne.n	8015fc2 <__ieee754_pow+0x1b2>
 8015f7e:	f1b9 0f00 	cmp.w	r9, #0
 8015f82:	da05      	bge.n	8015f90 <__ieee754_pow+0x180>
 8015f84:	4602      	mov	r2, r0
 8015f86:	460b      	mov	r3, r1
 8015f88:	2000      	movs	r0, #0
 8015f8a:	4927      	ldr	r1, [pc, #156]	; (8016028 <__ieee754_pow+0x218>)
 8015f8c:	f7ea fbe8 	bl	8000760 <__aeabi_ddiv>
 8015f90:	2d00      	cmp	r5, #0
 8015f92:	da9d      	bge.n	8015ed0 <__ieee754_pow+0xc0>
 8015f94:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015f98:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015f9c:	ea54 030b 	orrs.w	r3, r4, fp
 8015fa0:	d108      	bne.n	8015fb4 <__ieee754_pow+0x1a4>
 8015fa2:	4602      	mov	r2, r0
 8015fa4:	460b      	mov	r3, r1
 8015fa6:	4610      	mov	r0, r2
 8015fa8:	4619      	mov	r1, r3
 8015faa:	f7ea f8f7 	bl	800019c <__aeabi_dsub>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	e7ac      	b.n	8015f0e <__ieee754_pow+0xfe>
 8015fb4:	f1bb 0f01 	cmp.w	fp, #1
 8015fb8:	d18a      	bne.n	8015ed0 <__ieee754_pow+0xc0>
 8015fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	e786      	b.n	8015ed0 <__ieee754_pow+0xc0>
 8015fc2:	0fed      	lsrs	r5, r5, #31
 8015fc4:	1e6b      	subs	r3, r5, #1
 8015fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8015fc8:	ea5b 0303 	orrs.w	r3, fp, r3
 8015fcc:	d102      	bne.n	8015fd4 <__ieee754_pow+0x1c4>
 8015fce:	4632      	mov	r2, r6
 8015fd0:	463b      	mov	r3, r7
 8015fd2:	e7e8      	b.n	8015fa6 <__ieee754_pow+0x196>
 8015fd4:	4b16      	ldr	r3, [pc, #88]	; (8016030 <__ieee754_pow+0x220>)
 8015fd6:	4598      	cmp	r8, r3
 8015fd8:	f340 80fe 	ble.w	80161d8 <__ieee754_pow+0x3c8>
 8015fdc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015fe0:	4598      	cmp	r8, r3
 8015fe2:	dd0a      	ble.n	8015ffa <__ieee754_pow+0x1ea>
 8015fe4:	4b0f      	ldr	r3, [pc, #60]	; (8016024 <__ieee754_pow+0x214>)
 8015fe6:	429c      	cmp	r4, r3
 8015fe8:	dc0d      	bgt.n	8016006 <__ieee754_pow+0x1f6>
 8015fea:	f1b9 0f00 	cmp.w	r9, #0
 8015fee:	f6bf af6d 	bge.w	8015ecc <__ieee754_pow+0xbc>
 8015ff2:	a307      	add	r3, pc, #28	; (adr r3, 8016010 <__ieee754_pow+0x200>)
 8015ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff8:	e79f      	b.n	8015f3a <__ieee754_pow+0x12a>
 8015ffa:	4b0e      	ldr	r3, [pc, #56]	; (8016034 <__ieee754_pow+0x224>)
 8015ffc:	429c      	cmp	r4, r3
 8015ffe:	ddf4      	ble.n	8015fea <__ieee754_pow+0x1da>
 8016000:	4b09      	ldr	r3, [pc, #36]	; (8016028 <__ieee754_pow+0x218>)
 8016002:	429c      	cmp	r4, r3
 8016004:	dd18      	ble.n	8016038 <__ieee754_pow+0x228>
 8016006:	f1b9 0f00 	cmp.w	r9, #0
 801600a:	dcf2      	bgt.n	8015ff2 <__ieee754_pow+0x1e2>
 801600c:	e75e      	b.n	8015ecc <__ieee754_pow+0xbc>
 801600e:	bf00      	nop
 8016010:	8800759c 	.word	0x8800759c
 8016014:	7e37e43c 	.word	0x7e37e43c
 8016018:	7ff00000 	.word	0x7ff00000
 801601c:	080171c6 	.word	0x080171c6
 8016020:	433fffff 	.word	0x433fffff
 8016024:	3fefffff 	.word	0x3fefffff
 8016028:	3ff00000 	.word	0x3ff00000
 801602c:	3fe00000 	.word	0x3fe00000
 8016030:	41e00000 	.word	0x41e00000
 8016034:	3feffffe 	.word	0x3feffffe
 8016038:	2200      	movs	r2, #0
 801603a:	4b63      	ldr	r3, [pc, #396]	; (80161c8 <__ieee754_pow+0x3b8>)
 801603c:	f7ea f8ae 	bl	800019c <__aeabi_dsub>
 8016040:	a355      	add	r3, pc, #340	; (adr r3, 8016198 <__ieee754_pow+0x388>)
 8016042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016046:	4604      	mov	r4, r0
 8016048:	460d      	mov	r5, r1
 801604a:	f7ea fa5f 	bl	800050c <__aeabi_dmul>
 801604e:	a354      	add	r3, pc, #336	; (adr r3, 80161a0 <__ieee754_pow+0x390>)
 8016050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016054:	4606      	mov	r6, r0
 8016056:	460f      	mov	r7, r1
 8016058:	4620      	mov	r0, r4
 801605a:	4629      	mov	r1, r5
 801605c:	f7ea fa56 	bl	800050c <__aeabi_dmul>
 8016060:	2200      	movs	r2, #0
 8016062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016066:	4b59      	ldr	r3, [pc, #356]	; (80161cc <__ieee754_pow+0x3bc>)
 8016068:	4620      	mov	r0, r4
 801606a:	4629      	mov	r1, r5
 801606c:	f7ea fa4e 	bl	800050c <__aeabi_dmul>
 8016070:	4602      	mov	r2, r0
 8016072:	460b      	mov	r3, r1
 8016074:	a14c      	add	r1, pc, #304	; (adr r1, 80161a8 <__ieee754_pow+0x398>)
 8016076:	e9d1 0100 	ldrd	r0, r1, [r1]
 801607a:	f7ea f88f 	bl	800019c <__aeabi_dsub>
 801607e:	4622      	mov	r2, r4
 8016080:	462b      	mov	r3, r5
 8016082:	f7ea fa43 	bl	800050c <__aeabi_dmul>
 8016086:	4602      	mov	r2, r0
 8016088:	460b      	mov	r3, r1
 801608a:	2000      	movs	r0, #0
 801608c:	4950      	ldr	r1, [pc, #320]	; (80161d0 <__ieee754_pow+0x3c0>)
 801608e:	f7ea f885 	bl	800019c <__aeabi_dsub>
 8016092:	4622      	mov	r2, r4
 8016094:	462b      	mov	r3, r5
 8016096:	4680      	mov	r8, r0
 8016098:	4689      	mov	r9, r1
 801609a:	4620      	mov	r0, r4
 801609c:	4629      	mov	r1, r5
 801609e:	f7ea fa35 	bl	800050c <__aeabi_dmul>
 80160a2:	4602      	mov	r2, r0
 80160a4:	460b      	mov	r3, r1
 80160a6:	4640      	mov	r0, r8
 80160a8:	4649      	mov	r1, r9
 80160aa:	f7ea fa2f 	bl	800050c <__aeabi_dmul>
 80160ae:	a340      	add	r3, pc, #256	; (adr r3, 80161b0 <__ieee754_pow+0x3a0>)
 80160b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b4:	f7ea fa2a 	bl	800050c <__aeabi_dmul>
 80160b8:	4602      	mov	r2, r0
 80160ba:	460b      	mov	r3, r1
 80160bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160c0:	f7ea f86c 	bl	800019c <__aeabi_dsub>
 80160c4:	4602      	mov	r2, r0
 80160c6:	460b      	mov	r3, r1
 80160c8:	4604      	mov	r4, r0
 80160ca:	460d      	mov	r5, r1
 80160cc:	4630      	mov	r0, r6
 80160ce:	4639      	mov	r1, r7
 80160d0:	f7ea f866 	bl	80001a0 <__adddf3>
 80160d4:	2000      	movs	r0, #0
 80160d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80160da:	4632      	mov	r2, r6
 80160dc:	463b      	mov	r3, r7
 80160de:	f7ea f85d 	bl	800019c <__aeabi_dsub>
 80160e2:	4602      	mov	r2, r0
 80160e4:	460b      	mov	r3, r1
 80160e6:	4620      	mov	r0, r4
 80160e8:	4629      	mov	r1, r5
 80160ea:	f7ea f857 	bl	800019c <__aeabi_dsub>
 80160ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80160f4:	4313      	orrs	r3, r2
 80160f6:	4606      	mov	r6, r0
 80160f8:	460f      	mov	r7, r1
 80160fa:	f040 81eb 	bne.w	80164d4 <__ieee754_pow+0x6c4>
 80160fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80161b8 <__ieee754_pow+0x3a8>
 8016102:	e9dd 4500 	ldrd	r4, r5, [sp]
 8016106:	2400      	movs	r4, #0
 8016108:	4622      	mov	r2, r4
 801610a:	462b      	mov	r3, r5
 801610c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016110:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016114:	f7ea f842 	bl	800019c <__aeabi_dsub>
 8016118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801611c:	f7ea f9f6 	bl	800050c <__aeabi_dmul>
 8016120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016124:	4680      	mov	r8, r0
 8016126:	4689      	mov	r9, r1
 8016128:	4630      	mov	r0, r6
 801612a:	4639      	mov	r1, r7
 801612c:	f7ea f9ee 	bl	800050c <__aeabi_dmul>
 8016130:	4602      	mov	r2, r0
 8016132:	460b      	mov	r3, r1
 8016134:	4640      	mov	r0, r8
 8016136:	4649      	mov	r1, r9
 8016138:	f7ea f832 	bl	80001a0 <__adddf3>
 801613c:	4622      	mov	r2, r4
 801613e:	462b      	mov	r3, r5
 8016140:	4680      	mov	r8, r0
 8016142:	4689      	mov	r9, r1
 8016144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016148:	f7ea f9e0 	bl	800050c <__aeabi_dmul>
 801614c:	460b      	mov	r3, r1
 801614e:	4604      	mov	r4, r0
 8016150:	460d      	mov	r5, r1
 8016152:	4602      	mov	r2, r0
 8016154:	4649      	mov	r1, r9
 8016156:	4640      	mov	r0, r8
 8016158:	e9cd 4500 	strd	r4, r5, [sp]
 801615c:	f7ea f820 	bl	80001a0 <__adddf3>
 8016160:	4b1c      	ldr	r3, [pc, #112]	; (80161d4 <__ieee754_pow+0x3c4>)
 8016162:	4299      	cmp	r1, r3
 8016164:	4606      	mov	r6, r0
 8016166:	460f      	mov	r7, r1
 8016168:	468b      	mov	fp, r1
 801616a:	f340 82f7 	ble.w	801675c <__ieee754_pow+0x94c>
 801616e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016172:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016176:	4303      	orrs	r3, r0
 8016178:	f000 81ea 	beq.w	8016550 <__ieee754_pow+0x740>
 801617c:	a310      	add	r3, pc, #64	; (adr r3, 80161c0 <__ieee754_pow+0x3b0>)
 801617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016186:	f7ea f9c1 	bl	800050c <__aeabi_dmul>
 801618a:	a30d      	add	r3, pc, #52	; (adr r3, 80161c0 <__ieee754_pow+0x3b0>)
 801618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016190:	e6d5      	b.n	8015f3e <__ieee754_pow+0x12e>
 8016192:	bf00      	nop
 8016194:	f3af 8000 	nop.w
 8016198:	60000000 	.word	0x60000000
 801619c:	3ff71547 	.word	0x3ff71547
 80161a0:	f85ddf44 	.word	0xf85ddf44
 80161a4:	3e54ae0b 	.word	0x3e54ae0b
 80161a8:	55555555 	.word	0x55555555
 80161ac:	3fd55555 	.word	0x3fd55555
 80161b0:	652b82fe 	.word	0x652b82fe
 80161b4:	3ff71547 	.word	0x3ff71547
 80161b8:	00000000 	.word	0x00000000
 80161bc:	bff00000 	.word	0xbff00000
 80161c0:	8800759c 	.word	0x8800759c
 80161c4:	7e37e43c 	.word	0x7e37e43c
 80161c8:	3ff00000 	.word	0x3ff00000
 80161cc:	3fd00000 	.word	0x3fd00000
 80161d0:	3fe00000 	.word	0x3fe00000
 80161d4:	408fffff 	.word	0x408fffff
 80161d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80161dc:	f04f 0200 	mov.w	r2, #0
 80161e0:	da05      	bge.n	80161ee <__ieee754_pow+0x3de>
 80161e2:	4bd3      	ldr	r3, [pc, #844]	; (8016530 <__ieee754_pow+0x720>)
 80161e4:	f7ea f992 	bl	800050c <__aeabi_dmul>
 80161e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80161ec:	460c      	mov	r4, r1
 80161ee:	1523      	asrs	r3, r4, #20
 80161f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80161f4:	4413      	add	r3, r2
 80161f6:	9309      	str	r3, [sp, #36]	; 0x24
 80161f8:	4bce      	ldr	r3, [pc, #824]	; (8016534 <__ieee754_pow+0x724>)
 80161fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80161fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016202:	429c      	cmp	r4, r3
 8016204:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016208:	dd08      	ble.n	801621c <__ieee754_pow+0x40c>
 801620a:	4bcb      	ldr	r3, [pc, #812]	; (8016538 <__ieee754_pow+0x728>)
 801620c:	429c      	cmp	r4, r3
 801620e:	f340 815e 	ble.w	80164ce <__ieee754_pow+0x6be>
 8016212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016214:	3301      	adds	r3, #1
 8016216:	9309      	str	r3, [sp, #36]	; 0x24
 8016218:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801621c:	f04f 0a00 	mov.w	sl, #0
 8016220:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016224:	930c      	str	r3, [sp, #48]	; 0x30
 8016226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016228:	4bc4      	ldr	r3, [pc, #784]	; (801653c <__ieee754_pow+0x72c>)
 801622a:	4413      	add	r3, r2
 801622c:	ed93 7b00 	vldr	d7, [r3]
 8016230:	4629      	mov	r1, r5
 8016232:	ec53 2b17 	vmov	r2, r3, d7
 8016236:	ed8d 7b06 	vstr	d7, [sp, #24]
 801623a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801623e:	f7e9 ffad 	bl	800019c <__aeabi_dsub>
 8016242:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016246:	4606      	mov	r6, r0
 8016248:	460f      	mov	r7, r1
 801624a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801624e:	f7e9 ffa7 	bl	80001a0 <__adddf3>
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	2000      	movs	r0, #0
 8016258:	49b9      	ldr	r1, [pc, #740]	; (8016540 <__ieee754_pow+0x730>)
 801625a:	f7ea fa81 	bl	8000760 <__aeabi_ddiv>
 801625e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016262:	4602      	mov	r2, r0
 8016264:	460b      	mov	r3, r1
 8016266:	4630      	mov	r0, r6
 8016268:	4639      	mov	r1, r7
 801626a:	f7ea f94f 	bl	800050c <__aeabi_dmul>
 801626e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016272:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016276:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801627a:	2300      	movs	r3, #0
 801627c:	9302      	str	r3, [sp, #8]
 801627e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016282:	106d      	asrs	r5, r5, #1
 8016284:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016288:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801628c:	2200      	movs	r2, #0
 801628e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016292:	4640      	mov	r0, r8
 8016294:	4649      	mov	r1, r9
 8016296:	4614      	mov	r4, r2
 8016298:	461d      	mov	r5, r3
 801629a:	f7ea f937 	bl	800050c <__aeabi_dmul>
 801629e:	4602      	mov	r2, r0
 80162a0:	460b      	mov	r3, r1
 80162a2:	4630      	mov	r0, r6
 80162a4:	4639      	mov	r1, r7
 80162a6:	f7e9 ff79 	bl	800019c <__aeabi_dsub>
 80162aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80162ae:	4606      	mov	r6, r0
 80162b0:	460f      	mov	r7, r1
 80162b2:	4620      	mov	r0, r4
 80162b4:	4629      	mov	r1, r5
 80162b6:	f7e9 ff71 	bl	800019c <__aeabi_dsub>
 80162ba:	4602      	mov	r2, r0
 80162bc:	460b      	mov	r3, r1
 80162be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80162c2:	f7e9 ff6b 	bl	800019c <__aeabi_dsub>
 80162c6:	4642      	mov	r2, r8
 80162c8:	464b      	mov	r3, r9
 80162ca:	f7ea f91f 	bl	800050c <__aeabi_dmul>
 80162ce:	4602      	mov	r2, r0
 80162d0:	460b      	mov	r3, r1
 80162d2:	4630      	mov	r0, r6
 80162d4:	4639      	mov	r1, r7
 80162d6:	f7e9 ff61 	bl	800019c <__aeabi_dsub>
 80162da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80162de:	f7ea f915 	bl	800050c <__aeabi_dmul>
 80162e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162ea:	4610      	mov	r0, r2
 80162ec:	4619      	mov	r1, r3
 80162ee:	f7ea f90d 	bl	800050c <__aeabi_dmul>
 80162f2:	a37b      	add	r3, pc, #492	; (adr r3, 80164e0 <__ieee754_pow+0x6d0>)
 80162f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f8:	4604      	mov	r4, r0
 80162fa:	460d      	mov	r5, r1
 80162fc:	f7ea f906 	bl	800050c <__aeabi_dmul>
 8016300:	a379      	add	r3, pc, #484	; (adr r3, 80164e8 <__ieee754_pow+0x6d8>)
 8016302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016306:	f7e9 ff4b 	bl	80001a0 <__adddf3>
 801630a:	4622      	mov	r2, r4
 801630c:	462b      	mov	r3, r5
 801630e:	f7ea f8fd 	bl	800050c <__aeabi_dmul>
 8016312:	a377      	add	r3, pc, #476	; (adr r3, 80164f0 <__ieee754_pow+0x6e0>)
 8016314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016318:	f7e9 ff42 	bl	80001a0 <__adddf3>
 801631c:	4622      	mov	r2, r4
 801631e:	462b      	mov	r3, r5
 8016320:	f7ea f8f4 	bl	800050c <__aeabi_dmul>
 8016324:	a374      	add	r3, pc, #464	; (adr r3, 80164f8 <__ieee754_pow+0x6e8>)
 8016326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632a:	f7e9 ff39 	bl	80001a0 <__adddf3>
 801632e:	4622      	mov	r2, r4
 8016330:	462b      	mov	r3, r5
 8016332:	f7ea f8eb 	bl	800050c <__aeabi_dmul>
 8016336:	a372      	add	r3, pc, #456	; (adr r3, 8016500 <__ieee754_pow+0x6f0>)
 8016338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633c:	f7e9 ff30 	bl	80001a0 <__adddf3>
 8016340:	4622      	mov	r2, r4
 8016342:	462b      	mov	r3, r5
 8016344:	f7ea f8e2 	bl	800050c <__aeabi_dmul>
 8016348:	a36f      	add	r3, pc, #444	; (adr r3, 8016508 <__ieee754_pow+0x6f8>)
 801634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801634e:	f7e9 ff27 	bl	80001a0 <__adddf3>
 8016352:	4622      	mov	r2, r4
 8016354:	4606      	mov	r6, r0
 8016356:	460f      	mov	r7, r1
 8016358:	462b      	mov	r3, r5
 801635a:	4620      	mov	r0, r4
 801635c:	4629      	mov	r1, r5
 801635e:	f7ea f8d5 	bl	800050c <__aeabi_dmul>
 8016362:	4602      	mov	r2, r0
 8016364:	460b      	mov	r3, r1
 8016366:	4630      	mov	r0, r6
 8016368:	4639      	mov	r1, r7
 801636a:	f7ea f8cf 	bl	800050c <__aeabi_dmul>
 801636e:	4642      	mov	r2, r8
 8016370:	4604      	mov	r4, r0
 8016372:	460d      	mov	r5, r1
 8016374:	464b      	mov	r3, r9
 8016376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801637a:	f7e9 ff11 	bl	80001a0 <__adddf3>
 801637e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016382:	f7ea f8c3 	bl	800050c <__aeabi_dmul>
 8016386:	4622      	mov	r2, r4
 8016388:	462b      	mov	r3, r5
 801638a:	f7e9 ff09 	bl	80001a0 <__adddf3>
 801638e:	4642      	mov	r2, r8
 8016390:	4606      	mov	r6, r0
 8016392:	460f      	mov	r7, r1
 8016394:	464b      	mov	r3, r9
 8016396:	4640      	mov	r0, r8
 8016398:	4649      	mov	r1, r9
 801639a:	f7ea f8b7 	bl	800050c <__aeabi_dmul>
 801639e:	2200      	movs	r2, #0
 80163a0:	4b68      	ldr	r3, [pc, #416]	; (8016544 <__ieee754_pow+0x734>)
 80163a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80163a6:	f7e9 fefb 	bl	80001a0 <__adddf3>
 80163aa:	4632      	mov	r2, r6
 80163ac:	463b      	mov	r3, r7
 80163ae:	f7e9 fef7 	bl	80001a0 <__adddf3>
 80163b2:	9802      	ldr	r0, [sp, #8]
 80163b4:	460d      	mov	r5, r1
 80163b6:	4604      	mov	r4, r0
 80163b8:	4602      	mov	r2, r0
 80163ba:	460b      	mov	r3, r1
 80163bc:	4640      	mov	r0, r8
 80163be:	4649      	mov	r1, r9
 80163c0:	f7ea f8a4 	bl	800050c <__aeabi_dmul>
 80163c4:	2200      	movs	r2, #0
 80163c6:	4680      	mov	r8, r0
 80163c8:	4689      	mov	r9, r1
 80163ca:	4b5e      	ldr	r3, [pc, #376]	; (8016544 <__ieee754_pow+0x734>)
 80163cc:	4620      	mov	r0, r4
 80163ce:	4629      	mov	r1, r5
 80163d0:	f7e9 fee4 	bl	800019c <__aeabi_dsub>
 80163d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80163d8:	f7e9 fee0 	bl	800019c <__aeabi_dsub>
 80163dc:	4602      	mov	r2, r0
 80163de:	460b      	mov	r3, r1
 80163e0:	4630      	mov	r0, r6
 80163e2:	4639      	mov	r1, r7
 80163e4:	f7e9 feda 	bl	800019c <__aeabi_dsub>
 80163e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163ec:	f7ea f88e 	bl	800050c <__aeabi_dmul>
 80163f0:	4622      	mov	r2, r4
 80163f2:	4606      	mov	r6, r0
 80163f4:	460f      	mov	r7, r1
 80163f6:	462b      	mov	r3, r5
 80163f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163fc:	f7ea f886 	bl	800050c <__aeabi_dmul>
 8016400:	4602      	mov	r2, r0
 8016402:	460b      	mov	r3, r1
 8016404:	4630      	mov	r0, r6
 8016406:	4639      	mov	r1, r7
 8016408:	f7e9 feca 	bl	80001a0 <__adddf3>
 801640c:	4606      	mov	r6, r0
 801640e:	460f      	mov	r7, r1
 8016410:	4602      	mov	r2, r0
 8016412:	460b      	mov	r3, r1
 8016414:	4640      	mov	r0, r8
 8016416:	4649      	mov	r1, r9
 8016418:	f7e9 fec2 	bl	80001a0 <__adddf3>
 801641c:	9802      	ldr	r0, [sp, #8]
 801641e:	a33c      	add	r3, pc, #240	; (adr r3, 8016510 <__ieee754_pow+0x700>)
 8016420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016424:	4604      	mov	r4, r0
 8016426:	460d      	mov	r5, r1
 8016428:	f7ea f870 	bl	800050c <__aeabi_dmul>
 801642c:	4642      	mov	r2, r8
 801642e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016432:	464b      	mov	r3, r9
 8016434:	4620      	mov	r0, r4
 8016436:	4629      	mov	r1, r5
 8016438:	f7e9 feb0 	bl	800019c <__aeabi_dsub>
 801643c:	4602      	mov	r2, r0
 801643e:	460b      	mov	r3, r1
 8016440:	4630      	mov	r0, r6
 8016442:	4639      	mov	r1, r7
 8016444:	f7e9 feaa 	bl	800019c <__aeabi_dsub>
 8016448:	a333      	add	r3, pc, #204	; (adr r3, 8016518 <__ieee754_pow+0x708>)
 801644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644e:	f7ea f85d 	bl	800050c <__aeabi_dmul>
 8016452:	a333      	add	r3, pc, #204	; (adr r3, 8016520 <__ieee754_pow+0x710>)
 8016454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016458:	4606      	mov	r6, r0
 801645a:	460f      	mov	r7, r1
 801645c:	4620      	mov	r0, r4
 801645e:	4629      	mov	r1, r5
 8016460:	f7ea f854 	bl	800050c <__aeabi_dmul>
 8016464:	4602      	mov	r2, r0
 8016466:	460b      	mov	r3, r1
 8016468:	4630      	mov	r0, r6
 801646a:	4639      	mov	r1, r7
 801646c:	f7e9 fe98 	bl	80001a0 <__adddf3>
 8016470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016472:	4b35      	ldr	r3, [pc, #212]	; (8016548 <__ieee754_pow+0x738>)
 8016474:	4413      	add	r3, r2
 8016476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801647a:	f7e9 fe91 	bl	80001a0 <__adddf3>
 801647e:	4604      	mov	r4, r0
 8016480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016482:	460d      	mov	r5, r1
 8016484:	f7e9 ffd8 	bl	8000438 <__aeabi_i2d>
 8016488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801648a:	4b30      	ldr	r3, [pc, #192]	; (801654c <__ieee754_pow+0x73c>)
 801648c:	4413      	add	r3, r2
 801648e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016492:	4606      	mov	r6, r0
 8016494:	460f      	mov	r7, r1
 8016496:	4622      	mov	r2, r4
 8016498:	462b      	mov	r3, r5
 801649a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801649e:	f7e9 fe7f 	bl	80001a0 <__adddf3>
 80164a2:	4642      	mov	r2, r8
 80164a4:	464b      	mov	r3, r9
 80164a6:	f7e9 fe7b 	bl	80001a0 <__adddf3>
 80164aa:	4632      	mov	r2, r6
 80164ac:	463b      	mov	r3, r7
 80164ae:	f7e9 fe77 	bl	80001a0 <__adddf3>
 80164b2:	9802      	ldr	r0, [sp, #8]
 80164b4:	4632      	mov	r2, r6
 80164b6:	463b      	mov	r3, r7
 80164b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164bc:	f7e9 fe6e 	bl	800019c <__aeabi_dsub>
 80164c0:	4642      	mov	r2, r8
 80164c2:	464b      	mov	r3, r9
 80164c4:	f7e9 fe6a 	bl	800019c <__aeabi_dsub>
 80164c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164cc:	e607      	b.n	80160de <__ieee754_pow+0x2ce>
 80164ce:	f04f 0a01 	mov.w	sl, #1
 80164d2:	e6a5      	b.n	8016220 <__ieee754_pow+0x410>
 80164d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8016528 <__ieee754_pow+0x718>
 80164d8:	e613      	b.n	8016102 <__ieee754_pow+0x2f2>
 80164da:	bf00      	nop
 80164dc:	f3af 8000 	nop.w
 80164e0:	4a454eef 	.word	0x4a454eef
 80164e4:	3fca7e28 	.word	0x3fca7e28
 80164e8:	93c9db65 	.word	0x93c9db65
 80164ec:	3fcd864a 	.word	0x3fcd864a
 80164f0:	a91d4101 	.word	0xa91d4101
 80164f4:	3fd17460 	.word	0x3fd17460
 80164f8:	518f264d 	.word	0x518f264d
 80164fc:	3fd55555 	.word	0x3fd55555
 8016500:	db6fabff 	.word	0xdb6fabff
 8016504:	3fdb6db6 	.word	0x3fdb6db6
 8016508:	33333303 	.word	0x33333303
 801650c:	3fe33333 	.word	0x3fe33333
 8016510:	e0000000 	.word	0xe0000000
 8016514:	3feec709 	.word	0x3feec709
 8016518:	dc3a03fd 	.word	0xdc3a03fd
 801651c:	3feec709 	.word	0x3feec709
 8016520:	145b01f5 	.word	0x145b01f5
 8016524:	be3e2fe0 	.word	0xbe3e2fe0
 8016528:	00000000 	.word	0x00000000
 801652c:	3ff00000 	.word	0x3ff00000
 8016530:	43400000 	.word	0x43400000
 8016534:	0003988e 	.word	0x0003988e
 8016538:	000bb679 	.word	0x000bb679
 801653c:	080171c8 	.word	0x080171c8
 8016540:	3ff00000 	.word	0x3ff00000
 8016544:	40080000 	.word	0x40080000
 8016548:	080171e8 	.word	0x080171e8
 801654c:	080171d8 	.word	0x080171d8
 8016550:	a3b4      	add	r3, pc, #720	; (adr r3, 8016824 <__ieee754_pow+0xa14>)
 8016552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016556:	4640      	mov	r0, r8
 8016558:	4649      	mov	r1, r9
 801655a:	f7e9 fe21 	bl	80001a0 <__adddf3>
 801655e:	4622      	mov	r2, r4
 8016560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016564:	462b      	mov	r3, r5
 8016566:	4630      	mov	r0, r6
 8016568:	4639      	mov	r1, r7
 801656a:	f7e9 fe17 	bl	800019c <__aeabi_dsub>
 801656e:	4602      	mov	r2, r0
 8016570:	460b      	mov	r3, r1
 8016572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016576:	f7ea fa59 	bl	8000a2c <__aeabi_dcmpgt>
 801657a:	2800      	cmp	r0, #0
 801657c:	f47f adfe 	bne.w	801617c <__ieee754_pow+0x36c>
 8016580:	4aa3      	ldr	r2, [pc, #652]	; (8016810 <__ieee754_pow+0xa00>)
 8016582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016586:	4293      	cmp	r3, r2
 8016588:	f340 810a 	ble.w	80167a0 <__ieee754_pow+0x990>
 801658c:	151b      	asrs	r3, r3, #20
 801658e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016592:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016596:	fa4a f303 	asr.w	r3, sl, r3
 801659a:	445b      	add	r3, fp
 801659c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80165a0:	4e9c      	ldr	r6, [pc, #624]	; (8016814 <__ieee754_pow+0xa04>)
 80165a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80165a6:	4116      	asrs	r6, r2
 80165a8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80165ac:	2000      	movs	r0, #0
 80165ae:	ea23 0106 	bic.w	r1, r3, r6
 80165b2:	f1c2 0214 	rsb	r2, r2, #20
 80165b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80165ba:	fa4a fa02 	asr.w	sl, sl, r2
 80165be:	f1bb 0f00 	cmp.w	fp, #0
 80165c2:	4602      	mov	r2, r0
 80165c4:	460b      	mov	r3, r1
 80165c6:	4620      	mov	r0, r4
 80165c8:	4629      	mov	r1, r5
 80165ca:	bfb8      	it	lt
 80165cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80165d0:	f7e9 fde4 	bl	800019c <__aeabi_dsub>
 80165d4:	e9cd 0100 	strd	r0, r1, [sp]
 80165d8:	4642      	mov	r2, r8
 80165da:	464b      	mov	r3, r9
 80165dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165e0:	f7e9 fdde 	bl	80001a0 <__adddf3>
 80165e4:	2000      	movs	r0, #0
 80165e6:	a378      	add	r3, pc, #480	; (adr r3, 80167c8 <__ieee754_pow+0x9b8>)
 80165e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ec:	4604      	mov	r4, r0
 80165ee:	460d      	mov	r5, r1
 80165f0:	f7e9 ff8c 	bl	800050c <__aeabi_dmul>
 80165f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165f8:	4606      	mov	r6, r0
 80165fa:	460f      	mov	r7, r1
 80165fc:	4620      	mov	r0, r4
 80165fe:	4629      	mov	r1, r5
 8016600:	f7e9 fdcc 	bl	800019c <__aeabi_dsub>
 8016604:	4602      	mov	r2, r0
 8016606:	460b      	mov	r3, r1
 8016608:	4640      	mov	r0, r8
 801660a:	4649      	mov	r1, r9
 801660c:	f7e9 fdc6 	bl	800019c <__aeabi_dsub>
 8016610:	a36f      	add	r3, pc, #444	; (adr r3, 80167d0 <__ieee754_pow+0x9c0>)
 8016612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016616:	f7e9 ff79 	bl	800050c <__aeabi_dmul>
 801661a:	a36f      	add	r3, pc, #444	; (adr r3, 80167d8 <__ieee754_pow+0x9c8>)
 801661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016620:	4680      	mov	r8, r0
 8016622:	4689      	mov	r9, r1
 8016624:	4620      	mov	r0, r4
 8016626:	4629      	mov	r1, r5
 8016628:	f7e9 ff70 	bl	800050c <__aeabi_dmul>
 801662c:	4602      	mov	r2, r0
 801662e:	460b      	mov	r3, r1
 8016630:	4640      	mov	r0, r8
 8016632:	4649      	mov	r1, r9
 8016634:	f7e9 fdb4 	bl	80001a0 <__adddf3>
 8016638:	4604      	mov	r4, r0
 801663a:	460d      	mov	r5, r1
 801663c:	4602      	mov	r2, r0
 801663e:	460b      	mov	r3, r1
 8016640:	4630      	mov	r0, r6
 8016642:	4639      	mov	r1, r7
 8016644:	f7e9 fdac 	bl	80001a0 <__adddf3>
 8016648:	4632      	mov	r2, r6
 801664a:	463b      	mov	r3, r7
 801664c:	4680      	mov	r8, r0
 801664e:	4689      	mov	r9, r1
 8016650:	f7e9 fda4 	bl	800019c <__aeabi_dsub>
 8016654:	4602      	mov	r2, r0
 8016656:	460b      	mov	r3, r1
 8016658:	4620      	mov	r0, r4
 801665a:	4629      	mov	r1, r5
 801665c:	f7e9 fd9e 	bl	800019c <__aeabi_dsub>
 8016660:	4642      	mov	r2, r8
 8016662:	4606      	mov	r6, r0
 8016664:	460f      	mov	r7, r1
 8016666:	464b      	mov	r3, r9
 8016668:	4640      	mov	r0, r8
 801666a:	4649      	mov	r1, r9
 801666c:	f7e9 ff4e 	bl	800050c <__aeabi_dmul>
 8016670:	a35b      	add	r3, pc, #364	; (adr r3, 80167e0 <__ieee754_pow+0x9d0>)
 8016672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016676:	4604      	mov	r4, r0
 8016678:	460d      	mov	r5, r1
 801667a:	f7e9 ff47 	bl	800050c <__aeabi_dmul>
 801667e:	a35a      	add	r3, pc, #360	; (adr r3, 80167e8 <__ieee754_pow+0x9d8>)
 8016680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016684:	f7e9 fd8a 	bl	800019c <__aeabi_dsub>
 8016688:	4622      	mov	r2, r4
 801668a:	462b      	mov	r3, r5
 801668c:	f7e9 ff3e 	bl	800050c <__aeabi_dmul>
 8016690:	a357      	add	r3, pc, #348	; (adr r3, 80167f0 <__ieee754_pow+0x9e0>)
 8016692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016696:	f7e9 fd83 	bl	80001a0 <__adddf3>
 801669a:	4622      	mov	r2, r4
 801669c:	462b      	mov	r3, r5
 801669e:	f7e9 ff35 	bl	800050c <__aeabi_dmul>
 80166a2:	a355      	add	r3, pc, #340	; (adr r3, 80167f8 <__ieee754_pow+0x9e8>)
 80166a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166a8:	f7e9 fd78 	bl	800019c <__aeabi_dsub>
 80166ac:	4622      	mov	r2, r4
 80166ae:	462b      	mov	r3, r5
 80166b0:	f7e9 ff2c 	bl	800050c <__aeabi_dmul>
 80166b4:	a352      	add	r3, pc, #328	; (adr r3, 8016800 <__ieee754_pow+0x9f0>)
 80166b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ba:	f7e9 fd71 	bl	80001a0 <__adddf3>
 80166be:	4622      	mov	r2, r4
 80166c0:	462b      	mov	r3, r5
 80166c2:	f7e9 ff23 	bl	800050c <__aeabi_dmul>
 80166c6:	4602      	mov	r2, r0
 80166c8:	460b      	mov	r3, r1
 80166ca:	4640      	mov	r0, r8
 80166cc:	4649      	mov	r1, r9
 80166ce:	f7e9 fd65 	bl	800019c <__aeabi_dsub>
 80166d2:	4604      	mov	r4, r0
 80166d4:	460d      	mov	r5, r1
 80166d6:	4602      	mov	r2, r0
 80166d8:	460b      	mov	r3, r1
 80166da:	4640      	mov	r0, r8
 80166dc:	4649      	mov	r1, r9
 80166de:	f7e9 ff15 	bl	800050c <__aeabi_dmul>
 80166e2:	2200      	movs	r2, #0
 80166e4:	e9cd 0100 	strd	r0, r1, [sp]
 80166e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80166ec:	4620      	mov	r0, r4
 80166ee:	4629      	mov	r1, r5
 80166f0:	f7e9 fd54 	bl	800019c <__aeabi_dsub>
 80166f4:	4602      	mov	r2, r0
 80166f6:	460b      	mov	r3, r1
 80166f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166fc:	f7ea f830 	bl	8000760 <__aeabi_ddiv>
 8016700:	4632      	mov	r2, r6
 8016702:	4604      	mov	r4, r0
 8016704:	460d      	mov	r5, r1
 8016706:	463b      	mov	r3, r7
 8016708:	4640      	mov	r0, r8
 801670a:	4649      	mov	r1, r9
 801670c:	f7e9 fefe 	bl	800050c <__aeabi_dmul>
 8016710:	4632      	mov	r2, r6
 8016712:	463b      	mov	r3, r7
 8016714:	f7e9 fd44 	bl	80001a0 <__adddf3>
 8016718:	4602      	mov	r2, r0
 801671a:	460b      	mov	r3, r1
 801671c:	4620      	mov	r0, r4
 801671e:	4629      	mov	r1, r5
 8016720:	f7e9 fd3c 	bl	800019c <__aeabi_dsub>
 8016724:	4642      	mov	r2, r8
 8016726:	464b      	mov	r3, r9
 8016728:	f7e9 fd38 	bl	800019c <__aeabi_dsub>
 801672c:	4602      	mov	r2, r0
 801672e:	460b      	mov	r3, r1
 8016730:	2000      	movs	r0, #0
 8016732:	4939      	ldr	r1, [pc, #228]	; (8016818 <__ieee754_pow+0xa08>)
 8016734:	f7e9 fd32 	bl	800019c <__aeabi_dsub>
 8016738:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801673c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016740:	4602      	mov	r2, r0
 8016742:	460b      	mov	r3, r1
 8016744:	da2f      	bge.n	80167a6 <__ieee754_pow+0x996>
 8016746:	4650      	mov	r0, sl
 8016748:	ec43 2b10 	vmov	d0, r2, r3
 801674c:	f000 f9c0 	bl	8016ad0 <scalbn>
 8016750:	ec51 0b10 	vmov	r0, r1, d0
 8016754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016758:	f7ff bbf1 	b.w	8015f3e <__ieee754_pow+0x12e>
 801675c:	4b2f      	ldr	r3, [pc, #188]	; (801681c <__ieee754_pow+0xa0c>)
 801675e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016762:	429e      	cmp	r6, r3
 8016764:	f77f af0c 	ble.w	8016580 <__ieee754_pow+0x770>
 8016768:	4b2d      	ldr	r3, [pc, #180]	; (8016820 <__ieee754_pow+0xa10>)
 801676a:	440b      	add	r3, r1
 801676c:	4303      	orrs	r3, r0
 801676e:	d00b      	beq.n	8016788 <__ieee754_pow+0x978>
 8016770:	a325      	add	r3, pc, #148	; (adr r3, 8016808 <__ieee754_pow+0x9f8>)
 8016772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801677a:	f7e9 fec7 	bl	800050c <__aeabi_dmul>
 801677e:	a322      	add	r3, pc, #136	; (adr r3, 8016808 <__ieee754_pow+0x9f8>)
 8016780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016784:	f7ff bbdb 	b.w	8015f3e <__ieee754_pow+0x12e>
 8016788:	4622      	mov	r2, r4
 801678a:	462b      	mov	r3, r5
 801678c:	f7e9 fd06 	bl	800019c <__aeabi_dsub>
 8016790:	4642      	mov	r2, r8
 8016792:	464b      	mov	r3, r9
 8016794:	f7ea f940 	bl	8000a18 <__aeabi_dcmpge>
 8016798:	2800      	cmp	r0, #0
 801679a:	f43f aef1 	beq.w	8016580 <__ieee754_pow+0x770>
 801679e:	e7e7      	b.n	8016770 <__ieee754_pow+0x960>
 80167a0:	f04f 0a00 	mov.w	sl, #0
 80167a4:	e718      	b.n	80165d8 <__ieee754_pow+0x7c8>
 80167a6:	4621      	mov	r1, r4
 80167a8:	e7d4      	b.n	8016754 <__ieee754_pow+0x944>
 80167aa:	2000      	movs	r0, #0
 80167ac:	491a      	ldr	r1, [pc, #104]	; (8016818 <__ieee754_pow+0xa08>)
 80167ae:	f7ff bb8f 	b.w	8015ed0 <__ieee754_pow+0xc0>
 80167b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167b6:	f7ff bb8b 	b.w	8015ed0 <__ieee754_pow+0xc0>
 80167ba:	4630      	mov	r0, r6
 80167bc:	4639      	mov	r1, r7
 80167be:	f7ff bb87 	b.w	8015ed0 <__ieee754_pow+0xc0>
 80167c2:	4693      	mov	fp, r2
 80167c4:	f7ff bb98 	b.w	8015ef8 <__ieee754_pow+0xe8>
 80167c8:	00000000 	.word	0x00000000
 80167cc:	3fe62e43 	.word	0x3fe62e43
 80167d0:	fefa39ef 	.word	0xfefa39ef
 80167d4:	3fe62e42 	.word	0x3fe62e42
 80167d8:	0ca86c39 	.word	0x0ca86c39
 80167dc:	be205c61 	.word	0xbe205c61
 80167e0:	72bea4d0 	.word	0x72bea4d0
 80167e4:	3e663769 	.word	0x3e663769
 80167e8:	c5d26bf1 	.word	0xc5d26bf1
 80167ec:	3ebbbd41 	.word	0x3ebbbd41
 80167f0:	af25de2c 	.word	0xaf25de2c
 80167f4:	3f11566a 	.word	0x3f11566a
 80167f8:	16bebd93 	.word	0x16bebd93
 80167fc:	3f66c16c 	.word	0x3f66c16c
 8016800:	5555553e 	.word	0x5555553e
 8016804:	3fc55555 	.word	0x3fc55555
 8016808:	c2f8f359 	.word	0xc2f8f359
 801680c:	01a56e1f 	.word	0x01a56e1f
 8016810:	3fe00000 	.word	0x3fe00000
 8016814:	000fffff 	.word	0x000fffff
 8016818:	3ff00000 	.word	0x3ff00000
 801681c:	4090cbff 	.word	0x4090cbff
 8016820:	3f6f3400 	.word	0x3f6f3400
 8016824:	652b82fe 	.word	0x652b82fe
 8016828:	3c971547 	.word	0x3c971547

0801682c <__ieee754_sqrt>:
 801682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016830:	4955      	ldr	r1, [pc, #340]	; (8016988 <__ieee754_sqrt+0x15c>)
 8016832:	ec55 4b10 	vmov	r4, r5, d0
 8016836:	43a9      	bics	r1, r5
 8016838:	462b      	mov	r3, r5
 801683a:	462a      	mov	r2, r5
 801683c:	d112      	bne.n	8016864 <__ieee754_sqrt+0x38>
 801683e:	ee10 2a10 	vmov	r2, s0
 8016842:	ee10 0a10 	vmov	r0, s0
 8016846:	4629      	mov	r1, r5
 8016848:	f7e9 fe60 	bl	800050c <__aeabi_dmul>
 801684c:	4602      	mov	r2, r0
 801684e:	460b      	mov	r3, r1
 8016850:	4620      	mov	r0, r4
 8016852:	4629      	mov	r1, r5
 8016854:	f7e9 fca4 	bl	80001a0 <__adddf3>
 8016858:	4604      	mov	r4, r0
 801685a:	460d      	mov	r5, r1
 801685c:	ec45 4b10 	vmov	d0, r4, r5
 8016860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016864:	2d00      	cmp	r5, #0
 8016866:	ee10 0a10 	vmov	r0, s0
 801686a:	4621      	mov	r1, r4
 801686c:	dc0f      	bgt.n	801688e <__ieee754_sqrt+0x62>
 801686e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016872:	4330      	orrs	r0, r6
 8016874:	d0f2      	beq.n	801685c <__ieee754_sqrt+0x30>
 8016876:	b155      	cbz	r5, 801688e <__ieee754_sqrt+0x62>
 8016878:	ee10 2a10 	vmov	r2, s0
 801687c:	4620      	mov	r0, r4
 801687e:	4629      	mov	r1, r5
 8016880:	f7e9 fc8c 	bl	800019c <__aeabi_dsub>
 8016884:	4602      	mov	r2, r0
 8016886:	460b      	mov	r3, r1
 8016888:	f7e9 ff6a 	bl	8000760 <__aeabi_ddiv>
 801688c:	e7e4      	b.n	8016858 <__ieee754_sqrt+0x2c>
 801688e:	151b      	asrs	r3, r3, #20
 8016890:	d073      	beq.n	801697a <__ieee754_sqrt+0x14e>
 8016892:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016896:	07dd      	lsls	r5, r3, #31
 8016898:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801689c:	bf48      	it	mi
 801689e:	0fc8      	lsrmi	r0, r1, #31
 80168a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80168a4:	bf44      	itt	mi
 80168a6:	0049      	lslmi	r1, r1, #1
 80168a8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80168ac:	2500      	movs	r5, #0
 80168ae:	1058      	asrs	r0, r3, #1
 80168b0:	0fcb      	lsrs	r3, r1, #31
 80168b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80168b6:	0049      	lsls	r1, r1, #1
 80168b8:	2316      	movs	r3, #22
 80168ba:	462c      	mov	r4, r5
 80168bc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80168c0:	19a7      	adds	r7, r4, r6
 80168c2:	4297      	cmp	r7, r2
 80168c4:	bfde      	ittt	le
 80168c6:	19bc      	addle	r4, r7, r6
 80168c8:	1bd2      	suble	r2, r2, r7
 80168ca:	19ad      	addle	r5, r5, r6
 80168cc:	0fcf      	lsrs	r7, r1, #31
 80168ce:	3b01      	subs	r3, #1
 80168d0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80168d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80168d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80168dc:	d1f0      	bne.n	80168c0 <__ieee754_sqrt+0x94>
 80168de:	f04f 0c20 	mov.w	ip, #32
 80168e2:	469e      	mov	lr, r3
 80168e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80168e8:	42a2      	cmp	r2, r4
 80168ea:	eb06 070e 	add.w	r7, r6, lr
 80168ee:	dc02      	bgt.n	80168f6 <__ieee754_sqrt+0xca>
 80168f0:	d112      	bne.n	8016918 <__ieee754_sqrt+0xec>
 80168f2:	428f      	cmp	r7, r1
 80168f4:	d810      	bhi.n	8016918 <__ieee754_sqrt+0xec>
 80168f6:	2f00      	cmp	r7, #0
 80168f8:	eb07 0e06 	add.w	lr, r7, r6
 80168fc:	da42      	bge.n	8016984 <__ieee754_sqrt+0x158>
 80168fe:	f1be 0f00 	cmp.w	lr, #0
 8016902:	db3f      	blt.n	8016984 <__ieee754_sqrt+0x158>
 8016904:	f104 0801 	add.w	r8, r4, #1
 8016908:	1b12      	subs	r2, r2, r4
 801690a:	428f      	cmp	r7, r1
 801690c:	bf88      	it	hi
 801690e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016912:	1bc9      	subs	r1, r1, r7
 8016914:	4433      	add	r3, r6
 8016916:	4644      	mov	r4, r8
 8016918:	0052      	lsls	r2, r2, #1
 801691a:	f1bc 0c01 	subs.w	ip, ip, #1
 801691e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016922:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016926:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801692a:	d1dd      	bne.n	80168e8 <__ieee754_sqrt+0xbc>
 801692c:	430a      	orrs	r2, r1
 801692e:	d006      	beq.n	801693e <__ieee754_sqrt+0x112>
 8016930:	1c5c      	adds	r4, r3, #1
 8016932:	bf13      	iteet	ne
 8016934:	3301      	addne	r3, #1
 8016936:	3501      	addeq	r5, #1
 8016938:	4663      	moveq	r3, ip
 801693a:	f023 0301 	bicne.w	r3, r3, #1
 801693e:	106a      	asrs	r2, r5, #1
 8016940:	085b      	lsrs	r3, r3, #1
 8016942:	07e9      	lsls	r1, r5, #31
 8016944:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016948:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801694c:	bf48      	it	mi
 801694e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016952:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8016956:	461c      	mov	r4, r3
 8016958:	e780      	b.n	801685c <__ieee754_sqrt+0x30>
 801695a:	0aca      	lsrs	r2, r1, #11
 801695c:	3815      	subs	r0, #21
 801695e:	0549      	lsls	r1, r1, #21
 8016960:	2a00      	cmp	r2, #0
 8016962:	d0fa      	beq.n	801695a <__ieee754_sqrt+0x12e>
 8016964:	02d6      	lsls	r6, r2, #11
 8016966:	d50a      	bpl.n	801697e <__ieee754_sqrt+0x152>
 8016968:	f1c3 0420 	rsb	r4, r3, #32
 801696c:	fa21 f404 	lsr.w	r4, r1, r4
 8016970:	1e5d      	subs	r5, r3, #1
 8016972:	4099      	lsls	r1, r3
 8016974:	4322      	orrs	r2, r4
 8016976:	1b43      	subs	r3, r0, r5
 8016978:	e78b      	b.n	8016892 <__ieee754_sqrt+0x66>
 801697a:	4618      	mov	r0, r3
 801697c:	e7f0      	b.n	8016960 <__ieee754_sqrt+0x134>
 801697e:	0052      	lsls	r2, r2, #1
 8016980:	3301      	adds	r3, #1
 8016982:	e7ef      	b.n	8016964 <__ieee754_sqrt+0x138>
 8016984:	46a0      	mov	r8, r4
 8016986:	e7bf      	b.n	8016908 <__ieee754_sqrt+0xdc>
 8016988:	7ff00000 	.word	0x7ff00000

0801698c <fabs>:
 801698c:	ec51 0b10 	vmov	r0, r1, d0
 8016990:	ee10 2a10 	vmov	r2, s0
 8016994:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016998:	ec43 2b10 	vmov	d0, r2, r3
 801699c:	4770      	bx	lr

0801699e <finite>:
 801699e:	ee10 3a90 	vmov	r3, s1
 80169a2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80169a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80169aa:	0fc0      	lsrs	r0, r0, #31
 80169ac:	4770      	bx	lr

080169ae <matherr>:
 80169ae:	2000      	movs	r0, #0
 80169b0:	4770      	bx	lr
 80169b2:	0000      	movs	r0, r0
 80169b4:	0000      	movs	r0, r0
	...

080169b8 <nan>:
 80169b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80169c0 <nan+0x8>
 80169bc:	4770      	bx	lr
 80169be:	bf00      	nop
 80169c0:	00000000 	.word	0x00000000
 80169c4:	7ff80000 	.word	0x7ff80000

080169c8 <rint>:
 80169c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169ca:	ec51 0b10 	vmov	r0, r1, d0
 80169ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80169d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80169d6:	2e13      	cmp	r6, #19
 80169d8:	460b      	mov	r3, r1
 80169da:	ee10 4a10 	vmov	r4, s0
 80169de:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80169e2:	dc56      	bgt.n	8016a92 <rint+0xca>
 80169e4:	2e00      	cmp	r6, #0
 80169e6:	da2b      	bge.n	8016a40 <rint+0x78>
 80169e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80169ec:	4302      	orrs	r2, r0
 80169ee:	d023      	beq.n	8016a38 <rint+0x70>
 80169f0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80169f4:	4302      	orrs	r2, r0
 80169f6:	4254      	negs	r4, r2
 80169f8:	4314      	orrs	r4, r2
 80169fa:	0c4b      	lsrs	r3, r1, #17
 80169fc:	0b24      	lsrs	r4, r4, #12
 80169fe:	045b      	lsls	r3, r3, #17
 8016a00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016a04:	ea44 0103 	orr.w	r1, r4, r3
 8016a08:	460b      	mov	r3, r1
 8016a0a:	492f      	ldr	r1, [pc, #188]	; (8016ac8 <rint+0x100>)
 8016a0c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016a10:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016a14:	4602      	mov	r2, r0
 8016a16:	4639      	mov	r1, r7
 8016a18:	4630      	mov	r0, r6
 8016a1a:	f7e9 fbc1 	bl	80001a0 <__adddf3>
 8016a1e:	e9cd 0100 	strd	r0, r1, [sp]
 8016a22:	463b      	mov	r3, r7
 8016a24:	4632      	mov	r2, r6
 8016a26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a2a:	f7e9 fbb7 	bl	800019c <__aeabi_dsub>
 8016a2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016a32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016a36:	4639      	mov	r1, r7
 8016a38:	ec41 0b10 	vmov	d0, r0, r1
 8016a3c:	b003      	add	sp, #12
 8016a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a40:	4a22      	ldr	r2, [pc, #136]	; (8016acc <rint+0x104>)
 8016a42:	4132      	asrs	r2, r6
 8016a44:	ea01 0702 	and.w	r7, r1, r2
 8016a48:	4307      	orrs	r7, r0
 8016a4a:	d0f5      	beq.n	8016a38 <rint+0x70>
 8016a4c:	0852      	lsrs	r2, r2, #1
 8016a4e:	4011      	ands	r1, r2
 8016a50:	430c      	orrs	r4, r1
 8016a52:	d00b      	beq.n	8016a6c <rint+0xa4>
 8016a54:	ea23 0202 	bic.w	r2, r3, r2
 8016a58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016a5c:	2e13      	cmp	r6, #19
 8016a5e:	fa43 f306 	asr.w	r3, r3, r6
 8016a62:	bf0c      	ite	eq
 8016a64:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016a68:	2400      	movne	r4, #0
 8016a6a:	4313      	orrs	r3, r2
 8016a6c:	4916      	ldr	r1, [pc, #88]	; (8016ac8 <rint+0x100>)
 8016a6e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016a72:	4622      	mov	r2, r4
 8016a74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016a78:	4620      	mov	r0, r4
 8016a7a:	4629      	mov	r1, r5
 8016a7c:	f7e9 fb90 	bl	80001a0 <__adddf3>
 8016a80:	e9cd 0100 	strd	r0, r1, [sp]
 8016a84:	4622      	mov	r2, r4
 8016a86:	462b      	mov	r3, r5
 8016a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a8c:	f7e9 fb86 	bl	800019c <__aeabi_dsub>
 8016a90:	e7d2      	b.n	8016a38 <rint+0x70>
 8016a92:	2e33      	cmp	r6, #51	; 0x33
 8016a94:	dd07      	ble.n	8016aa6 <rint+0xde>
 8016a96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016a9a:	d1cd      	bne.n	8016a38 <rint+0x70>
 8016a9c:	ee10 2a10 	vmov	r2, s0
 8016aa0:	f7e9 fb7e 	bl	80001a0 <__adddf3>
 8016aa4:	e7c8      	b.n	8016a38 <rint+0x70>
 8016aa6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8016aae:	40f2      	lsrs	r2, r6
 8016ab0:	4210      	tst	r0, r2
 8016ab2:	d0c1      	beq.n	8016a38 <rint+0x70>
 8016ab4:	0852      	lsrs	r2, r2, #1
 8016ab6:	4210      	tst	r0, r2
 8016ab8:	bf1f      	itttt	ne
 8016aba:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016abe:	ea20 0202 	bicne.w	r2, r0, r2
 8016ac2:	4134      	asrne	r4, r6
 8016ac4:	4314      	orrne	r4, r2
 8016ac6:	e7d1      	b.n	8016a6c <rint+0xa4>
 8016ac8:	080171f8 	.word	0x080171f8
 8016acc:	000fffff 	.word	0x000fffff

08016ad0 <scalbn>:
 8016ad0:	b570      	push	{r4, r5, r6, lr}
 8016ad2:	ec55 4b10 	vmov	r4, r5, d0
 8016ad6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016ada:	4606      	mov	r6, r0
 8016adc:	462b      	mov	r3, r5
 8016ade:	b9aa      	cbnz	r2, 8016b0c <scalbn+0x3c>
 8016ae0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016ae4:	4323      	orrs	r3, r4
 8016ae6:	d03b      	beq.n	8016b60 <scalbn+0x90>
 8016ae8:	4b31      	ldr	r3, [pc, #196]	; (8016bb0 <scalbn+0xe0>)
 8016aea:	4629      	mov	r1, r5
 8016aec:	2200      	movs	r2, #0
 8016aee:	ee10 0a10 	vmov	r0, s0
 8016af2:	f7e9 fd0b 	bl	800050c <__aeabi_dmul>
 8016af6:	4b2f      	ldr	r3, [pc, #188]	; (8016bb4 <scalbn+0xe4>)
 8016af8:	429e      	cmp	r6, r3
 8016afa:	4604      	mov	r4, r0
 8016afc:	460d      	mov	r5, r1
 8016afe:	da12      	bge.n	8016b26 <scalbn+0x56>
 8016b00:	a327      	add	r3, pc, #156	; (adr r3, 8016ba0 <scalbn+0xd0>)
 8016b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b06:	f7e9 fd01 	bl	800050c <__aeabi_dmul>
 8016b0a:	e009      	b.n	8016b20 <scalbn+0x50>
 8016b0c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016b10:	428a      	cmp	r2, r1
 8016b12:	d10c      	bne.n	8016b2e <scalbn+0x5e>
 8016b14:	ee10 2a10 	vmov	r2, s0
 8016b18:	4620      	mov	r0, r4
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	f7e9 fb40 	bl	80001a0 <__adddf3>
 8016b20:	4604      	mov	r4, r0
 8016b22:	460d      	mov	r5, r1
 8016b24:	e01c      	b.n	8016b60 <scalbn+0x90>
 8016b26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	3a36      	subs	r2, #54	; 0x36
 8016b2e:	4432      	add	r2, r6
 8016b30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016b34:	428a      	cmp	r2, r1
 8016b36:	dd0b      	ble.n	8016b50 <scalbn+0x80>
 8016b38:	ec45 4b11 	vmov	d1, r4, r5
 8016b3c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016ba8 <scalbn+0xd8>
 8016b40:	f000 f83c 	bl	8016bbc <copysign>
 8016b44:	a318      	add	r3, pc, #96	; (adr r3, 8016ba8 <scalbn+0xd8>)
 8016b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b4a:	ec51 0b10 	vmov	r0, r1, d0
 8016b4e:	e7da      	b.n	8016b06 <scalbn+0x36>
 8016b50:	2a00      	cmp	r2, #0
 8016b52:	dd08      	ble.n	8016b66 <scalbn+0x96>
 8016b54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016b58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016b5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b60:	ec45 4b10 	vmov	d0, r4, r5
 8016b64:	bd70      	pop	{r4, r5, r6, pc}
 8016b66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016b6a:	da0d      	bge.n	8016b88 <scalbn+0xb8>
 8016b6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016b70:	429e      	cmp	r6, r3
 8016b72:	ec45 4b11 	vmov	d1, r4, r5
 8016b76:	dce1      	bgt.n	8016b3c <scalbn+0x6c>
 8016b78:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016ba0 <scalbn+0xd0>
 8016b7c:	f000 f81e 	bl	8016bbc <copysign>
 8016b80:	a307      	add	r3, pc, #28	; (adr r3, 8016ba0 <scalbn+0xd0>)
 8016b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b86:	e7e0      	b.n	8016b4a <scalbn+0x7a>
 8016b88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016b8c:	3236      	adds	r2, #54	; 0x36
 8016b8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016b92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b96:	4620      	mov	r0, r4
 8016b98:	4629      	mov	r1, r5
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	4b06      	ldr	r3, [pc, #24]	; (8016bb8 <scalbn+0xe8>)
 8016b9e:	e7b2      	b.n	8016b06 <scalbn+0x36>
 8016ba0:	c2f8f359 	.word	0xc2f8f359
 8016ba4:	01a56e1f 	.word	0x01a56e1f
 8016ba8:	8800759c 	.word	0x8800759c
 8016bac:	7e37e43c 	.word	0x7e37e43c
 8016bb0:	43500000 	.word	0x43500000
 8016bb4:	ffff3cb0 	.word	0xffff3cb0
 8016bb8:	3c900000 	.word	0x3c900000

08016bbc <copysign>:
 8016bbc:	ec51 0b10 	vmov	r0, r1, d0
 8016bc0:	ee11 0a90 	vmov	r0, s3
 8016bc4:	ee10 2a10 	vmov	r2, s0
 8016bc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016bcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8016bd0:	ea41 0300 	orr.w	r3, r1, r0
 8016bd4:	ec43 2b10 	vmov	d0, r2, r3
 8016bd8:	4770      	bx	lr
	...

08016bdc <__errno>:
 8016bdc:	4b01      	ldr	r3, [pc, #4]	; (8016be4 <__errno+0x8>)
 8016bde:	6818      	ldr	r0, [r3, #0]
 8016be0:	4770      	bx	lr
 8016be2:	bf00      	nop
 8016be4:	200001e8 	.word	0x200001e8

08016be8 <__libc_init_array>:
 8016be8:	b570      	push	{r4, r5, r6, lr}
 8016bea:	4e0d      	ldr	r6, [pc, #52]	; (8016c20 <__libc_init_array+0x38>)
 8016bec:	4c0d      	ldr	r4, [pc, #52]	; (8016c24 <__libc_init_array+0x3c>)
 8016bee:	1ba4      	subs	r4, r4, r6
 8016bf0:	10a4      	asrs	r4, r4, #2
 8016bf2:	2500      	movs	r5, #0
 8016bf4:	42a5      	cmp	r5, r4
 8016bf6:	d109      	bne.n	8016c0c <__libc_init_array+0x24>
 8016bf8:	4e0b      	ldr	r6, [pc, #44]	; (8016c28 <__libc_init_array+0x40>)
 8016bfa:	4c0c      	ldr	r4, [pc, #48]	; (8016c2c <__libc_init_array+0x44>)
 8016bfc:	f000 f82c 	bl	8016c58 <_init>
 8016c00:	1ba4      	subs	r4, r4, r6
 8016c02:	10a4      	asrs	r4, r4, #2
 8016c04:	2500      	movs	r5, #0
 8016c06:	42a5      	cmp	r5, r4
 8016c08:	d105      	bne.n	8016c16 <__libc_init_array+0x2e>
 8016c0a:	bd70      	pop	{r4, r5, r6, pc}
 8016c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016c10:	4798      	blx	r3
 8016c12:	3501      	adds	r5, #1
 8016c14:	e7ee      	b.n	8016bf4 <__libc_init_array+0xc>
 8016c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016c1a:	4798      	blx	r3
 8016c1c:	3501      	adds	r5, #1
 8016c1e:	e7f2      	b.n	8016c06 <__libc_init_array+0x1e>
 8016c20:	08017268 	.word	0x08017268
 8016c24:	08017268 	.word	0x08017268
 8016c28:	08017268 	.word	0x08017268
 8016c2c:	0801726c 	.word	0x0801726c

08016c30 <memcpy>:
 8016c30:	b510      	push	{r4, lr}
 8016c32:	1e43      	subs	r3, r0, #1
 8016c34:	440a      	add	r2, r1
 8016c36:	4291      	cmp	r1, r2
 8016c38:	d100      	bne.n	8016c3c <memcpy+0xc>
 8016c3a:	bd10      	pop	{r4, pc}
 8016c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c44:	e7f7      	b.n	8016c36 <memcpy+0x6>

08016c46 <memset>:
 8016c46:	4402      	add	r2, r0
 8016c48:	4603      	mov	r3, r0
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d100      	bne.n	8016c50 <memset+0xa>
 8016c4e:	4770      	bx	lr
 8016c50:	f803 1b01 	strb.w	r1, [r3], #1
 8016c54:	e7f9      	b.n	8016c4a <memset+0x4>
	...

08016c58 <_init>:
 8016c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c5a:	bf00      	nop
 8016c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c5e:	bc08      	pop	{r3}
 8016c60:	469e      	mov	lr, r3
 8016c62:	4770      	bx	lr

08016c64 <_fini>:
 8016c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c66:	bf00      	nop
 8016c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c6a:	bc08      	pop	{r3}
 8016c6c:	469e      	mov	lr, r3
 8016c6e:	4770      	bx	lr
